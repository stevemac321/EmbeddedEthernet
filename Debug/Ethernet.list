
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800c0c0  0800c0c0  0000d0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c540  0800c540  0000d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c54c  0800c54c  0000d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c550  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001d8  0800c728  0000e1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000238  0800c788  0000e238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  24000298  0800c7e8  0000e298  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  240006fc  0800c7e8  0000e6fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d6b  00000000  00000000  0000e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f5  00000000  00000000  00025031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  000285a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035685  00000000  00000000  00029189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c98  00000000  00000000  0005e80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015d816  00000000  00000000  000724a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cfcbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005044  00000000  00000000  001cfd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001d4d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000298 	.word	0x24000298
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c0a8 	.word	0x0800c0a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400029c 	.word	0x2400029c
 800030c:	0800c0a8 	.word	0x0800c0a8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 ff37 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f8b5 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fa59 	bl	8000b74 <MX_GPIO_Init>
  MX_ETH_Init();
 80006c2:	f000 f9a3 	bl	8000a0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 f9ed 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006ca:	f000 fa4b 	bl	8000b64 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 80006ce:	f000 f91b 	bl	8000908 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ETH_Start(&heth) != HAL_OK)
 80006d2:	484c      	ldr	r0, [pc, #304]	@ (8000804 <main+0x154>)
 80006d4:	f003 f868 	bl	80037a8 <HAL_ETH_Start>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d005      	beq.n	80006ea <main+0x3a>
 	  {
 	      printf("Failed to start Ethernet\r\n");
 80006de:	484a      	ldr	r0, [pc, #296]	@ (8000808 <main+0x158>)
 80006e0:	f009 fde0 	bl	800a2a4 <puts>
 	      Error_Handler();
 80006e4:	f000 fc02 	bl	8000eec <Error_Handler>
 80006e8:	e002      	b.n	80006f0 <main+0x40>
 	  } else {
 		  printf("Ethernet started\r\n");
 80006ea:	4848      	ldr	r0, [pc, #288]	@ (800080c <main+0x15c>)
 80006ec:	f009 fdda 	bl	800a2a4 <puts>
 	  }

  uint8_t *RxDataBuffer = NULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  if (HAL_ETH_ReadData(&heth, (void*)&RxDataBuffer)) {
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4842      	ldr	r0, [pc, #264]	@ (8000804 <main+0x154>)
 80006fa:	f003 f99e 	bl	8003a3a <HAL_ETH_ReadData>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <main+0x5e>

	  ReadChunk(&heth, RxDataBuffer);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	483e      	ldr	r0, [pc, #248]	@ (8000804 <main+0x154>)
 800070a:	f000 fb7b 	bl	8000e04 <ReadChunk>
  }



  for (int i = 0; i < TOTAL_FLOATS; i++) {
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e02a      	b.n	800076a <main+0xba>
	HAL_ADC_Start(&hadc3);
 8000714:	483e      	ldr	r0, [pc, #248]	@ (8000810 <main+0x160>)
 8000716:	f001 fca1 	bl	800205c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK) {
 800071a:	f04f 31ff 	mov.w	r1, #4294967295
 800071e:	483c      	ldr	r0, [pc, #240]	@ (8000810 <main+0x160>)
 8000720:	f001 fd9a 	bl	8002258 <HAL_ADC_PollForConversion>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d119      	bne.n	800075e <main+0xae>
		adc_buffer[i] = HAL_ADC_GetValue(&hadc3);
 800072a:	4839      	ldr	r0, [pc, #228]	@ (8000810 <main+0x160>)
 800072c:	f001 fe88 	bl	8002440 <HAL_ADC_GetValue>
 8000730:	ee07 0a90 	vmov	s15, r0
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	4a36      	ldr	r2, [pc, #216]	@ (8000814 <main+0x164>)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	edc3 7a00 	vstr	s15, [r3]
		printf("%f ", adc_buffer[i]);
 8000744:	4a33      	ldr	r2, [pc, #204]	@ (8000814 <main+0x164>)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000754:	ec53 2b17 	vmov	r2, r3, d7
 8000758:	482f      	ldr	r0, [pc, #188]	@ (8000818 <main+0x168>)
 800075a:	f009 fd3b 	bl	800a1d4 <iprintf>
	}
	HAL_ADC_Stop(&hadc3);
 800075e:	482c      	ldr	r0, [pc, #176]	@ (8000810 <main+0x160>)
 8000760:	f001 fd46 	bl	80021f0 <HAL_ADC_Stop>
  for (int i = 0; i < TOTAL_FLOATS; i++) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2b1f      	cmp	r3, #31
 800076e:	ddd1      	ble.n	8000714 <main+0x64>
  }
  printf("\n\r the end of floats, now TxDataBuffer");
 8000770:	482a      	ldr	r0, [pc, #168]	@ (800081c <main+0x16c>)
 8000772:	f009 fd2f 	bl	800a1d4 <iprintf>

  const float *src_ptr = adc_buffer; // Pointer to the source float array
 8000776:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <main+0x164>)
 8000778:	613b      	str	r3, [r7, #16]
  uint8_t *dest_ptr = TxDataBuffer;
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <main+0x170>)
 800077c:	60fb      	str	r3, [r7, #12]

  // Convert floats in adc_buffer to bytes and store in TxDataBuffer
  for (int i = 0; i < TOTAL_FLOATS; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e00d      	b.n	80007a0 <main+0xf0>
      // Each float (4 bytes) is copied to the appropriate position in TxDataBuffer
	  memcpy(dest_ptr, src_ptr, sizeof(float));
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	601a      	str	r2, [r3, #0]
	  // Move the pointers to the next position
	  src_ptr++;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	3304      	adds	r3, #4
 8000792:	613b      	str	r3, [r7, #16]
	  dest_ptr += sizeof(float);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3304      	adds	r3, #4
 8000798:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < TOTAL_FLOATS; i++) {
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b1f      	cmp	r3, #31
 80007a4:	ddee      	ble.n	8000784 <main+0xd4>
  }
  for (int i = 0; i < TOTAL_FLOATS; i += 4) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	e01f      	b.n	80007ec <main+0x13c>
      printf("TxDataBuffer [%d - %d]: %02x %02x %02x %02x\r\n", i, i+3,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1cda      	adds	r2, r3, #3
             TxDataBuffer[i], TxDataBuffer[i+1], TxDataBuffer[i+2], TxDataBuffer[i+3]);
 80007b0:	491b      	ldr	r1, [pc, #108]	@ (8000820 <main+0x170>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	440b      	add	r3, r1
 80007b6:	781b      	ldrb	r3, [r3, #0]
      printf("TxDataBuffer [%d - %d]: %02x %02x %02x %02x\r\n", i, i+3,
 80007b8:	461d      	mov	r5, r3
             TxDataBuffer[i], TxDataBuffer[i+1], TxDataBuffer[i+2], TxDataBuffer[i+3]);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	4918      	ldr	r1, [pc, #96]	@ (8000820 <main+0x170>)
 80007c0:	5ccb      	ldrb	r3, [r1, r3]
      printf("TxDataBuffer [%d - %d]: %02x %02x %02x %02x\r\n", i, i+3,
 80007c2:	4618      	mov	r0, r3
             TxDataBuffer[i], TxDataBuffer[i+1], TxDataBuffer[i+2], TxDataBuffer[i+3]);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3302      	adds	r3, #2
 80007c8:	4915      	ldr	r1, [pc, #84]	@ (8000820 <main+0x170>)
 80007ca:	5ccb      	ldrb	r3, [r1, r3]
      printf("TxDataBuffer [%d - %d]: %02x %02x %02x %02x\r\n", i, i+3,
 80007cc:	461c      	mov	r4, r3
             TxDataBuffer[i], TxDataBuffer[i+1], TxDataBuffer[i+2], TxDataBuffer[i+3]);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3303      	adds	r3, #3
 80007d2:	4913      	ldr	r1, [pc, #76]	@ (8000820 <main+0x170>)
 80007d4:	5ccb      	ldrb	r3, [r1, r3]
      printf("TxDataBuffer [%d - %d]: %02x %02x %02x %02x\r\n", i, i+3,
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	9401      	str	r4, [sp, #4]
 80007da:	9000      	str	r0, [sp, #0]
 80007dc:	462b      	mov	r3, r5
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4810      	ldr	r0, [pc, #64]	@ (8000824 <main+0x174>)
 80007e2:	f009 fcf7 	bl	800a1d4 <iprintf>
  for (int i = 0; i < TOTAL_FLOATS; i += 4) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3304      	adds	r3, #4
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dddc      	ble.n	80007ac <main+0xfc>
  }
  TransmitPacket(&heth);
 80007f2:	4804      	ldr	r0, [pc, #16]	@ (8000804 <main+0x154>)
 80007f4:	f000 faba 	bl	8000d6c <TransmitPacket>

  HAL_ETH_Stop(&heth);
 80007f8:	4802      	ldr	r0, [pc, #8]	@ (8000804 <main+0x154>)
 80007fa:	f003 f837 	bl	800386c <HAL_ETH_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x14e>
 8000802:	bf00      	nop
 8000804:	2400045c 	.word	0x2400045c
 8000808:	0800c0c0 	.word	0x0800c0c0
 800080c:	0800c0dc 	.word	0x0800c0dc
 8000810:	240003ec 	.word	0x240003ec
 8000814:	24000334 	.word	0x24000334
 8000818:	0800c0f0 	.word	0x0800c0f0
 800081c:	0800c0f4 	.word	0x0800c0f4
 8000820:	240002b4 	.word	0x240002b4
 8000824:	0800c11c 	.word	0x0800c11c

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	@ 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	224c      	movs	r2, #76	@ 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f009 fe14 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f009 fe0e 	bl	800a464 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000848:	2002      	movs	r0, #2
 800084a:	f004 f9d7 	bl	8004bfc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <SystemClock_Config+0xdc>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a2b      	ldr	r2, [pc, #172]	@ (8000904 <SystemClock_Config+0xdc>)
 8000858:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <SystemClock_Config+0xdc>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b25      	ldr	r3, [pc, #148]	@ (8000904 <SystemClock_Config+0xdc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800087a:	2321      	movs	r3, #33	@ 0x21
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000894:	f240 1313 	movw	r3, #275	@ 0x113
 8000898:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008a6:	2304      	movs	r3, #4
 80008a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f004 f9da 	bl	8004c70 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008c2:	f000 fb13 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	233f      	movs	r3, #63	@ 0x3f
 80008c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d2:	2308      	movs	r3, #8
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2103      	movs	r1, #3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fd99 	bl	8005424 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f8:	f000 faf8 	bl	8000eec <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	@ 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024800 	.word	0x58024800

08000908 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */
	__HAL_RCC_ADC3_CLK_ENABLE();
 800090e:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <MX_ADC3_Init+0xf4>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a39      	ldr	r2, [pc, #228]	@ (80009fc <MX_ADC3_Init+0xf4>)
 8000916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <MX_ADC3_Init+0xf4>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2224      	movs	r2, #36	@ 0x24
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fd96 	bl	800a464 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800093a:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <MX_ADC3_Init+0xfc>)
 800093c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000940:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000944:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000946:	4b2e      	ldr	r3, [pc, #184]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000948:	2208      	movs	r2, #8
 800094a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = DISABLE;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800095a:	2204      	movs	r2, #4
 800095c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000960:	2200      	movs	r2, #0
 8000962:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000966:	2200      	movs	r2, #0
 8000968:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800096c:	2201      	movs	r2, #1
 800096e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000970:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000984:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800098c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800098e:	2200      	movs	r2, #0
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000992:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 800099a:	2200      	movs	r2, #0
 800099c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b2:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 80009b4:	f001 f94a 	bl	8001c4c <HAL_ADC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80009be:	f000 fa95 	bl	8000eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_ADC3_Init+0x100>)
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c6:	2306      	movs	r3, #6
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d4:	2304      	movs	r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_ADC3_Init+0xf8>)
 80009e6:	f001 fd39 	bl	800245c <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80009f0:	f000 fa7c 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	@ 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024400 	.word	0x58024400
 8000a00:	240003ec 	.word	0x240003ec
 8000a04:	58026000 	.word	0x58026000
 8000a08:	cb840000 	.word	0xcb840000

08000a0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <MX_ETH_Init+0x84>)
 8000a14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a24:	22e1      	movs	r2, #225	@ 0xe1
 8000a26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a3c:	4a15      	ldr	r2, [pc, #84]	@ (8000a94 <MX_ETH_Init+0x88>)
 8000a3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a48:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <MX_ETH_Init+0x8c>)
 8000a4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	@ (8000a9c <MX_ETH_Init+0x90>)
 8000a50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a54:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <MX_ETH_Init+0x80>)
 8000a5c:	f002 fda6 	bl	80035ac <HAL_ETH_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a66:	f000 fa41 	bl	8000eec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a6a:	2238      	movs	r2, #56	@ 0x38
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <MX_ETH_Init+0x94>)
 8000a70:	f009 fcf8 	bl	800a464 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_ETH_Init+0x94>)
 8000a76:	2221      	movs	r2, #33	@ 0x21
 8000a78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_ETH_Init+0x94>)
 8000a7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_ETH_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2400045c 	.word	0x2400045c
 8000a90:	40028000 	.word	0x40028000
 8000a94:	240005a0 	.word	0x240005a0
 8000a98:	24000238 	.word	0x24000238
 8000a9c:	240001d8 	.word	0x240001d8
 8000aa0:	240003b4 	.word	0x240003b4

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
	__HAL_RCC_USART3_CLK_ENABLE();
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <MX_USART3_UART_Init+0xb4>)
 8000aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ab0:	4a29      	ldr	r2, [pc, #164]	@ (8000b58 <MX_USART3_UART_Init+0xb4>)
 8000ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000aba:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <MX_USART3_UART_Init+0xb4>)
 8000abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000aca:	4a25      	ldr	r2, [pc, #148]	@ (8000b60 <MX_USART3_UART_Init+0xbc>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0c:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b0e:	f007 fbfb 	bl	8008308 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 8000b18:	f000 f9e8 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b20:	f008 fd95 	bl	800964e <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b2a:	f000 f9df 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b32:	f008 fdca 	bl	80096ca <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 8000b3c:	f000 f9d6 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_USART3_UART_Init+0xb8>)
 8000b42:	f008 fd4b 	bl	80095dc <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0xac>
  {
    Error_Handler();
 8000b4c:	f000 f9ce 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	2400050c 	.word	0x2400050c
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b71      	ldr	r3, [pc, #452]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a6f      	ldr	r2, [pc, #444]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba8:	4b69      	ldr	r3, [pc, #420]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a68      	ldr	r2, [pc, #416]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b65      	ldr	r3, [pc, #404]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b62      	ldr	r3, [pc, #392]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a60      	ldr	r2, [pc, #384]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a59      	ldr	r2, [pc, #356]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b56      	ldr	r3, [pc, #344]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b53      	ldr	r3, [pc, #332]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	4a51      	ldr	r2, [pc, #324]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c12:	4b4f      	ldr	r3, [pc, #316]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c20:	4b4b      	ldr	r3, [pc, #300]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	4a4a      	ldr	r2, [pc, #296]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c30:	4b47      	ldr	r3, [pc, #284]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	4b44      	ldr	r3, [pc, #272]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	4a42      	ldr	r2, [pc, #264]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4e:	4b40      	ldr	r3, [pc, #256]	@ (8000d50 <MX_GPIO_Init+0x1dc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c62:	483c      	ldr	r0, [pc, #240]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000c64:	f003 ffb0 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6e:	483a      	ldr	r0, [pc, #232]	@ (8000d58 <MX_GPIO_Init+0x1e4>)
 8000c70:	f003 ffaa 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2102      	movs	r1, #2
 8000c78:	4838      	ldr	r0, [pc, #224]	@ (8000d5c <MX_GPIO_Init+0x1e8>)
 8000c7a:	f003 ffa5 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4833      	ldr	r0, [pc, #204]	@ (8000d60 <MX_GPIO_Init+0x1ec>)
 8000c94:	f003 fdf0 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c98:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4828      	ldr	r0, [pc, #160]	@ (8000d54 <MX_GPIO_Init+0x1e0>)
 8000cb2:	f003 fde1 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4822      	ldr	r0, [pc, #136]	@ (8000d58 <MX_GPIO_Init+0x1e4>)
 8000cd0:	f003 fdd2 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cd4:	2380      	movs	r3, #128	@ 0x80
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <MX_GPIO_Init+0x1f0>)
 8000cea:	f003 fdc5 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <MX_GPIO_Init+0x1f4>)
 8000d04:	f003 fdb8 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <MX_GPIO_Init+0x1f4>)
 8000d26:	f003 fda7 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_GPIO_Init+0x1e8>)
 8000d42:	f003 fd99 	bl	8004878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	@ 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020400 	.word	0x58020400
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	58020800 	.word	0x58020800
 8000d64:	58021800 	.word	0x58021800
 8000d68:	58020000 	.word	0x58020000

08000d6c <TransmitPacket>:

/* USER CODE BEGIN 4 */

void TransmitPacket(ETH_HandleTypeDef *heth) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	@ 0x50
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

    ETH_BufferTypeDef TxBuffer;
    ETH_TxPacketConfig TxConfig;

    // Initialize TxConfig
    memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2238      	movs	r2, #56	@ 0x38
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fb71 	bl	800a464 <memset>
    TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d82:	2321      	movs	r3, #33	@ 0x21
 8000d84:	60fb      	str	r3, [r7, #12]
    TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d86:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d8a:	623b      	str	r3, [r7, #32]
    TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    TxConfig.Length = sizeof(TxDataBuffer);
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	613b      	str	r3, [r7, #16]
    //TxConfig.Length =TX_BUFFER;
    TxConfig.TxBuffer = &TxBuffer;
 8000d94:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d98:	617b      	str	r3, [r7, #20]

    // Set up TxBuffer
    TxBuffer.buffer = TxDataBuffer;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <TransmitPacket+0x64>)
 8000d9c:	647b      	str	r3, [r7, #68]	@ 0x44
    TxBuffer.len = sizeof(TxDataBuffer);
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	64bb      	str	r3, [r7, #72]	@ 0x48
    TxBuffer.next = NULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_ETH_Transmit(heth, &TxConfig, HAL_MAX_DELAY) != HAL_OK) {
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	4619      	mov	r1, r3
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f002 fdab 	bl	800390c <HAL_ETH_Transmit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <TransmitPacket+0x56>
        // Transmission Error
        Error_Handler();
 8000dbc:	f000 f896 	bl	8000eec <Error_Handler>
    } else {
        // Successful transmission
        printf("Packet transmitted successfully\n");
    }
}
 8000dc0:	e002      	b.n	8000dc8 <TransmitPacket+0x5c>
        printf("Packet transmitted successfully\n");
 8000dc2:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <TransmitPacket+0x68>)
 8000dc4:	f009 fa6e 	bl	800a2a4 <puts>
}
 8000dc8:	bf00      	nop
 8000dca:	3750      	adds	r7, #80	@ 0x50
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	240002b4 	.word	0x240002b4
 8000dd4:	0800c14c 	.word	0x0800c14c

08000dd8 <_write>:

int _write(int file, char *ptr, int len) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <_write+0x28>)
 8000df0:	f007 fada 	bl	80083a8 <HAL_UART_Transmit>
    return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400050c 	.word	0x2400050c

08000e04 <ReadChunk>:
void ReadChunk(ETH_HandleTypeDef *heth, uint8_t *RxDataBuffer) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    size_t line_length = 16;  // Number of bytes to display per line
 8000e0e:	2310      	movs	r3, #16
 8000e10:	613b      	str	r3, [r7, #16]
    size_t i;

    // Use heth->Init.RxBuffLen to get the length of the buffer.
    for (i = 0; i < heth->Init.RxBuffLen; i += line_length) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e051      	b.n	8000ebc <ReadChunk+0xb8>
        // Print hex values
        printf("Hex:   ");
 8000e18:	482d      	ldr	r0, [pc, #180]	@ (8000ed0 <ReadChunk+0xcc>)
 8000e1a:	f009 f9db 	bl	800a1d4 <iprintf>
        for (size_t j = 0; j < line_length && (i + j) < heth->Init.RxBuffLen; ++j) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	e00c      	b.n	8000e3e <ReadChunk+0x3a>
            printf("%02x ", RxDataBuffer[i + j]);
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4413      	add	r3, r2
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4828      	ldr	r0, [pc, #160]	@ (8000ed4 <ReadChunk+0xd0>)
 8000e34:	f009 f9ce 	bl	800a1d4 <iprintf>
        for (size_t j = 0; j < line_length && (i + j) < heth->Init.RxBuffLen; ++j) {
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d206      	bcs.n	8000e54 <ReadChunk+0x50>
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3e7      	bcc.n	8000e24 <ReadChunk+0x20>
        }
        printf("\r\n");
 8000e54:	4820      	ldr	r0, [pc, #128]	@ (8000ed8 <ReadChunk+0xd4>)
 8000e56:	f009 fa25 	bl	800a2a4 <puts>

        // Print ASCII characters
        printf("Chars: ");
 8000e5a:	4820      	ldr	r0, [pc, #128]	@ (8000edc <ReadChunk+0xd8>)
 8000e5c:	f009 f9ba 	bl	800a1d4 <iprintf>
        for (size_t j = 0; j < line_length && (i + j) < heth->Init.RxBuffLen; ++j) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e018      	b.n	8000e98 <ReadChunk+0x94>
            uint8_t c = RxDataBuffer[i + j];
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	73fb      	strb	r3, [r7, #15]
            if (c >= 32 && c <= 126) {
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b1f      	cmp	r3, #31
 8000e78:	d908      	bls.n	8000e8c <ReadChunk+0x88>
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e7e:	d805      	bhi.n	8000e8c <ReadChunk+0x88>
                printf("%c  ", c);  // Printable ASCII character
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4816      	ldr	r0, [pc, #88]	@ (8000ee0 <ReadChunk+0xdc>)
 8000e86:	f009 f9a5 	bl	800a1d4 <iprintf>
 8000e8a:	e002      	b.n	8000e92 <ReadChunk+0x8e>
            } else {
                printf(".  ");  // Non-printable character replaced with '.'
 8000e8c:	4815      	ldr	r0, [pc, #84]	@ (8000ee4 <ReadChunk+0xe0>)
 8000e8e:	f009 f9a1 	bl	800a1d4 <iprintf>
        for (size_t j = 0; j < line_length && (i + j) < heth->Init.RxBuffLen; ++j) {
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d206      	bcs.n	8000eae <ReadChunk+0xaa>
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	441a      	add	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3db      	bcc.n	8000e66 <ReadChunk+0x62>
            }
        }
        printf("\r\n\r\n");  // Double new line to separate different chunks
 8000eae:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <ReadChunk+0xe4>)
 8000eb0:	f009 f9f8 	bl	800a2a4 <puts>
    for (i = 0; i < heth->Init.RxBuffLen; i += line_length) {
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4413      	add	r3, r2
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3a8      	bcc.n	8000e18 <ReadChunk+0x14>
    }
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	0800c16c 	.word	0x0800c16c
 8000ed4:	0800c174 	.word	0x0800c174
 8000ed8:	0800c17c 	.word	0x0800c17c
 8000edc:	0800c180 	.word	0x0800c180
 8000ee0:	0800c188 	.word	0x0800c188
 8000ee4:	0800c190 	.word	0x0800c190
 8000ee8:	0800c194 	.word	0x0800c194

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f04:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_MspInit+0x30>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	58024400 	.word	0x58024400

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0b2      	sub	sp, #200	@ 0xc8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22b8      	movs	r2, #184	@ 0xb8
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f009 fa91 	bl	800a464 <memset>
  if(hadc->Instance==ADC3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <HAL_ADC_MspInit+0x8c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d131      	bne.n	8000fb0 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000f5c:	2313      	movs	r3, #19
 8000f5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f6c:	23c0      	movs	r3, #192	@ 0xc0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fdda 	bl	8005b3c <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000f8e:	f7ff ffad 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_ADC_MspInit+0x90>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_ADC_MspInit+0x90>)
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_ADC_MspInit+0x90>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37c8      	adds	r7, #200	@ 0xc8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58026000 	.word	0x58026000
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	@ 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a59      	ldr	r2, [pc, #356]	@ (8001144 <HAL_ETH_MspInit+0x184>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 80ab 	bne.w	800113a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000fe4:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fea:	4a57      	ldr	r2, [pc, #348]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8000fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ff4:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001002:	4b51      	ldr	r3, [pc, #324]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001008:	4a4f      	ldr	r2, [pc, #316]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001012:	4b4d      	ldr	r3, [pc, #308]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001020:	4b49      	ldr	r3, [pc, #292]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001026:	4a48      	ldr	r2, [pc, #288]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001030:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b42      	ldr	r3, [pc, #264]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a40      	ldr	r2, [pc, #256]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b3e      	ldr	r3, [pc, #248]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a31      	ldr	r2, [pc, #196]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a2a      	ldr	r2, [pc, #168]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 80010a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b27      	ldr	r3, [pc, #156]	@ (8001148 <HAL_ETH_MspInit+0x188>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010b6:	2332      	movs	r3, #50	@ 0x32
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c6:	230b      	movs	r3, #11
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	481e      	ldr	r0, [pc, #120]	@ (800114c <HAL_ETH_MspInit+0x18c>)
 80010d2:	f003 fbd1 	bl	8004878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010d6:	2386      	movs	r3, #134	@ 0x86
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e6:	230b      	movs	r3, #11
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <HAL_ETH_MspInit+0x190>)
 80010f2:	f003 fbc1 	bl	8004878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001108:	230b      	movs	r3, #11
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	4810      	ldr	r0, [pc, #64]	@ (8001154 <HAL_ETH_MspInit+0x194>)
 8001114:	f003 fbb0 	bl	8004878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001118:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112a:	230b      	movs	r3, #11
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <HAL_ETH_MspInit+0x198>)
 8001136:	f003 fb9f 	bl	8004878 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	@ 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40028000 	.word	0x40028000
 8001148:	58024400 	.word	0x58024400
 800114c:	58020800 	.word	0x58020800
 8001150:	58020000 	.word	0x58020000
 8001154:	58020400 	.word	0x58020400
 8001158:	58021800 	.word	0x58021800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b8      	sub	sp, #224	@ 0xe0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	22b8      	movs	r2, #184	@ 0xb8
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f009 f971 	bl	800a464 <memset>
  if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a27      	ldr	r2, [pc, #156]	@ (8001224 <HAL_UART_MspInit+0xc8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d146      	bne.n	800121a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118c:	f04f 0202 	mov.w	r2, #2
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 fcca 	bl	8005b3c <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011ae:	f7ff fe9d 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_UART_MspInit+0xcc>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_UART_MspInit+0xd0>)
 8001216:	f003 fb2f 	bl	8004878 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	37e0      	adds	r7, #224	@ 0xe0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004800 	.word	0x40004800
 8001228:	58024400 	.word	0x58024400
 800122c:	58020c00 	.word	0x58020c00

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	f000 f9c1 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}

0800128e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_kill>:

int _kill(int pid, int sig)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a8:	f009 f92e 	bl	800a508 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2216      	movs	r2, #22
 80012b0:	601a      	str	r2, [r3, #0]
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_exit>:

void _exit (int status)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffe7 	bl	800129e <_kill>
  while (1) {}    /* Make sure we hang here */
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <_exit+0x12>

080012d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e00a      	b.n	80012fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e6:	f3af 8000 	nop.w
 80012ea:	4601      	mov	r1, r0
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	60ba      	str	r2, [r7, #8]
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbf0      	blt.n	80012e6 <_read+0x12>
  }

  return len;
 8001304:	687b      	ldr	r3, [r7, #4]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_close>:
  }
  return len;
}

int _close(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001336:	605a      	str	r2, [r3, #4]
  return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_isatty>:

int _isatty(int file)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f009 f8ae 	bl	800a508 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	24050000 	.word	0x24050000
 80013d8:	00002000 	.word	0x00002000
 80013dc:	240005a8 	.word	0x240005a8
 80013e0:	24000700 	.word	0x24000700

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <SystemInit+0xd0>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ee:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <SystemInit+0xd0>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f8:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <SystemInit+0xd4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	2b06      	cmp	r3, #6
 8001402:	d807      	bhi.n	8001414 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <SystemInit+0xd4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 030f 	bic.w	r3, r3, #15
 800140c:	4a2a      	ldr	r2, [pc, #168]	@ (80014b8 <SystemInit+0xd4>)
 800140e:	f043 0307 	orr.w	r3, r3, #7
 8001412:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <SystemInit+0xd8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <SystemInit+0xd8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <SystemInit+0xd8>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <SystemInit+0xd8>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4924      	ldr	r1, [pc, #144]	@ (80014bc <SystemInit+0xd8>)
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <SystemInit+0xdc>)
 800142e:	4013      	ands	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <SystemInit+0xd4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <SystemInit+0xd4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 030f 	bic.w	r3, r3, #15
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <SystemInit+0xd4>)
 8001448:	f043 0307 	orr.w	r3, r3, #7
 800144c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <SystemInit+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <SystemInit+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <SystemInit+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <SystemInit+0xd8>)
 8001462:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <SystemInit+0xe0>)
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <SystemInit+0xd8>)
 8001468:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <SystemInit+0xe4>)
 800146a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <SystemInit+0xd8>)
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <SystemInit+0xe8>)
 8001470:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <SystemInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <SystemInit+0xd8>)
 800147a:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <SystemInit+0xe8>)
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <SystemInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <SystemInit+0xd8>)
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <SystemInit+0xe8>)
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <SystemInit+0xd8>)
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <SystemInit+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <SystemInit+0xd8>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <SystemInit+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <SystemInit+0xec>)
 80014a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	52002000 	.word	0x52002000
 80014bc:	58024400 	.word	0x58024400
 80014c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c4:	02020200 	.word	0x02020200
 80014c8:	01ff0000 	.word	0x01ff0000
 80014cc:	01010280 	.word	0x01010280
 80014d0:	52004000 	.word	0x52004000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff ff84 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f009 f807 	bl	800a514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff f8d3 	bl	80006b0 <main>
  bx  lr
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001514:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001518:	0800c550 	.word	0x0800c550
  ldr r2, =_sbss
 800151c:	24000298 	.word	0x24000298
  ldr r4, =_ebss
 8001520:	240006fc 	.word	0x240006fc

08001524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC3_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f002 f80a 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001534:	f004 f92c 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <HAL_Init+0x68>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	4913      	ldr	r1, [pc, #76]	@ (8001594 <HAL_Init+0x6c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <HAL_Init+0x6c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_Init+0x70>)
 800156a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_Init+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f814 	bl	80015a0 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e002      	b.n	8001588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001582:	f7ff fcb9 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	58024400 	.word	0x58024400
 8001594:	0800c198 	.word	0x0800c198
 8001598:	24000004 	.word	0x24000004
 800159c:	24000000 	.word	0x24000000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_InitTick+0x60>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e021      	b.n	80015f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <HAL_InitTick+0x64>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_InitTick+0x60>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 ffe1 	bl	8003592 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f001 ffb9 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_InitTick+0x68>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400000c 	.word	0x2400000c
 8001604:	24000000 	.word	0x24000000
 8001608:	24000008 	.word	0x24000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2400000c 	.word	0x2400000c
 8001630:	240005ac 	.word	0x240005ac

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	240005ac 	.word	0x240005ac

0800164c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800165c:	4904      	ldr	r1, [pc, #16]	@ (8001670 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58000400 	.word	0x58000400

08001674 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3360      	adds	r3, #96	@ 0x60
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <LL_ADC_SetOffset+0x60>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d10b      	bne.n	8001718 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4313      	orrs	r3, r2
 800170e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001716:	e00b      	b.n	8001730 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	430b      	orrs	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	58026000 	.word	0x58026000

08001740 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3360      	adds	r3, #96	@ 0x60
 800174e:	461a      	mov	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	431a      	orrs	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	611a      	str	r2, [r3, #16]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00e      	beq.n	80017d2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3360      	adds	r3, #96	@ 0x60
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]
  }
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	58026000 	.word	0x58026000

080017e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <LL_ADC_SetOffsetSaturation+0x40>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d10e      	bne.n	8001816 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3360      	adds	r3, #96	@ 0x60
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	58026000 	.word	0x58026000

08001828 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <LL_ADC_SetOffsetSign+0x40>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d10e      	bne.n	800185a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3360      	adds	r3, #96	@ 0x60
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	58026000 	.word	0x58026000

0800186c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3360      	adds	r3, #96	@ 0x60
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a0c      	ldr	r2, [pc, #48]	@ (80018bc <LL_ADC_SetOffsetState+0x50>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d108      	bne.n	80018a0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800189e:	e007      	b.n	80018b0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	58026000 	.word	0x58026000

080018c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3330      	adds	r3, #48	@ 0x30
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	211f      	movs	r1, #31
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0e9b      	lsrs	r3, r3, #26
 800191e:	f003 011f 	and.w	r1, r3, #31
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800193e:	b480      	push	{r7}
 8001940:	b087      	sub	sp, #28
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3314      	adds	r3, #20
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	0e5b      	lsrs	r3, r3, #25
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	0d1b      	lsrs	r3, r3, #20
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2107      	movs	r1, #7
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	401a      	ands	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	0d1b      	lsrs	r3, r3, #20
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a0c <LL_ADC_SetChannelSingleDiff+0x78>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d115      	bne.n	80019d4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0318 	and.w	r3, r3, #24
 80019be:	4914      	ldr	r1, [pc, #80]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80019c0:	40d9      	lsrs	r1, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	400b      	ands	r3, r1
 80019c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019d2:	e014      	b.n	80019fe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0318 	and.w	r3, r3, #24
 80019ea:	4909      	ldr	r1, [pc, #36]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80019ec:	40d9      	lsrs	r1, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	400b      	ands	r3, r1
 80019f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	58026000 	.word	0x58026000
 8001a10:	000fffff 	.word	0x000fffff

08001a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 031f 	and.w	r3, r3, #31
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6093      	str	r3, [r2, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	5fffffc0 	.word	0x5fffffc0

08001a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <LL_ADC_EnableInternalRegulator+0x24>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	6fffffc0 	.word	0x6fffffc0

08001ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <LL_ADC_Enable+0x24>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	7fffffc0 	.word	0x7fffffc0

08001b10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <LL_ADC_Disable+0x24>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	7fffffc0 	.word	0x7fffffc0

08001b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <LL_ADC_IsEnabled+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_ADC_IsEnabled+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsDisableOngoing+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsDisableOngoing+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <LL_ADC_REG_StartConversion+0x24>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	7fffffc0 	.word	0x7fffffc0

08001bac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <LL_ADC_REG_StopConversion+0x24>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	7fffffc0 	.word	0x7fffffc0

08001bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d101      	bne.n	8001bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <LL_ADC_INJ_StopConversion+0x24>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	f043 0220 	orr.w	r2, r3, #32
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	7fffffc0 	.word	0x7fffffc0

08001c24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1ee      	b.n	8002044 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff f959 	bl	8000f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff feef 	bl	8001a70 <LL_ADC_IsDeepPowerDownEnabled>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fed5 	bl	8001a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff0a 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d114      	bne.n	8001cdc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff feee 	bl	8001a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef8 <HAL_ADC_Init+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	4a8e      	ldr	r2, [pc, #568]	@ (8001efc <HAL_ADC_Init+0x2b0>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f9      	bne.n	8001cd0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff feed 	bl	8001ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10d      	bne.n	8001d08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf0:	f043 0210 	orr.w	r2, r3, #16
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff61 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8001d12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 8188 	bne.w	8002032 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 8184 	bne.w	8002032 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fefa 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d136      	bne.n	8001db8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f00 <HAL_ADC_Init+0x2b4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x112>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <HAL_ADC_Init+0x2b8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10e      	bne.n	8001d7c <HAL_ADC_Init+0x130>
 8001d5e:	4868      	ldr	r0, [pc, #416]	@ (8001f00 <HAL_ADC_Init+0x2b4>)
 8001d60:	f7ff feea 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d64:	4604      	mov	r4, r0
 8001d66:	4867      	ldr	r0, [pc, #412]	@ (8001f04 <HAL_ADC_Init+0x2b8>)
 8001d68:	f7ff fee6 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4323      	orrs	r3, r4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e008      	b.n	8001d8e <HAL_ADC_Init+0x142>
 8001d7c:	4862      	ldr	r0, [pc, #392]	@ (8001f08 <HAL_ADC_Init+0x2bc>)
 8001d7e:	f7ff fedb 	bl	8001b38 <LL_ADC_IsEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5a      	ldr	r2, [pc, #360]	@ (8001f00 <HAL_ADC_Init+0x2b4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_ADC_Init+0x15a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a58      	ldr	r2, [pc, #352]	@ (8001f04 <HAL_ADC_Init+0x2b8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x15e>
 8001da6:	4a59      	ldr	r2, [pc, #356]	@ (8001f0c <HAL_ADC_Init+0x2c0>)
 8001da8:	e000      	b.n	8001dac <HAL_ADC_Init+0x160>
 8001daa:	4a59      	ldr	r2, [pc, #356]	@ (8001f10 <HAL_ADC_Init+0x2c4>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4610      	mov	r0, r2
 8001db4:	f7ff fc5e 	bl	8001674 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_ADC_Init+0x2bc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d129      	bne.n	8001e16 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7e5b      	ldrb	r3, [r3, #25]
 8001dc6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001dcc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001dd2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d013      	beq.n	8001e04 <HAL_ADC_Init+0x1b8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d00d      	beq.n	8001e00 <HAL_ADC_Init+0x1b4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b1c      	cmp	r3, #28
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Init+0x1b0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b18      	cmp	r3, #24
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_Init+0x1ac>
 8001df4:	2318      	movs	r3, #24
 8001df6:	e006      	b.n	8001e06 <HAL_ADC_Init+0x1ba>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e004      	b.n	8001e06 <HAL_ADC_Init+0x1ba>
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	e002      	b.n	8001e06 <HAL_ADC_Init+0x1ba>
 8001e00:	2308      	movs	r3, #8
 8001e02:	e000      	b.n	8001e06 <HAL_ADC_Init+0x1ba>
 8001e04:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001e06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e00e      	b.n	8001e34 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e5b      	ldrb	r3, [r3, #25]
 8001e1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e20:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e26:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d106      	bne.n	8001e4c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	3b01      	subs	r3, #1
 8001e44:	045b      	lsls	r3, r3, #17
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	@ (8001f08 <HAL_ADC_Init+0x2bc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d115      	bne.n	8001e9e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <HAL_ADC_Init+0x2c8>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	e009      	b.n	8001eb2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_ADC_Init+0x2cc>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fe8c 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8001ebc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff feae 	bl	8001c24 <LL_ADC_INJ_IsConversionOngoing>
 8001ec8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 808e 	bne.w	8001fee <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 808a 	bne.w	8001fee <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_ADC_Init+0x2bc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d11b      	bne.n	8001f1c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e1b      	ldrb	r3, [r3, #24]
 8001ee8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ef0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e018      	b.n	8001f2a <HAL_ADC_Init+0x2de>
 8001ef8:	24000000 	.word	0x24000000
 8001efc:	053e2d63 	.word	0x053e2d63
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40022100 	.word	0x40022100
 8001f08:	58026000 	.word	0x58026000
 8001f0c:	40022300 	.word	0x40022300
 8001f10:	58026300 	.word	0x58026300
 8001f14:	fff04007 	.word	0xfff04007
 8001f18:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
 8001f20:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4b46      	ldr	r3, [pc, #280]	@ (800204c <HAL_ADC_Init+0x400>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	69b9      	ldr	r1, [r7, #24]
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d137      	bne.n	8001fb8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3f      	ldr	r2, [pc, #252]	@ (8002050 <HAL_ADC_Init+0x404>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d116      	bne.n	8001f86 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_ADC_Init+0x408>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001f76:	430a      	orrs	r2, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	e020      	b.n	8001fc8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <HAL_ADC_Init+0x40c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f94:	3a01      	subs	r2, #1
 8001f96:	0411      	lsls	r1, r2, #16
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_ADC_Init+0x404>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f001 f90d 	bl	8003208 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10c      	bne.n	8002010 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f023 010f 	bic.w	r1, r3, #15
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
 800200e:	e007      	b.n	8002020 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020f 	bic.w	r2, r2, #15
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002042:	7ffb      	ldrb	r3, [r7, #31]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3724      	adds	r7, #36	@ 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	ffffbffc 	.word	0xffffbffc
 8002050:	58026000 	.word	0x58026000
 8002054:	fc00f81f 	.word	0xfc00f81f
 8002058:	fc00f81e 	.word	0xfc00f81e

0800205c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5c      	ldr	r2, [pc, #368]	@ (80021dc <HAL_ADC_Start+0x180>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Start+0x1c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5b      	ldr	r2, [pc, #364]	@ (80021e0 <HAL_ADC_Start+0x184>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_ADC_Start+0x20>
 8002078:	4b5a      	ldr	r3, [pc, #360]	@ (80021e4 <HAL_ADC_Start+0x188>)
 800207a:	e000      	b.n	800207e <HAL_ADC_Start+0x22>
 800207c:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_ADC_Start+0x18c>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fcc8 	bl	8001a14 <LL_ADC_GetMultimode>
 8002084:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fda2 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 809a 	bne.w	80021cc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start+0x4a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e095      	b.n	80021d2 <HAL_ADC_Start+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ffc0 	bl	8003034 <ADC_Enable>
 80020b4:	4603      	mov	r3, r0
 80020b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8081 	bne.w	80021c2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020c4:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <HAL_ADC_Start+0x190>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	@ (80021e0 <HAL_ADC_Start+0x184>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d002      	beq.n	80020e0 <HAL_ADC_Start+0x84>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e000      	b.n	80020e2 <HAL_ADC_Start+0x86>
 80020e0:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <HAL_ADC_Start+0x180>)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002108:	d106      	bne.n	8002118 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800210e:	f023 0206 	bic.w	r2, r3, #6
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	665a      	str	r2, [r3, #100]	@ 0x64
 8002116:	e002      	b.n	800211e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	221c      	movs	r2, #28
 8002124:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2b      	ldr	r2, [pc, #172]	@ (80021e0 <HAL_ADC_Start+0x184>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d002      	beq.n	800213e <HAL_ADC_Start+0xe2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e000      	b.n	8002140 <HAL_ADC_Start+0xe4>
 800213e:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_ADC_Start+0x180>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	4293      	cmp	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b09      	cmp	r3, #9
 8002158:	d114      	bne.n	8002184 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002170:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fd01 	bl	8001b84 <LL_ADC_REG_StartConversion>
 8002182:	e025      	b.n	80021d0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002188:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <HAL_ADC_Start+0x184>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d002      	beq.n	80021a0 <HAL_ADC_Start+0x144>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e000      	b.n	80021a2 <HAL_ADC_Start+0x146>
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_ADC_Start+0x180>)
 80021a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00f      	beq.n	80021d0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	661a      	str	r2, [r3, #96]	@ 0x60
 80021c0:	e006      	b.n	80021d0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40022100 	.word	0x40022100
 80021e4:	40022300 	.word	0x40022300
 80021e8:	58026300 	.word	0x58026300
 80021ec:	fffff0fe 	.word	0xfffff0fe

080021f0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADC_Stop+0x16>
 8002202:	2302      	movs	r3, #2
 8002204:	e021      	b.n	800224a <HAL_ADC_Stop+0x5a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800220e:	2103      	movs	r1, #3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fe53 	bl	8002ebc <ADC_ConversionStop>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 ff91 	bl	8003148 <ADC_Disable>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002234:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <HAL_ADC_Stop+0x64>)
 8002236:	4013      	ands	r3, r2
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	ffffeefe 	.word	0xffffeefe

08002258 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a72      	ldr	r2, [pc, #456]	@ (8002430 <HAL_ADC_PollForConversion+0x1d8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_ADC_PollForConversion+0x1e>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a70      	ldr	r2, [pc, #448]	@ (8002434 <HAL_ADC_PollForConversion+0x1dc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_ADC_PollForConversion+0x22>
 8002276:	4b70      	ldr	r3, [pc, #448]	@ (8002438 <HAL_ADC_PollForConversion+0x1e0>)
 8002278:	e000      	b.n	800227c <HAL_ADC_PollForConversion+0x24>
 800227a:	4b70      	ldr	r3, [pc, #448]	@ (800243c <HAL_ADC_PollForConversion+0x1e4>)
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbc9 	bl	8001a14 <LL_ADC_GetMultimode>
 8002282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d102      	bne.n	8002292 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800228c:	2308      	movs	r3, #8
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	e037      	b.n	8002302 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d002      	beq.n	80022a4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d111      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0b1      	b.n	8002426 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022c2:	2304      	movs	r3, #4
 80022c4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80022c6:	e01c      	b.n	8002302 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a58      	ldr	r2, [pc, #352]	@ (8002430 <HAL_ADC_PollForConversion+0x1d8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_ADC_PollForConversion+0x84>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <HAL_ADC_PollForConversion+0x1dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_PollForConversion+0x88>
 80022dc:	4b56      	ldr	r3, [pc, #344]	@ (8002438 <HAL_ADC_PollForConversion+0x1e0>)
 80022de:	e000      	b.n	80022e2 <HAL_ADC_PollForConversion+0x8a>
 80022e0:	4b56      	ldr	r3, [pc, #344]	@ (800243c <HAL_ADC_PollForConversion+0x1e4>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fba4 	bl	8001a30 <LL_ADC_GetMultiDMATransfer>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e093      	b.n	8002426 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022fe:	2304      	movs	r3, #4
 8002300:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002302:	f7ff f997 	bl	8001634 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002308:	e021      	b.n	800234e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d01d      	beq.n	800234e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002312:	f7ff f98f 	bl	8001634 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <HAL_ADC_PollForConversion+0xd0>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d112      	bne.n	800234e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233a:	f043 0204 	orr.w	r2, r3, #4
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06b      	b.n	8002426 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0d6      	beq.n	800230a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff faa7 	bl	80018c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7e5b      	ldrb	r3, [r3, #25]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d118      	bne.n	80023b2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d111      	bne.n	80023b2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002434 <HAL_ADC_PollForConversion+0x1dc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d002      	beq.n	80023c2 <HAL_ADC_PollForConversion+0x16a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_PollForConversion+0x16c>
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_ADC_PollForConversion+0x1d8>)
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d008      	beq.n	80023de <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d002      	beq.n	80023de <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b09      	cmp	r3, #9
 80023dc:	d104      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	e00c      	b.n	8002402 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_ADC_PollForConversion+0x1dc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d002      	beq.n	80023f8 <HAL_ADC_PollForConversion+0x1a0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e000      	b.n	80023fa <HAL_ADC_PollForConversion+0x1a2>
 80023f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_ADC_PollForConversion+0x1d8>)
 80023fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d104      	bne.n	8002412 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e008      	b.n	8002424 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	220c      	movs	r2, #12
 8002422:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000
 8002434:	40022100 	.word	0x40022100
 8002438:	40022300 	.word	0x40022300
 800243c:	58026300 	.word	0x58026300

08002440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b0b9      	sub	sp, #228	@ 0xe4
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002476:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4aab      	ldr	r2, [pc, #684]	@ (800272c <HAL_ADC_ConfigChannel+0x2d0>)
 800247e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x34>
 800248a:	2302      	movs	r3, #2
 800248c:	f000 bcfe 	b.w	8002e8c <HAL_ADC_ConfigChannel+0xa30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fb99 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 84e2 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db38      	blt.n	8002524 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a9e      	ldr	r2, [pc, #632]	@ (8002730 <HAL_ADC_ConfigChannel+0x2d4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d033      	beq.n	8002524 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HAL_ADC_ConfigChannel+0x7e>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2201      	movs	r2, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	e01d      	b.n	8002516 <HAL_ADC_ConfigChannel+0xba>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e004      	b.n	800250c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2201      	movs	r2, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	69d1      	ldr	r1, [r2, #28]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	430b      	orrs	r3, r1
 8002522:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff f9d8 	bl	80018e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fb4a 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002540:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb6b 	bl	8001c24 <LL_ADC_INJ_IsConversionOngoing>
 800254e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8270 	bne.w	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 826b 	bne.w	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	461a      	mov	r2, r3
 8002574:	f7ff f9e3 	bl	800193e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6c      	ldr	r2, [pc, #432]	@ (8002730 <HAL_ADC_ConfigChannel+0x2d4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800259c:	e032      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800259e:	4b65      	ldr	r3, [pc, #404]	@ (8002734 <HAL_ADC_ConfigChannel+0x2d8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80025a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025aa:	d10b      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x168>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	e01d      	b.n	8002600 <HAL_ADC_ConfigChannel+0x1a4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x18e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	e00a      	b.n	8002600 <HAL_ADC_ConfigChannel+0x1a4>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d048      	beq.n	800269e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800261c:	f7ff f85e 	bl	80016dc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a42      	ldr	r2, [pc, #264]	@ (8002730 <HAL_ADC_ConfigChannel+0x2d4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d119      	bne.n	800265e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	461a      	mov	r2, r3
 8002638:	f7ff f8f6 	bl	8001828 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x1f8>
 800264e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002652:	e000      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1fa>
 8002654:	2300      	movs	r3, #0
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff f8c4 	bl	80017e4 <LL_ADC_SetOffsetSaturation>
 800265c:	e1ee      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x21a>
 8002670:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002674:	e000      	b.n	8002678 <HAL_ADC_ConfigChannel+0x21c>
 8002676:	2300      	movs	r3, #0
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff f891 	bl	80017a0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7e1b      	ldrb	r3, [r3, #24]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x238>
 800268e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002692:	e000      	b.n	8002696 <HAL_ADC_ConfigChannel+0x23a>
 8002694:	2300      	movs	r3, #0
 8002696:	461a      	mov	r2, r3
 8002698:	f7ff f868 	bl	800176c <LL_ADC_SetDataRightShift>
 800269c:	e1ce      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <HAL_ADC_ConfigChannel+0x2d4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	f040 8181 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f845 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x27a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f83a 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	e01e      	b.n	8002714 <HAL_ADC_ConfigChannel+0x2b8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f82f 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80026f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80026fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e004      	b.n	8002712 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x2dc>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	e01e      	b.n	800276a <HAL_ADC_ConfigChannel+0x30e>
 800272c:	47ff0000 	.word	0x47ff0000
 8002730:	58026000 	.word	0x58026000
 8002734:	5c001000 	.word	0x5c001000
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800274c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e004      	b.n	800276a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	429a      	cmp	r2, r3
 800276c:	d106      	bne.n	800277c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f878 	bl	800186c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe ffdc 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x34c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe ffd1 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	e01e      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x38a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe ffc6 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80027da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x3a2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	e018      	b.n	8002830 <HAL_ADC_ConfigChannel+0x3d4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800281a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e004      	b.n	8002830 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f815 	bl	800186c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe ff79 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x412>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff6e 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x450>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe ff63 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80028a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x468>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e014      	b.n	80028ee <HAL_ADC_ConfigChannel+0x492>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e004      	b.n	80028ee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80028e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2102      	movs	r1, #2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe ffb6 	bl	800186c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2103      	movs	r1, #3
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ff1a 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_ADC_ConfigChannel+0x4d0>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2103      	movs	r1, #3
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe ff0f 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 021f 	and.w	r2, r3, #31
 800292a:	e017      	b.n	800295c <HAL_ADC_ConfigChannel+0x500>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2103      	movs	r1, #3
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe ff04 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002946:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e003      	b.n	800295a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x518>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	e011      	b.n	8002998 <HAL_ADC_ConfigChannel+0x53c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	429a      	cmp	r2, r3
 800299a:	d14f      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2103      	movs	r1, #3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe ff61 	bl	800186c <LL_ADC_SetOffsetState>
 80029aa:	e047      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	429a      	cmp	r2, r3
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d107      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80029f2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a16:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	069b      	lsls	r3, r3, #26
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f879 	bl	8001b38 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 8219 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7fe ff9a 	bl	8001994 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4aa1      	ldr	r2, [pc, #644]	@ (8002cec <HAL_ADC_ConfigChannel+0x890>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	f040 812e 	bne.w	8002cc8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x638>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	3301      	adds	r3, #1
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	bf94      	ite	ls
 8002a8c:	2301      	movls	r3, #1
 8002a8e:	2300      	movhi	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e019      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x66c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	bf94      	ite	ls
 8002ac2:	2301      	movls	r3, #1
 8002ac4:	2300      	movhi	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d079      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x68c>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	069b      	lsls	r3, r3, #26
 8002ae2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae6:	e015      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x6b8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002af8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8002b00:	2320      	movs	r3, #32
 8002b02:	e003      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8002b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	069b      	lsls	r3, r3, #26
 8002b10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x6d8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	e017      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x708>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8002b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	ea42 0103 	orr.w	r1, r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x72e>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	051b      	lsls	r3, r3, #20
 8002b88:	e018      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x760>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	e07e      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x780>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	069b      	lsls	r3, r3, #26
 8002bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bda:	e015      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x7ac>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	069b      	lsls	r3, r3, #26
 8002c04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x7cc>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	e017      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x7fc>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	61bb      	str	r3, [r7, #24]
  return result;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	ea42 0103 	orr.w	r1, r2, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x828>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b1e      	subs	r3, #30
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c82:	e01b      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x860>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	60fb      	str	r3, [r7, #12]
  return result;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	051b      	lsls	r3, r3, #20
 8002cb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fe fe3b 	bl	800193e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f280 80d7 	bge.w	8002e80 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a06      	ldr	r2, [pc, #24]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x894>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x88a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x898>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10a      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x8a0>
 8002ce6:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x89c>)
 8002ce8:	e009      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x8a2>
 8002cea:	bf00      	nop
 8002cec:	47ff0000 	.word	0x47ff0000
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40022100 	.word	0x40022100
 8002cf8:	40022300 	.word	0x40022300
 8002cfc:	4b65      	ldr	r3, [pc, #404]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa38>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fcde 	bl	80016c0 <LL_ADC_GetCommonPathInternalCh>
 8002d04:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a62      	ldr	r2, [pc, #392]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x8c0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a61      	ldr	r2, [pc, #388]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa40>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10e      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x8de>
 8002d1c:	485e      	ldr	r0, [pc, #376]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d1e:	f7fe ff0b 	bl	8001b38 <LL_ADC_IsEnabled>
 8002d22:	4604      	mov	r4, r0
 8002d24:	485d      	ldr	r0, [pc, #372]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa40>)
 8002d26:	f7fe ff07 	bl	8001b38 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e008      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x8f0>
 8002d3a:	4859      	ldr	r0, [pc, #356]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa44>)
 8002d3c:	f7fe fefc 	bl	8001b38 <LL_ADC_IsEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8084 	beq.w	8002e5a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a53      	ldr	r2, [pc, #332]	@ (8002ea4 <HAL_ADC_ConfigChannel+0xa48>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d132      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x966>
 8002d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d12c      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa44>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f040 8086 	bne.w	8002e80 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a47      	ldr	r2, [pc, #284]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x92c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a46      	ldr	r2, [pc, #280]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa40>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x930>
 8002d88:	4a47      	ldr	r2, [pc, #284]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002d8a:	e000      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x932>
 8002d8c:	4a41      	ldr	r2, [pc, #260]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa38>)
 8002d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f7fe fc7e 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d9e:	4b43      	ldr	r3, [pc, #268]	@ (8002eac <HAL_ADC_ConfigChannel+0xa50>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <HAL_ADC_ConfigChannel+0xa54>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	3301      	adds	r3, #1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002db2:	e002      	b.n	8002dba <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc0:	e05e      	b.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb4 <HAL_ADC_ConfigChannel+0xa58>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d120      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x9b2>
 8002dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa44>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d14e      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa3c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x99a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa40>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x99e>
 8002df6:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002df8:	e000      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x9a0>
 8002dfa:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa38>)
 8002dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fe fc47 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e0c:	e038      	b.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a29      	ldr	r2, [pc, #164]	@ (8002eb8 <HAL_ADC_ConfigChannel+0xa5c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d133      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
 8002e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d12d      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_ADC_ConfigChannel+0xa44>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d128      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x9e6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <HAL_ADC_ConfigChannel+0xa40>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x9ea>
 8002e42:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <HAL_ADC_ConfigChannel+0xa4c>)
 8002e44:	e000      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x9ec>
 8002e46:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <HAL_ADC_ConfigChannel+0xa38>)
 8002e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7fe fc21 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
 8002e58:	e012      	b.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002e6c:	e008      	b.n	8002e80 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002e88:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	37e4      	adds	r7, #228	@ 0xe4
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	58026300 	.word	0x58026300
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022100 	.word	0x40022100
 8002ea0:	58026000 	.word	0x58026000
 8002ea4:	c7520000 	.word	0xc7520000
 8002ea8:	40022300 	.word	0x40022300
 8002eac:	24000000 	.word	0x24000000
 8002eb0:	053e2d63 	.word	0x053e2d63
 8002eb4:	c3210000 	.word	0xc3210000
 8002eb8:	cb840000 	.word	0xcb840000

08002ebc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fe7e 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fea0 	bl	8001c24 <LL_ADC_INJ_IsConversionOngoing>
 8002ee4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8098 	beq.w	8003024 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02a      	beq.n	8002f58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7e5b      	ldrb	r3, [r3, #25]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d126      	bne.n	8002f58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7e1b      	ldrb	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d122      	bne.n	8002f58 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f16:	e014      	b.n	8002f42 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4a45      	ldr	r2, [pc, #276]	@ (8003030 <ADC_ConversionStop+0x174>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d90d      	bls.n	8002f3c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e074      	b.n	8003026 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	d1e3      	bne.n	8002f18 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d014      	beq.n	8002f88 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fe36 	bl	8001bd4 <LL_ADC_REG_IsConversionOngoing>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fdf3 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fe12 	bl	8001bac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d014      	beq.n	8002fb8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fe46 	bl	8001c24 <LL_ADC_INJ_IsConversionOngoing>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fddb 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fe22 	bl	8001bfc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d005      	beq.n	8002fca <ADC_ConversionStop+0x10e>
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d105      	bne.n	8002fd0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	e005      	b.n	8002fd6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fca:	2308      	movs	r3, #8
 8002fcc:	617b      	str	r3, [r7, #20]
        break;
 8002fce:	e002      	b.n	8002fd6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]
        break;
 8002fd4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fd6:	f7fe fb2d 	bl	8001634 <HAL_GetTick>
 8002fda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fdc:	e01b      	b.n	8003016 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fde:	f7fe fb29 	bl	8001634 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d914      	bls.n	8003016 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1dc      	bne.n	8002fde <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	000cdbff 	.word	0x000cdbff

08003034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fd79 	bl	8001b38 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d16e      	bne.n	800312a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	4b38      	ldr	r3, [pc, #224]	@ (8003134 <ADC_Enable+0x100>)
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e05a      	b.n	800312c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fd34 	bl	8001ae8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003080:	f7fe fad8 	bl	8001634 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <ADC_Enable+0x104>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <ADC_Enable+0x66>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a29      	ldr	r2, [pc, #164]	@ (800313c <ADC_Enable+0x108>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <ADC_Enable+0x6a>
 800309a:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <ADC_Enable+0x10c>)
 800309c:	e000      	b.n	80030a0 <ADC_Enable+0x6c>
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <ADC_Enable+0x110>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fcb7 	bl	8001a14 <LL_ADC_GetMultimode>
 80030a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a23      	ldr	r2, [pc, #140]	@ (800313c <ADC_Enable+0x108>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d002      	beq.n	80030b8 <ADC_Enable+0x84>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e000      	b.n	80030ba <ADC_Enable+0x86>
 80030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <ADC_Enable+0x104>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02c      	beq.n	800311c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d130      	bne.n	800312a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c8:	e028      	b.n	800311c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fd32 	bl	8001b38 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fd02 	bl	8001ae8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e4:	f7fe faa6 	bl	8001634 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d914      	bls.n	800311c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00d      	beq.n	800311c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e007      	b.n	800312c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d1cf      	bne.n	80030ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	8000003f 	.word	0x8000003f
 8003138:	40022000 	.word	0x40022000
 800313c:	40022100 	.word	0x40022100
 8003140:	40022300 	.word	0x40022300
 8003144:	58026300 	.word	0x58026300

08003148 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fd02 	bl	8001b5e <LL_ADC_IsDisableOngoing>
 800315a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fce9 	bl	8001b38 <LL_ADC_IsEnabled>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d047      	beq.n	80031fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d144      	bne.n	80031fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030d 	and.w	r3, r3, #13
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10c      	bne.n	800319a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fcc3 	bl	8001b10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2203      	movs	r2, #3
 8003190:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003192:	f7fe fa4f 	bl	8001634 <HAL_GetTick>
 8003196:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003198:	e029      	b.n	80031ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e023      	b.n	80031fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031b6:	f7fe fa3d 	bl	8001634 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d914      	bls.n	80031ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f043 0210 	orr.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1dc      	bne.n	80031b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6c      	ldr	r2, [pc, #432]	@ (80033c8 <ADC_ConfigureBoostMode+0x1c0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <ADC_ConfigureBoostMode+0x1c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6b      	ldr	r2, [pc, #428]	@ (80033cc <ADC_ConfigureBoostMode+0x1c4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d109      	bne.n	8003238 <ADC_ConfigureBoostMode+0x30>
 8003224:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <ADC_ConfigureBoostMode+0x1c8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e008      	b.n	800324a <ADC_ConfigureBoostMode+0x42>
 8003238:	4b66      	ldr	r3, [pc, #408]	@ (80033d4 <ADC_ConfigureBoostMode+0x1cc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01c      	beq.n	8003288 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800324e:	f002 fc19 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8003252:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800325c:	d010      	beq.n	8003280 <ADC_ConfigureBoostMode+0x78>
 800325e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003262:	d873      	bhi.n	800334c <ADC_ConfigureBoostMode+0x144>
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d002      	beq.n	8003270 <ADC_ConfigureBoostMode+0x68>
 800326a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326e:	d16d      	bne.n	800334c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e068      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	60fb      	str	r3, [r7, #12]
        break;
 8003286:	e064      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003288:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f003 fdf4 	bl	8006e7c <HAL_RCCEx_GetPeriphCLKFreq>
 8003294:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800329e:	d051      	beq.n	8003344 <ADC_ConfigureBoostMode+0x13c>
 80032a0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80032a4:	d854      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032a6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032aa:	d047      	beq.n	800333c <ADC_ConfigureBoostMode+0x134>
 80032ac:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032b0:	d84e      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032b2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032b6:	d03d      	beq.n	8003334 <ADC_ConfigureBoostMode+0x12c>
 80032b8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032bc:	d848      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c2:	d033      	beq.n	800332c <ADC_ConfigureBoostMode+0x124>
 80032c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c8:	d842      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032ca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032ce:	d029      	beq.n	8003324 <ADC_ConfigureBoostMode+0x11c>
 80032d0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032d4:	d83c      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032d6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032da:	d01a      	beq.n	8003312 <ADC_ConfigureBoostMode+0x10a>
 80032dc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032e0:	d836      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032e6:	d014      	beq.n	8003312 <ADC_ConfigureBoostMode+0x10a>
 80032e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032ec:	d830      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f2:	d00e      	beq.n	8003312 <ADC_ConfigureBoostMode+0x10a>
 80032f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f8:	d82a      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 80032fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032fe:	d008      	beq.n	8003312 <ADC_ConfigureBoostMode+0x10a>
 8003300:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003304:	d824      	bhi.n	8003350 <ADC_ConfigureBoostMode+0x148>
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330a:	d002      	beq.n	8003312 <ADC_ConfigureBoostMode+0x10a>
 800330c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003310:	d11e      	bne.n	8003350 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	60fb      	str	r3, [r7, #12]
        break;
 8003322:	e016      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
        break;
 800332a:	e012      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	60fb      	str	r3, [r7, #12]
        break;
 8003332:	e00e      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	60fb      	str	r3, [r7, #12]
        break;
 800333a:	e00a      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	09db      	lsrs	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
        break;
 8003342:	e006      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	60fb      	str	r3, [r7, #12]
        break;
 800334a:	e002      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
        break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003350:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <ADC_ConfigureBoostMode+0x1d0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d808      	bhi.n	8003372 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800336e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003370:	e025      	b.n	80033be <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <ADC_ConfigureBoostMode+0x1d4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d80a      	bhi.n	8003390 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	609a      	str	r2, [r3, #8]
}
 800338e:	e016      	b.n	80033be <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <ADC_ConfigureBoostMode+0x1d8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d80a      	bhi.n	80033ae <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	609a      	str	r2, [r3, #8]
}
 80033ac:	e007      	b.n	80033be <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40022100 	.word	0x40022100
 80033d0:	40022300 	.word	0x40022300
 80033d4:	58026300 	.word	0x58026300
 80033d8:	005f5e10 	.word	0x005f5e10
 80033dc:	00bebc20 	.word	0x00bebc20
 80033e0:	017d7840 	.word	0x017d7840

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <__NVIC_SetPriorityGrouping+0x40>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <__NVIC_SetPriorityGrouping+0x40>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00
 8003428:	05fa0000 	.word	0x05fa0000

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	@ (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	@ (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	@ 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	@ 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff47 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff5e 	bl	800342c <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff90 	bl	800349c <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5f 	bl	8003448 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ffb2 	bl	8003504 <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0e3      	b.n	8003786 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2223      	movs	r2, #35	@ 0x23
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fd fcf5 	bl	8000fc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003790 <HAL_ETH_Init+0x1e4>)
 80035d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003790 <HAL_ETH_Init+0x1e4>)
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80035e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <HAL_ETH_Init+0x1e4>)
 80035e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7a1b      	ldrb	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7fe f825 	bl	800164c <HAL_SYSCFG_ETHInterfaceSelect>
 8003602:	e003      	b.n	800360c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003604:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003608:	f7fe f820 	bl	800164c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_ETH_Init+0x1e8>)
 800360e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003628:	f7fe f804 	bl	8001634 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800362e:	e011      	b.n	8003654 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003630:	f7fe f800 	bl	8001634 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800363e:	d909      	bls.n	8003654 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	22e0      	movs	r2, #224	@ 0xe0
 800364c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e098      	b.n	8003786 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e4      	bne.n	8003630 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fb34 	bl	8003cd4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800366c:	f002 fa0a 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8003670:	4603      	mov	r3, r0
 8003672:	4a49      	ldr	r2, [pc, #292]	@ (8003798 <HAL_ETH_Init+0x1ec>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	0c9a      	lsrs	r2, r3, #18
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3a01      	subs	r2, #1
 8003680:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fd17 	bl	80040b8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003692:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003696:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036a6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	22e0      	movs	r2, #224	@ 0xe0
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e05d      	b.n	8003786 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80036d6:	4b31      	ldr	r3, [pc, #196]	@ (800379c <HAL_ETH_Init+0x1f0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6952      	ldr	r2, [r2, #20]
 80036de:	0051      	lsls	r1, r2, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036ea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fd7f 	bl	80041f2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fdc5 	bl	8004284 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	3305      	adds	r3, #5
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	021a      	lsls	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	3303      	adds	r3, #3
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	061a      	lsls	r2, r3, #24
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	3302      	adds	r3, #2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	3301      	adds	r3, #1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003738:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003746:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003748:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <HAL_ETH_Init+0x1f4>)
 800375a:	430b      	orrs	r3, r1
 800375c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HAL_ETH_Init+0x1f8>)
 800376e:	430b      	orrs	r3, r1
 8003770:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2210      	movs	r2, #16
 8003780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	58024400 	.word	0x58024400
 8003794:	58000400 	.word	0x58000400
 8003798:	431bde83 	.word	0x431bde83
 800379c:	ffff8001 	.word	0xffff8001
 80037a0:	0c020060 	.word	0x0c020060
 80037a4:	0c20c000 	.word	0x0c20c000

080037a8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d153      	bne.n	8003862 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2223      	movs	r2, #35	@ 0x23
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9f3 	bl	8003bb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0202 	orr.w	r2, r2, #2
 80037dc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800380a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800381a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003826:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003836:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003842:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800384e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003852:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2223      	movs	r2, #35	@ 0x23
 800385a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800387a:	2b23      	cmp	r3, #35	@ 0x23
 800387c:	d13f      	bne.n	80038fe <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2223      	movs	r2, #35	@ 0x23
 8003882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800388e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800389e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0202 	bic.w	r2, r2, #2
 80038f0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2210      	movs	r2, #16
 80038f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003938:	2b23      	cmp	r3, #35	@ 0x23
 800393a:	d179      	bne.n	8003a30 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800393c:	2200      	movs	r2, #0
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fcfd 	bl	8004340 <ETH_Prepare_Tx_Descriptors>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e068      	b.n	8003a32 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8003960:	f3bf 8f4f 	dsb	sy
}
 8003964:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3206      	adds	r2, #6
 800396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003972:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	2b03      	cmp	r3, #3
 8003984:	d904      	bls.n	8003990 <HAL_ETH_Transmit+0x84>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	1f1a      	subs	r2, r3, #4
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3106      	adds	r1, #6
 800399c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039a4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80039a8:	f7fd fe44 	bl	8001634 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80039ae:	e039      	b.n	8003a24 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80039bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f043 0208 	orr.w	r2, r3, #8
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039dc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e023      	b.n	8003a32 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d018      	beq.n	8003a24 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fd fe1f 	bl	8001634 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <HAL_ETH_Transmit+0xfc>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003a1e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e006      	b.n	8003a32 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dbc1      	blt.n	80039b0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b088      	sub	sp, #32
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0a2      	b.n	8003bac <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6c:	2b23      	cmp	r3, #35	@ 0x23
 8003a6e:	d001      	beq.n	8003a74 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e09b      	b.n	8003bac <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	3212      	adds	r2, #18
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8a:	f1c3 0304 	rsb	r3, r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003a90:	e064      	b.n	8003b5c <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_ETH_ReadData+0x88>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d03a      	beq.n	8003b38 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f000 f8cf 	bl	8003cba <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d902      	bls.n	8003b4a <HAL_ETH_ReadData+0x110>
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3b04      	subs	r3, #4
 8003b48:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	3212      	adds	r2, #18
 8003b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b54:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db06      	blt.n	8003b72 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d202      	bcs.n	8003b72 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d08f      	beq.n	8003a92 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f814 	bl	8003bb4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	3212      	adds	r2, #18
 8003bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bda:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003bdc:	e038      	b.n	8003c50 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d112      	bne.n	8003c0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f85b 	bl	8003ca6 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	74fb      	strb	r3, [r7, #19]
 8003bfa:	e007      	b.n	8003c0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	461a      	mov	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01e      	beq.n	8003c50 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e003      	b.n	8003c2c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8003c2a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d902      	bls.n	8003c3e <ETH_UpdateDescriptor+0x8a>
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	3212      	adds	r2, #18
 8003c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c48:	617b      	str	r3, [r7, #20]
      desccount--;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <ETH_UpdateDescriptor+0xa8>
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1c0      	bne.n	8003bde <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d01b      	beq.n	8003c9e <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c70:	f3bf 8f5f 	dmb	sy
}
 8003c74:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	18ca      	adds	r2, r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_ETH_RxAllocateCallback>:
  * @brief  Rx Allocate callback.
  * @param  buff: pointer to allocated buffer
  * @retval None
  */
__weak void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxAllocateCallback could be implemented in the user file
  */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_ETH_RxLinkCallback>:
  * @param  buff: pointer to received data
  * @param  Length: received data length
  * @retval None
  */
__weak void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(buff);
  UNUSED(Length);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxLinkCallback could be implemented in the user file
  */
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003cee:	f001 fec9 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8003cf2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d804      	bhi.n	8003d06 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e022      	b.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d204      	bcs.n	8003d18 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e019      	b.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d915      	bls.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a12      	ldr	r2, [pc, #72]	@ (8003d6c <HAL_ETH_SetMDIOClockRange+0x98>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d804      	bhi.n	8003d32 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e00c      	b.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a0e      	ldr	r2, [pc, #56]	@ (8003d70 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d804      	bhi.n	8003d44 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e003      	b.n	8003d4c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	02160ebf 	.word	0x02160ebf
 8003d64:	03938700 	.word	0x03938700
 8003d68:	05f5e0ff 	.word	0x05f5e0ff
 8003d6c:	08f0d17f 	.word	0x08f0d17f
 8003d70:	0ee6b27f 	.word	0x0ee6b27f

08003d74 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	7b1b      	ldrb	r3, [r3, #12]
 8003d94:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	7b5b      	ldrb	r3, [r3, #13]
 8003d9c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	7b9b      	ldrb	r3, [r3, #14]
 8003da4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003da6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	7bdb      	ldrb	r3, [r3, #15]
 8003dac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003dae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	7c12      	ldrb	r2, [r2, #16]
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	d102      	bne.n	8003dbe <ETH_SetMACConfig+0x4a>
 8003db8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003dbc:	e000      	b.n	8003dc0 <ETH_SetMACConfig+0x4c>
 8003dbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003dc0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	7c52      	ldrb	r2, [r2, #17]
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	d102      	bne.n	8003dd0 <ETH_SetMACConfig+0x5c>
 8003dca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dce:	e000      	b.n	8003dd2 <ETH_SetMACConfig+0x5e>
 8003dd0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	7c9b      	ldrb	r3, [r3, #18]
 8003dd8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003dda:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003de0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003de6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	7f1b      	ldrb	r3, [r3, #28]
 8003dec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003dee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	7f5b      	ldrb	r3, [r3, #29]
 8003df4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003df6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	7f92      	ldrb	r2, [r2, #30]
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	d102      	bne.n	8003e06 <ETH_SetMACConfig+0x92>
 8003e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e04:	e000      	b.n	8003e08 <ETH_SetMACConfig+0x94>
 8003e06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003e08:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	7fdb      	ldrb	r3, [r3, #31]
 8003e0e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003e10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	d102      	bne.n	8003e22 <ETH_SetMACConfig+0xae>
 8003e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e20:	e000      	b.n	8003e24 <ETH_SetMACConfig+0xb0>
 8003e22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003e24:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003e2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e32:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003e34:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b56      	ldr	r3, [pc, #344]	@ (8003fa0 <ETH_SetMACConfig+0x22c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	68f9      	ldr	r1, [r7, #12]
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e5e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e68:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003e6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e72:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	d102      	bne.n	8003e86 <ETH_SetMACConfig+0x112>
 8003e80:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e84:	e000      	b.n	8003e88 <ETH_SetMACConfig+0x114>
 8003e86:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e88:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4b42      	ldr	r3, [pc, #264]	@ (8003fa4 <ETH_SetMACConfig+0x230>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa8 <ETH_SetMACConfig+0x234>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ed0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ed6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d101      	bne.n	8003ee6 <ETH_SetMACConfig+0x172>
 8003ee2:	2280      	movs	r2, #128	@ 0x80
 8003ee4:	e000      	b.n	8003ee8 <ETH_SetMACConfig+0x174>
 8003ee6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003ee8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003efa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003efe:	4013      	ands	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003f10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003f18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f26:	f023 0103 	bic.w	r1, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003f3e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	d101      	bne.n	8003f62 <ETH_SetMACConfig+0x1ee>
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	e000      	b.n	8003f64 <ETH_SetMACConfig+0x1f0>
 8003f62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003f64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003f6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003f76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003f84:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	00048083 	.word	0x00048083
 8003fa4:	c0f88000 	.word	0xc0f88000
 8003fa8:	fffffef0 	.word	0xfffffef0

08003fac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b38      	ldr	r3, [pc, #224]	@ (80040a4 <ETH_SetDMAConfig+0xf8>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003fde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	7b1b      	ldrb	r3, [r3, #12]
 8003fe4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <ETH_SetDMAConfig+0xfc>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	430b      	orrs	r3, r1
 8004000:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004004:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	7b5b      	ldrb	r3, [r3, #13]
 800400a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800401c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004020:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <ETH_SetDMAConfig+0x100>)
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	430b      	orrs	r3, r1
 800402c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004030:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	7d1b      	ldrb	r3, [r3, #20]
 800403c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800403e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	7f5b      	ldrb	r3, [r3, #29]
 8004044:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004052:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004056:	4b16      	ldr	r3, [pc, #88]	@ (80040b0 <ETH_SetDMAConfig+0x104>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	430b      	orrs	r3, r1
 8004062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004066:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	7f1b      	ldrb	r3, [r3, #28]
 800406e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004080:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004084:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <ETH_SetDMAConfig+0x108>)
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	430b      	orrs	r3, r1
 8004090:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004094:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	ffff87fd 	.word	0xffff87fd
 80040a8:	ffff2ffe 	.word	0xffff2ffe
 80040ac:	fffec000 	.word	0xfffec000
 80040b0:	ffc0efef 	.word	0xffc0efef
 80040b4:	7fc0ffff 	.word	0x7fc0ffff

080040b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b0a4      	sub	sp, #144	@ 0x90
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040c6:	2300      	movs	r3, #0
 80040c8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80040f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040f8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004100:	2300      	movs	r3, #0
 8004102:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004110:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004114:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800411c:	2300      	movs	r3, #0
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004132:	2300      	movs	r3, #0
 8004134:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004136:	2300      	movs	r3, #0
 8004138:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800413a:	2300      	movs	r3, #0
 800413c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004150:	2320      	movs	r3, #32
 8004152:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004162:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004168:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800416c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004174:	2302      	movs	r3, #2
 8004176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004192:	2300      	movs	r3, #0
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800419c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fde6 	bl	8003d74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041ac:	2301      	movs	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041c2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80041d8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fee1 	bl	8003fac <ETH_SetDMAConfig>
}
 80041ea:	bf00      	nop
 80041ec:	3790      	adds	r7, #144	@ 0x90
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e01d      	b.n	800423c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68d9      	ldr	r1, [r3, #12]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	3206      	adds	r2, #6
 8004232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d9de      	bls.n	8004200 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004250:	461a      	mov	r2, r3
 8004252:	2303      	movs	r3, #3
 8004254:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004264:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004274:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e023      	b.n	80042da <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6919      	ldr	r1, [r3, #16]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	440b      	add	r3, r1
 80042a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	3212      	adds	r2, #18
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3301      	adds	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d9d8      	bls.n	8004292 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	461a      	mov	r2, r3
 8004308:	2303      	movs	r3, #3
 800430a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004340:	b480      	push	{r7}
 8004342:	b091      	sub	sp, #68	@ 0x44
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3318      	adds	r3, #24
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800437e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004382:	d007      	beq.n	8004394 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004388:	3304      	adds	r3, #4
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	e266      	b.n	8004866 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d044      	beq.n	800442e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b75      	ldr	r3, [pc, #468]	@ (8004580 <ETH_Prepare_Tx_Descriptors+0x240>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80043d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d027      	beq.n	800442e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	431a      	orrs	r2, r3
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800441c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800442c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	4b51      	ldr	r3, [pc, #324]	@ (8004584 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004440:	4013      	ands	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	6992      	ldr	r2, [r2, #24]
 8004446:	431a      	orrs	r2, r3
 8004448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d036      	beq.n	80044de <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800447c:	f3bf 8f5f 	dmb	sy
}
 8004480:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800448e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004490:	3301      	adds	r3, #1
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004496:	2b03      	cmp	r3, #3
 8004498:	d902      	bls.n	80044a0 <ETH_Prepare_Tx_Descriptors+0x160>
 800449a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449c:	3b04      	subs	r3, #4
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a8:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80044aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ac:	3301      	adds	r3, #1
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044bc:	d10f      	bne.n	80044de <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80044c8:	f3bf 8f5f 	dmb	sy
}
 80044cc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	e1c3      	b.n	8004866 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80044de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e0:	3301      	adds	r3, #1
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <ETH_Prepare_Tx_Descriptors+0x244>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d012      	beq.n	800452e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <ETH_Prepare_Tx_Descriptors+0x248>)
 800451e:	4013      	ands	r3, r2
 8004520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	0412      	lsls	r2, r2, #16
 8004526:	431a      	orrs	r2, r3
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	e008      	b.n	8004540 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <ETH_Prepare_Tx_Descriptors+0x248>)
 800453a:	4013      	ands	r3, r2
 800453c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d021      	beq.n	8004590 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	04db      	lsls	r3, r3, #19
 800455a:	431a      	orrs	r2, r3
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	4b09      	ldr	r3, [pc, #36]	@ (800458c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8004566:	4013      	ands	r3, r2
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	69d2      	ldr	r2, [r2, #28]
 800456c:	431a      	orrs	r2, r3
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e02e      	b.n	80045de <ETH_Prepare_Tx_Descriptors+0x29e>
 8004580:	ffff0000 	.word	0xffff0000
 8004584:	ffffc000 	.word	0xffffc000
 8004588:	c000ffff 	.word	0xc000ffff
 800458c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	4b7b      	ldr	r3, [pc, #492]	@ (8004784 <ETH_Prepare_Tx_Descriptors+0x444>)
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	431a      	orrs	r2, r3
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80045cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	431a      	orrs	r2, r3
 80045da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045dc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	431a      	orrs	r2, r3
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004614:	f3bf 8f5f 	dmb	sy
}
 8004618:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80da 	beq.w	80047e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	431a      	orrs	r2, r3
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004646:	e0cf      	b.n	80047e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	3301      	adds	r3, #1
 8004658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465c:	2b03      	cmp	r3, #3
 800465e:	d902      	bls.n	8004666 <ETH_Prepare_Tx_Descriptors+0x326>
 8004660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004662:	3b04      	subs	r3, #4
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004688:	d007      	beq.n	800469a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800468a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468e:	3304      	adds	r3, #4
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d029      	beq.n	80046ee <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046ac:	e019      	b.n	80046e2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80046ae:	f3bf 8f5f 	dmb	sy
}
 80046b2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	3301      	adds	r3, #1
 80046c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d902      	bls.n	80046d2 <ETH_Prepare_Tx_Descriptors+0x392>
 80046cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ce:	3b04      	subs	r3, #4
 80046d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	3301      	adds	r3, #1
 80046e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3e1      	bcc.n	80046ae <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0bb      	b.n	8004866 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80046ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f0:	3301      	adds	r3, #1
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80046f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <ETH_Prepare_Tx_Descriptors+0x448>)
 800470a:	4013      	ands	r3, r2
 800470c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470e:	6852      	ldr	r2, [r2, #4]
 8004710:	431a      	orrs	r2, r3
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b16      	ldr	r3, [pc, #88]	@ (800478c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004734:	4013      	ands	r3, r2
 8004736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004738:	6852      	ldr	r2, [r2, #4]
 800473a:	0412      	lsls	r2, r2, #16
 800473c:	431a      	orrs	r2, r3
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	e008      	b.n	8004756 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004750:	4013      	ands	r3, r2
 8004752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004754:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d018      	beq.n	8004794 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <ETH_Prepare_Tx_Descriptors+0x450>)
 8004768:	4013      	ands	r3, r2
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	69d2      	ldr	r2, [r2, #28]
 800476e:	431a      	orrs	r2, r3
 8004770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004772:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e020      	b.n	80047c4 <ETH_Prepare_Tx_Descriptors+0x484>
 8004782:	bf00      	nop
 8004784:	ffff8000 	.word	0xffff8000
 8004788:	ffffc000 	.word	0xffffc000
 800478c:	c000ffff 	.word	0xc000ffff
 8004790:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	4b36      	ldr	r3, [pc, #216]	@ (8004874 <ETH_Prepare_Tx_Descriptors+0x534>)
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	431a      	orrs	r2, r3
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	3301      	adds	r3, #1
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80047ca:	f3bf 8f5f 	dmb	sy
}
 80047ce:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f af2b 	bne.w	8004648 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	e005      	b.n	8004812 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004822:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004826:	3304      	adds	r3, #4
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004832:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	613b      	str	r3, [r7, #16]
  return(result);
 800483a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	2301      	movs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	4413      	add	r3, r2
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3744      	adds	r7, #68	@ 0x44
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	ffff8000 	.word	0xffff8000

08004878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	@ 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004886:	4b86      	ldr	r3, [pc, #536]	@ (8004aa0 <HAL_GPIO_Init+0x228>)
 8004888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800488a:	e18c      	b.n	8004ba6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	2101      	movs	r1, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 817e 	beq.w	8004ba0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d005      	beq.n	80048bc <HAL_GPIO_Init+0x44>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d130      	bne.n	800491e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048f2:	2201      	movs	r2, #1
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0201 	and.w	r2, r3, #1
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b03      	cmp	r3, #3
 8004928:	d017      	beq.n	800495a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	2203      	movs	r2, #3
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d123      	bne.n	80049ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	08da      	lsrs	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3208      	adds	r2, #8
 800496e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	220f      	movs	r2, #15
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	08da      	lsrs	r2, r3, #3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3208      	adds	r2, #8
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2203      	movs	r2, #3
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0203 	and.w	r2, r3, #3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80d8 	beq.w	8004ba0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f0:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa4 <HAL_GPIO_Init+0x22c>)
 80049f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049f6:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <HAL_GPIO_Init+0x22c>)
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a00:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <HAL_GPIO_Init+0x22c>)
 8004a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0e:	4a26      	ldr	r2, [pc, #152]	@ (8004aa8 <HAL_GPIO_Init+0x230>)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <HAL_GPIO_Init+0x234>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <HAL_GPIO_Init+0x258>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab0 <HAL_GPIO_Init+0x238>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02b      	beq.n	8004a9a <HAL_GPIO_Init+0x222>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <HAL_GPIO_Init+0x23c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d025      	beq.n	8004a96 <HAL_GPIO_Init+0x21e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab8 <HAL_GPIO_Init+0x240>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01f      	beq.n	8004a92 <HAL_GPIO_Init+0x21a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <HAL_GPIO_Init+0x244>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d019      	beq.n	8004a8e <HAL_GPIO_Init+0x216>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <HAL_GPIO_Init+0x248>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_GPIO_Init+0x212>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_GPIO_Init+0x24c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00d      	beq.n	8004a86 <HAL_GPIO_Init+0x20e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <HAL_GPIO_Init+0x250>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <HAL_GPIO_Init+0x20a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <HAL_GPIO_Init+0x254>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_GPIO_Init+0x206>
 8004a7a:	2309      	movs	r3, #9
 8004a7c:	e029      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a7e:	230a      	movs	r3, #10
 8004a80:	e027      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a82:	2307      	movs	r3, #7
 8004a84:	e025      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a86:	2306      	movs	r3, #6
 8004a88:	e023      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a8a:	2305      	movs	r3, #5
 8004a8c:	e021      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	e01f      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a92:	2303      	movs	r3, #3
 8004a94:	e01d      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e01b      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e019      	b.n	8004ad2 <HAL_GPIO_Init+0x25a>
 8004a9e:	bf00      	nop
 8004aa0:	58000080 	.word	0x58000080
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	58000400 	.word	0x58000400
 8004aac:	58020000 	.word	0x58020000
 8004ab0:	58020400 	.word	0x58020400
 8004ab4:	58020800 	.word	0x58020800
 8004ab8:	58020c00 	.word	0x58020c00
 8004abc:	58021000 	.word	0x58021000
 8004ac0:	58021400 	.word	0x58021400
 8004ac4:	58021800 	.word	0x58021800
 8004ac8:	58021c00 	.word	0x58021c00
 8004acc:	58022400 	.word	0x58022400
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	f002 0203 	and.w	r2, r2, #3
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	4093      	lsls	r3, r2
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae2:	4938      	ldr	r1, [pc, #224]	@ (8004bc4 <HAL_GPIO_Init+0x34c>)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	3302      	adds	r3, #2
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f ae6b 	bne.w	800488c <HAL_GPIO_Init+0x14>
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	3724      	adds	r7, #36	@ 0x24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	58000400 	.word	0x58000400

08004bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd8:	787b      	ldrb	r3, [r7, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004be4:	e003      	b.n	8004bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004be6:	887b      	ldrh	r3, [r7, #2]
 8004be8:	041a      	lsls	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	619a      	str	r2, [r3, #24]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <HAL_PWREx_ConfigSupply+0x70>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d00a      	beq.n	8004c26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c10:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <HAL_PWREx_ConfigSupply+0x70>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01f      	b.n	8004c62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e01d      	b.n	8004c62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <HAL_PWREx_ConfigSupply+0x70>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 0207 	bic.w	r2, r3, #7
 8004c2e:	490f      	ldr	r1, [pc, #60]	@ (8004c6c <HAL_PWREx_ConfigSupply+0x70>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c36:	f7fc fcfd 	bl	8001634 <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c3c:	e009      	b.n	8004c52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c3e:	f7fc fcf9 	bl	8001634 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c4c:	d901      	bls.n	8004c52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e007      	b.n	8004c62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_PWREx_ConfigSupply+0x70>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5e:	d1ee      	bne.n	8004c3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	58024800 	.word	0x58024800

08004c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	@ 0x30
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e3c8      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8087 	beq.w	8004d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c90:	4b88      	ldr	r3, [pc, #544]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c9a:	4b86      	ldr	r3, [pc, #536]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x46>
 8004ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca8:	2b18      	cmp	r3, #24
 8004caa:	d110      	bne.n	8004cce <HAL_RCC_OscConfig+0x5e>
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d06c      	beq.n	8004d9c <HAL_RCC_OscConfig+0x12c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d168      	bne.n	8004d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e3a2      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd6:	d106      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x76>
 8004cd8:	4b76      	ldr	r3, [pc, #472]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a75      	ldr	r2, [pc, #468]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e02e      	b.n	8004d44 <HAL_RCC_OscConfig+0xd4>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x98>
 8004cee:	4b71      	ldr	r3, [pc, #452]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a70      	ldr	r2, [pc, #448]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e01d      	b.n	8004d44 <HAL_RCC_OscConfig+0xd4>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0xbc>
 8004d12:	4b68      	ldr	r3, [pc, #416]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a67      	ldr	r2, [pc, #412]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b65      	ldr	r3, [pc, #404]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a64      	ldr	r2, [pc, #400]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0xd4>
 8004d2c:	4b61      	ldr	r3, [pc, #388]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a60      	ldr	r2, [pc, #384]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fc fc72 	bl	8001634 <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fc fc6e 	bl	8001634 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e356      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d66:	4b53      	ldr	r3, [pc, #332]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0xe4>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fc5e 	bl	8001634 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc fc5a 	bl	8001634 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e342      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d8e:	4b49      	ldr	r3, [pc, #292]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x10c>
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 808c 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dac:	4b41      	ldr	r3, [pc, #260]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004db6:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x162>
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	2b18      	cmp	r3, #24
 8004dc6:	d137      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1c8>
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d132      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd2:	4b38      	ldr	r3, [pc, #224]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_RCC_OscConfig+0x17a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e314      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dea:	4b32      	ldr	r3, [pc, #200]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 0219 	bic.w	r2, r3, #25
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	492f      	ldr	r1, [pc, #188]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc fc1a 	bl	8001634 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fc fc16 	bl	8001634 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e2fe      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e16:	4b27      	ldr	r3, [pc, #156]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	4920      	ldr	r1, [pc, #128]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e36:	e045      	b.n	8004ec4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d026      	beq.n	8004e8e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e40:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f023 0219 	bic.w	r2, r3, #25
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4919      	ldr	r1, [pc, #100]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fc fbef 	bl	8001634 <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7fc fbeb 	bl	8001634 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e2d3      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	490b      	ldr	r1, [pc, #44]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
 8004e8c:	e01a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8e:	4b09      	ldr	r3, [pc, #36]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a08      	ldr	r2, [pc, #32]	@ (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fc fbcb 	bl	8001634 <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fc fbc7 	bl	8001634 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d903      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e2af      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
 8004eb4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eb8:	4b96      	ldr	r3, [pc, #600]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d06a      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed0:	4b90      	ldr	r3, [pc, #576]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ed8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eda:	4b8e      	ldr	r3, [pc, #568]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d007      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x286>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b18      	cmp	r3, #24
 8004eea:	d11b      	bne.n	8004f24 <HAL_RCC_OscConfig+0x2b4>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d116      	bne.n	8004f24 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ef6:	4b87      	ldr	r3, [pc, #540]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_RCC_OscConfig+0x29e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	2b80      	cmp	r3, #128	@ 0x80
 8004f08:	d001      	beq.n	8004f0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e282      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f0e:	4b81      	ldr	r3, [pc, #516]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	497d      	ldr	r1, [pc, #500]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f22:	e040      	b.n	8004fa6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d023      	beq.n	8004f74 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f2c:	4b79      	ldr	r3, [pc, #484]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a78      	ldr	r2, [pc, #480]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fb7c 	bl	8001634 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f40:	f7fc fb78 	bl	8001634 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e260      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f52:	4b70      	ldr	r3, [pc, #448]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	4969      	ldr	r1, [pc, #420]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60cb      	str	r3, [r1, #12]
 8004f72:	e018      	b.n	8004fa6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f74:	4b67      	ldr	r3, [pc, #412]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a66      	ldr	r2, [pc, #408]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fc fb58 	bl	8001634 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f88:	f7fc fb54 	bl	8001634 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e23c      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d036      	beq.n	8005020 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d019      	beq.n	8004fee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fba:	4b56      	ldr	r3, [pc, #344]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbe:	4a55      	ldr	r2, [pc, #340]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fc fb35 	bl	8001634 <HAL_GetTick>
 8004fca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fce:	f7fc fb31 	bl	8001634 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e219      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fe0:	4b4c      	ldr	r3, [pc, #304]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x35e>
 8004fec:	e018      	b.n	8005020 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fee:	4b49      	ldr	r3, [pc, #292]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	4a48      	ldr	r2, [pc, #288]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fc fb1b 	bl	8001634 <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005002:	f7fc fb17 	bl	8001634 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1ff      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005014:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8005016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d036      	beq.n	800509a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d019      	beq.n	8005068 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005034:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a36      	ldr	r2, [pc, #216]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800503e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005040:	f7fc faf8 	bl	8001634 <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005048:	f7fc faf4 	bl	8001634 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1dc      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800505a:	4b2e      	ldr	r3, [pc, #184]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x3d8>
 8005066:	e018      	b.n	800509a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005068:	4b2a      	ldr	r3, [pc, #168]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a29      	ldr	r2, [pc, #164]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 800506e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005072:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005074:	f7fc fade 	bl	8001634 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800507c:	f7fc fada 	bl	8001634 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1c2      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800508e:	4b21      	ldr	r3, [pc, #132]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8086 	beq.w	80051b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x4a8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <HAL_RCC_OscConfig+0x4a8>)
 80050ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b4:	f7fc fabe 	bl	8001634 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fc faba 	bl	8001634 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	@ 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e1a2      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <HAL_RCC_OscConfig+0x4a8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d106      	bne.n	80050f0 <HAL_RCC_OscConfig+0x480>
 80050e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ee:	e032      	b.n	8005156 <HAL_RCC_OscConfig+0x4e6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <HAL_RCC_OscConfig+0x4ac>
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	6713      	str	r3, [r2, #112]	@ 0x70
 8005104:	4b03      	ldr	r3, [pc, #12]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4a02      	ldr	r2, [pc, #8]	@ (8005114 <HAL_RCC_OscConfig+0x4a4>)
 800510a:	f023 0304 	bic.w	r3, r3, #4
 800510e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005110:	e021      	b.n	8005156 <HAL_RCC_OscConfig+0x4e6>
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	58024800 	.word	0x58024800
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x4ce>
 8005124:	4b83      	ldr	r3, [pc, #524]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4a82      	ldr	r2, [pc, #520]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005130:	4b80      	ldr	r3, [pc, #512]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	4a7f      	ldr	r2, [pc, #508]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	@ 0x70
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x4e6>
 800513e:	4b7d      	ldr	r3, [pc, #500]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005142:	4a7c      	ldr	r2, [pc, #496]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	@ 0x70
 800514a:	4b7a      	ldr	r3, [pc, #488]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514e:	4a79      	ldr	r2, [pc, #484]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc fa69 	bl	8001634 <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fc fa65 	bl	8001634 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e14b      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800517c:	4b6d      	ldr	r3, [pc, #436]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x4f6>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fc fa53 	bl	8001634 <HAL_GetTick>
 800518e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fc fa4f 	bl	8001634 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e135      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051a8:	4b62      	ldr	r3, [pc, #392]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 812a 	beq.w	8005412 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051be:	4b5d      	ldr	r3, [pc, #372]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051c6:	2b18      	cmp	r3, #24
 80051c8:	f000 80ba 	beq.w	8005340 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	f040 8095 	bne.w	8005300 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b57      	ldr	r3, [pc, #348]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a56      	ldr	r2, [pc, #344]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80051dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fc fa27 	bl	8001634 <HAL_GetTick>
 80051e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fc fa23 	bl	8001634 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e10b      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005208:	4b4a      	ldr	r3, [pc, #296]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800520c:	4b4a      	ldr	r3, [pc, #296]	@ (8005338 <HAL_RCC_OscConfig+0x6c8>)
 800520e:	4013      	ands	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	430a      	orrs	r2, r1
 800521c:	4945      	ldr	r1, [pc, #276]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800521e:	4313      	orrs	r3, r2
 8005220:	628b      	str	r3, [r1, #40]	@ 0x28
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	3b01      	subs	r3, #1
 8005228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	3b01      	subs	r3, #1
 8005232:	025b      	lsls	r3, r3, #9
 8005234:	b29b      	uxth	r3, r3
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	3b01      	subs	r3, #1
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524a:	3b01      	subs	r3, #1
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005252:	4938      	ldr	r1, [pc, #224]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005258:	4b36      	ldr	r3, [pc, #216]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a35      	ldr	r2, [pc, #212]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005264:	4b33      	ldr	r3, [pc, #204]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005268:	4b34      	ldr	r3, [pc, #208]	@ (800533c <HAL_RCC_OscConfig+0x6cc>)
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005270:	00d2      	lsls	r2, r2, #3
 8005272:	4930      	ldr	r1, [pc, #192]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005278:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	f023 020c 	bic.w	r2, r3, #12
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	492b      	ldr	r1, [pc, #172]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800528a:	4b2a      	ldr	r3, [pc, #168]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	f023 0202 	bic.w	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005296:	4927      	ldr	r1, [pc, #156]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	4a24      	ldr	r2, [pc, #144]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a8:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	4a21      	ldr	r2, [pc, #132]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc f9ac 	bl	8001634 <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fc f9a8 	bl	8001634 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e090      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x670>
 80052fe:	e088      	b.n	8005412 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0b      	ldr	r2, [pc, #44]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800530a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc f992 	bl	8001634 <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7fc f98e 	bl	8001634 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e076      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005326:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <HAL_RCC_OscConfig+0x6c4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x6a4>
 8005332:	e06e      	b.n	8005412 <HAL_RCC_OscConfig+0x7a2>
 8005334:	58024400 	.word	0x58024400
 8005338:	fffffc0c 	.word	0xfffffc0c
 800533c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005340:	4b36      	ldr	r3, [pc, #216]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	2b01      	cmp	r3, #1
 8005352:	d031      	beq.n	80053b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0203 	and.w	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d12a      	bne.n	80053b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d122      	bne.n	80053b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d11a      	bne.n	80053b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d111      	bne.n	80053b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d108      	bne.n	80053b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0e1b      	lsrs	r3, r3, #24
 80053aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e02b      	b.n	8005414 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053bc:	4b17      	ldr	r3, [pc, #92]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 80053be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d01f      	beq.n	8005412 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a11      	ldr	r2, [pc, #68]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053de:	f7fc f929 	bl	8001634 <HAL_GetTick>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053e4:	bf00      	nop
 80053e6:	f7fc f925 	bl	8001634 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d0f9      	beq.n	80053e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053f2:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 80053f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <HAL_RCC_OscConfig+0x7b0>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053fe:	00d2      	lsls	r2, r2, #3
 8005400:	4906      	ldr	r1, [pc, #24]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 8005402:	4313      	orrs	r3, r2
 8005404:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a04      	ldr	r2, [pc, #16]	@ (800541c <HAL_RCC_OscConfig+0x7ac>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	@ 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58024400 	.word	0x58024400
 8005420:	ffff0007 	.word	0xffff0007

08005424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e19c      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005438:	4b8a      	ldr	r3, [pc, #552]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d910      	bls.n	8005468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b87      	ldr	r3, [pc, #540]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 020f 	bic.w	r2, r3, #15
 800544e:	4985      	ldr	r1, [pc, #532]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b83      	ldr	r3, [pc, #524]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e184      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	4b7b      	ldr	r3, [pc, #492]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005480:	429a      	cmp	r2, r3
 8005482:	d908      	bls.n	8005496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005484:	4b78      	ldr	r3, [pc, #480]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4975      	ldr	r1, [pc, #468]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005492:	4313      	orrs	r3, r2
 8005494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	4b70      	ldr	r3, [pc, #448]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d908      	bls.n	80054c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	496a      	ldr	r1, [pc, #424]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	4b64      	ldr	r3, [pc, #400]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054dc:	429a      	cmp	r2, r3
 80054de:	d908      	bls.n	80054f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e0:	4b61      	ldr	r3, [pc, #388]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	495e      	ldr	r1, [pc, #376]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d010      	beq.n	8005520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800550a:	429a      	cmp	r2, r3
 800550c:	d908      	bls.n	8005520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800550e:	4b56      	ldr	r3, [pc, #344]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	4953      	ldr	r1, [pc, #332]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800551c:	4313      	orrs	r3, r2
 800551e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	4b4d      	ldr	r3, [pc, #308]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	429a      	cmp	r2, r3
 800553a:	d908      	bls.n	800554e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800553c:	4b4a      	ldr	r3, [pc, #296]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f023 020f 	bic.w	r2, r3, #15
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4947      	ldr	r1, [pc, #284]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800554a:	4313      	orrs	r3, r2
 800554c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d055      	beq.n	8005606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800555a:	4b43      	ldr	r3, [pc, #268]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4940      	ldr	r1, [pc, #256]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005568:	4313      	orrs	r3, r2
 800556a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d107      	bne.n	8005584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005574:	4b3c      	ldr	r3, [pc, #240]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d121      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0f6      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d107      	bne.n	800559c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800558c:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d115      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0ea      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055a4:	4b30      	ldr	r3, [pc, #192]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0de      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0d6      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055c4:	4b28      	ldr	r3, [pc, #160]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f023 0207 	bic.w	r2, r3, #7
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4925      	ldr	r1, [pc, #148]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d6:	f7fc f82d 	bl	8001634 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055de:	f7fc f829 	bl	8001634 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0be      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	429a      	cmp	r2, r3
 8005604:	d1eb      	bne.n	80055de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	429a      	cmp	r2, r3
 8005620:	d208      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005622:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f023 020f 	bic.w	r2, r3, #15
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	490e      	ldr	r1, [pc, #56]	@ (8005668 <HAL_RCC_ClockConfig+0x244>)
 8005630:	4313      	orrs	r3, r2
 8005632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005634:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d214      	bcs.n	800566c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 020f 	bic.w	r2, r3, #15
 800564a:	4906      	ldr	r1, [pc, #24]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <HAL_RCC_ClockConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e086      	b.n	8005772 <HAL_RCC_ClockConfig+0x34e>
 8005664:	52002000 	.word	0x52002000
 8005668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005684:	429a      	cmp	r2, r3
 8005686:	d208      	bcs.n	800569a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005688:	4b3c      	ldr	r3, [pc, #240]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	4939      	ldr	r1, [pc, #228]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 8005696:	4313      	orrs	r3, r2
 8005698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d010      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	4b34      	ldr	r3, [pc, #208]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d208      	bcs.n	80056c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056b6:	4b31      	ldr	r3, [pc, #196]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	492e      	ldr	r1, [pc, #184]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699a      	ldr	r2, [r3, #24]
 80056d8:	4b28      	ldr	r3, [pc, #160]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d208      	bcs.n	80056f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056e4:	4b25      	ldr	r3, [pc, #148]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	4922      	ldr	r1, [pc, #136]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800570e:	429a      	cmp	r2, r3
 8005710:	d208      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005712:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	4917      	ldr	r1, [pc, #92]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 8005720:	4313      	orrs	r3, r2
 8005722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005724:	f000 f834 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b14      	ldr	r3, [pc, #80]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	4912      	ldr	r1, [pc, #72]	@ (8005780 <HAL_RCC_ClockConfig+0x35c>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005742:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <HAL_RCC_ClockConfig+0x358>)
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	4a0d      	ldr	r2, [pc, #52]	@ (8005780 <HAL_RCC_ClockConfig+0x35c>)
 800574c:	5cd3      	ldrb	r3, [r2, r3]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <HAL_RCC_ClockConfig+0x360>)
 800575a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800575c:	4a0a      	ldr	r2, [pc, #40]	@ (8005788 <HAL_RCC_ClockConfig+0x364>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005762:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x368>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fb ff1a 	bl	80015a0 <HAL_InitTick>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
 8005780:	0800c198 	.word	0x0800c198
 8005784:	24000004 	.word	0x24000004
 8005788:	24000000 	.word	0x24000000
 800578c:	24000008 	.word	0x24000008

08005790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	@ 0x24
 8005794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005796:	4bb3      	ldr	r3, [pc, #716]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800579e:	2b18      	cmp	r3, #24
 80057a0:	f200 8155 	bhi.w	8005a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	08005811 	.word	0x08005811
 80057b0:	08005a4f 	.word	0x08005a4f
 80057b4:	08005a4f 	.word	0x08005a4f
 80057b8:	08005a4f 	.word	0x08005a4f
 80057bc:	08005a4f 	.word	0x08005a4f
 80057c0:	08005a4f 	.word	0x08005a4f
 80057c4:	08005a4f 	.word	0x08005a4f
 80057c8:	08005a4f 	.word	0x08005a4f
 80057cc:	08005837 	.word	0x08005837
 80057d0:	08005a4f 	.word	0x08005a4f
 80057d4:	08005a4f 	.word	0x08005a4f
 80057d8:	08005a4f 	.word	0x08005a4f
 80057dc:	08005a4f 	.word	0x08005a4f
 80057e0:	08005a4f 	.word	0x08005a4f
 80057e4:	08005a4f 	.word	0x08005a4f
 80057e8:	08005a4f 	.word	0x08005a4f
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	08005a4f 	.word	0x08005a4f
 80057f4:	08005a4f 	.word	0x08005a4f
 80057f8:	08005a4f 	.word	0x08005a4f
 80057fc:	08005a4f 	.word	0x08005a4f
 8005800:	08005a4f 	.word	0x08005a4f
 8005804:	08005a4f 	.word	0x08005a4f
 8005808:	08005a4f 	.word	0x08005a4f
 800580c:	08005843 	.word	0x08005843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005810:	4b94      	ldr	r3, [pc, #592]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800581c:	4b91      	ldr	r3, [pc, #580]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	4a90      	ldr	r2, [pc, #576]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800582e:	e111      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005830:	4b8d      	ldr	r3, [pc, #564]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005832:	61bb      	str	r3, [r7, #24]
      break;
 8005834:	e10e      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005836:	4b8d      	ldr	r3, [pc, #564]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005838:	61bb      	str	r3, [r7, #24]
      break;
 800583a:	e10b      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800583c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800583e:	61bb      	str	r3, [r7, #24]
      break;
 8005840:	e108      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005842:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800584c:	4b85      	ldr	r3, [pc, #532]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005858:	4b82      	ldr	r3, [pc, #520]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005862:	4b80      	ldr	r3, [pc, #512]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005866:	08db      	lsrs	r3, r3, #3
 8005868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80e1 	beq.w	8005a48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b02      	cmp	r3, #2
 800588a:	f000 8083 	beq.w	8005994 <HAL_RCC_GetSysClockFreq+0x204>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f200 80a1 	bhi.w	80059d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x114>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d056      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058a2:	e099      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02d      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
 80058c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b62      	ldr	r3, [pc, #392]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800590a:	e087      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591e:	4b51      	ldr	r3, [pc, #324]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005932:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800594e:	e065      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800595e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005962:	4b40      	ldr	r3, [pc, #256]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a02 	vldr	s12, [r7, #8]
 8005976:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005992:	e043      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059d6:	e021      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a1c:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	0a5b      	lsrs	r3, r3, #9
 8005a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a26:	3301      	adds	r3, #1
 8005a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a40:	ee17 3a90 	vmov	r3, s15
 8005a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a46:	e005      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]
      break;
 8005a4c:	e002      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a4e:	4b07      	ldr	r3, [pc, #28]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a50:	61bb      	str	r3, [r7, #24]
      break;
 8005a52:	bf00      	nop
  }

  return sysclockfreq;
 8005a54:	69bb      	ldr	r3, [r7, #24]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3724      	adds	r7, #36	@ 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	03d09000 	.word	0x03d09000
 8005a6c:	003d0900 	.word	0x003d0900
 8005a70:	007a1200 	.word	0x007a1200
 8005a74:	46000000 	.word	0x46000000
 8005a78:	4c742400 	.word	0x4c742400
 8005a7c:	4a742400 	.word	0x4a742400
 8005a80:	4af42400 	.word	0x4af42400

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a8a:	f7ff fe81 	bl	8005790 <HAL_RCC_GetSysClockFreq>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	490f      	ldr	r1, [pc, #60]	@ (8005ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a9c:	5ccb      	ldrb	r3, [r1, r3]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ab2:	5cd3      	ldrb	r3, [r2, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	fa22 f303 	lsr.w	r3, r2, r3
 8005abe:	4a07      	ldr	r2, [pc, #28]	@ (8005adc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac2:	4a07      	ldr	r2, [pc, #28]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ac8:	4b04      	ldr	r3, [pc, #16]	@ (8005adc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	0800c198 	.word	0x0800c198
 8005adc:	24000004 	.word	0x24000004
 8005ae0:	24000000 	.word	0x24000000

08005ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ae8:	f7ff ffcc 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4904      	ldr	r1, [pc, #16]	@ (8005b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	0800c198 	.word	0x0800c198

08005b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b14:	f7ff ffb6 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4904      	ldr	r1, [pc, #16]	@ (8005b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	58024400 	.word	0x58024400
 8005b38:	0800c198 	.word	0x0800c198

08005b3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b40:	b0c6      	sub	sp, #280	@ 0x118
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b60:	2500      	movs	r5, #0
 8005b62:	ea54 0305 	orrs.w	r3, r4, r5
 8005b66:	d049      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b72:	d02f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b78:	d828      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b7e:	d01a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b84:	d822      	bhi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b8e:	d007      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b90:	e01c      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b92:	4bab      	ldr	r3, [pc, #684]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	4aaa      	ldr	r2, [pc, #680]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b9e:	e01a      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 fa49 	bl	8008040 <RCCEx_PLL2_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bb4:	e00f      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	3328      	adds	r3, #40	@ 0x28
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 faf0 	bl	80081a4 <RCCEx_PLL3_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bca:	e004      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bde:	4b98      	ldr	r3, [pc, #608]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	4a94      	ldr	r2, [pc, #592]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf2:	e003      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c08:	f04f 0900 	mov.w	r9, #0
 8005c0c:	ea58 0309 	orrs.w	r3, r8, r9
 8005c10:	d047      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d82a      	bhi.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c47 	.word	0x08005c47
 8005c2c:	08005c5d 	.word	0x08005c5d
 8005c30:	08005c7b 	.word	0x08005c7b
 8005c34:	08005c7b 	.word	0x08005c7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c38:	4b81      	ldr	r3, [pc, #516]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	4a80      	ldr	r2, [pc, #512]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c44:	e01a      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f002 f9f6 	bl	8008040 <RCCEx_PLL2_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c5a:	e00f      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c60:	3328      	adds	r3, #40	@ 0x28
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f002 fa9d 	bl	80081a4 <RCCEx_PLL3_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c70:	e004      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c78:	e000      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c84:	4b6e      	ldr	r3, [pc, #440]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	f023 0107 	bic.w	r1, r3, #7
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c92:	4a6b      	ldr	r2, [pc, #428]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c98:	e003      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005cae:	f04f 0b00 	mov.w	fp, #0
 8005cb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005cb6:	d05b      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cc0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005cc4:	d03b      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005cc6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005cca:	d834      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cd0:	d037      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cd6:	d82e      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cdc:	d033      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ce2:	d828      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce8:	d01a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cee:	d822      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cf8:	d007      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005cfa:	e01c      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4b50      	ldr	r3, [pc, #320]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4a4f      	ldr	r2, [pc, #316]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d08:	e01e      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	3308      	adds	r3, #8
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 f994 	bl	8008040 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d1e:	e013      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	3328      	adds	r3, #40	@ 0x28
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f002 fa3b 	bl	80081a4 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e008      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d50:	4b3b      	ldr	r3, [pc, #236]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d54:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d60:	4a37      	ldr	r2, [pc, #220]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d62:	430b      	orrs	r3, r1
 8005d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d66:	e003      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d05d      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d98:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d9c:	d03b      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d9e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005da2:	d834      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005da4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005da8:	d037      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dae:	d82e      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005db0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005db4:	d033      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005db6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dba:	d828      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dc0:	d01a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dc6:	d822      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd0:	d007      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005dd2:	e01c      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4a19      	ldr	r2, [pc, #100]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de0:	e01e      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	3308      	adds	r3, #8
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 f928 	bl	8008040 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005df6:	e013      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	3328      	adds	r3, #40	@ 0x28
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f9cf 	bl	80081a4 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10d      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e28:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e38:	4a01      	ldr	r2, [pc, #4]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e3e:	e005      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e62:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d03a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e72:	2b30      	cmp	r3, #48	@ 0x30
 8005e74:	d01f      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e76:	2b30      	cmp	r3, #48	@ 0x30
 8005e78:	d819      	bhi.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d00c      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d815      	bhi.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d111      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8a:	4baa      	ldr	r3, [pc, #680]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	4aa9      	ldr	r2, [pc, #676]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e96:	e011      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f002 f8cd 	bl	8008040 <RCCEx_PLL2_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005eac:	e006      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eb4:	e002      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ec4:	4b9b      	ldr	r3, [pc, #620]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed2:	4a98      	ldr	r2, [pc, #608]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ed8:	e003      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ef8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005efc:	460b      	mov	r3, r1
 8005efe:	4313      	orrs	r3, r2
 8005f00:	d051      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0c:	d035      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f12:	d82e      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f18:	d031      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f1e:	d828      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f24:	d01a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2a:	d822      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f34:	d007      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f36:	e01c      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f38:	4b7e      	ldr	r3, [pc, #504]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	4a7d      	ldr	r2, [pc, #500]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f44:	e01c      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f002 f876 	bl	8008040 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e011      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	3328      	adds	r3, #40	@ 0x28
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 f91d 	bl	80081a4 <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f88:	4b6a      	ldr	r3, [pc, #424]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	4a67      	ldr	r2, [pc, #412]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fbc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d053      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fd0:	d033      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005fd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fd6:	d82c      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fdc:	d02f      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fe2:	d826      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fe4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe8:	d02b      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005fea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fee:	d820      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff4:	d012      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005ff6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffa:	d81a      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d022      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006004:	d115      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600a:	3308      	adds	r3, #8
 800600c:	2101      	movs	r1, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f002 f816 	bl	8008040 <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800601a:	e015      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	3328      	adds	r3, #40	@ 0x28
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f002 f8bd 	bl	80081a4 <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006030:	e00a      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800603a:	bf00      	nop
 800603c:	e004      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800603e:	bf00      	nop
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006042:	bf00      	nop
 8006044:	e000      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006050:	4b38      	ldr	r3, [pc, #224]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800605e:	4a35      	ldr	r2, [pc, #212]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006060:	430b      	orrs	r3, r1
 8006062:	6513      	str	r3, [r2, #80]	@ 0x50
 8006064:	e003      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800606a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800607a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006084:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d058      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800609a:	d033      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a0:	d82c      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a6:	d02f      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ac:	d826      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b2:	d02b      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80060b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060b8:	d820      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060be:	d012      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c4:	d81a      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d022      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ce:	d115      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d4:	3308      	adds	r3, #8
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 ffb1 	bl	8008040 <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060e4:	e015      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ea:	3328      	adds	r3, #40	@ 0x28
 80060ec:	2101      	movs	r1, #1
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 f858 	bl	80081a4 <RCCEx_PLL3_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060fa:	e00a      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006102:	e006      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006104:	bf00      	nop
 8006106:	e004      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006108:	bf00      	nop
 800610a:	e002      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10e      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800611a:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800612a:	4a02      	ldr	r2, [pc, #8]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006130:	e006      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006156:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d037      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800616a:	d00e      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800616c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006170:	d816      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d018      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800617a:	d111      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617c:	4bc4      	ldr	r3, [pc, #784]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4ac3      	ldr	r2, [pc, #780]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006188:	e00f      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	3308      	adds	r3, #8
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 ff54 	bl	8008040 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800619e:	e004      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061a6:	e000      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80061a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061b2:	4bb7      	ldr	r3, [pc, #732]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c0:	4ab3      	ldr	r2, [pc, #716]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061ea:	460b      	mov	r3, r1
 80061ec:	4313      	orrs	r3, r2
 80061ee:	d039      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d81c      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	0800623d 	.word	0x0800623d
 8006204:	08006211 	.word	0x08006211
 8006208:	0800621f 	.word	0x0800621f
 800620c:	0800623d 	.word	0x0800623d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006210:	4b9f      	ldr	r3, [pc, #636]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	4a9e      	ldr	r2, [pc, #632]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	3308      	adds	r3, #8
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f001 ff0a 	bl	8008040 <RCCEx_PLL2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006246:	4b92      	ldr	r3, [pc, #584]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	f023 0103 	bic.w	r1, r3, #3
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006254:	4a8e      	ldr	r2, [pc, #568]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006256:	430b      	orrs	r3, r1
 8006258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800627a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	f000 8099 	beq.w	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006286:	4b83      	ldr	r3, [pc, #524]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a82      	ldr	r2, [pc, #520]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006290:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006292:	f7fb f9cf 	bl	8001634 <HAL_GetTick>
 8006296:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800629a:	e00b      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fb f9ca 	bl	8001634 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b64      	cmp	r3, #100	@ 0x64
 80062aa:	d903      	bls.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062b2:	e005      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b4:	4b77      	ldr	r3, [pc, #476]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ed      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80062c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d173      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062c8:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062d4:	4053      	eors	r3, r2
 80062d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d015      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062de:	4b6c      	ldr	r3, [pc, #432]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ea:	4b69      	ldr	r3, [pc, #420]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	4a68      	ldr	r2, [pc, #416]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	4b66      	ldr	r3, [pc, #408]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	4a65      	ldr	r2, [pc, #404]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006302:	4a63      	ldr	r2, [pc, #396]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006308:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006316:	d118      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fb f98c 	bl	8001634 <HAL_GetTick>
 800631c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006320:	e00d      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fb f987 	bl	8001634 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800632c:	1ad2      	subs	r2, r2, r3
 800632e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006332:	429a      	cmp	r2, r3
 8006334:	d903      	bls.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800633c:	e005      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800633e:	4b54      	ldr	r3, [pc, #336]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0eb      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800634a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800634e:	2b00      	cmp	r3, #0
 8006350:	d129      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800635a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800635e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006362:	d10e      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006364:	4b4a      	ldr	r3, [pc, #296]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006374:	091a      	lsrs	r2, r3, #4
 8006376:	4b48      	ldr	r3, [pc, #288]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006378:	4013      	ands	r3, r2
 800637a:	4a45      	ldr	r2, [pc, #276]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800637c:	430b      	orrs	r3, r1
 800637e:	6113      	str	r3, [r2, #16]
 8006380:	e005      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006382:	4b43      	ldr	r3, [pc, #268]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	4a42      	ldr	r2, [pc, #264]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006388:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800638c:	6113      	str	r3, [r2, #16]
 800638e:	4b40      	ldr	r3, [pc, #256]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006390:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800639a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639e:	4a3c      	ldr	r2, [pc, #240]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a4:	e008      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f002 0301 	and.w	r3, r2, #1
 80063c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063c8:	2300      	movs	r3, #0
 80063ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f000 808f 	beq.w	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063e0:	2b28      	cmp	r3, #40	@ 0x28
 80063e2:	d871      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063e4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	080064d1 	.word	0x080064d1
 80063f0:	080064c9 	.word	0x080064c9
 80063f4:	080064c9 	.word	0x080064c9
 80063f8:	080064c9 	.word	0x080064c9
 80063fc:	080064c9 	.word	0x080064c9
 8006400:	080064c9 	.word	0x080064c9
 8006404:	080064c9 	.word	0x080064c9
 8006408:	080064c9 	.word	0x080064c9
 800640c:	0800649d 	.word	0x0800649d
 8006410:	080064c9 	.word	0x080064c9
 8006414:	080064c9 	.word	0x080064c9
 8006418:	080064c9 	.word	0x080064c9
 800641c:	080064c9 	.word	0x080064c9
 8006420:	080064c9 	.word	0x080064c9
 8006424:	080064c9 	.word	0x080064c9
 8006428:	080064c9 	.word	0x080064c9
 800642c:	080064b3 	.word	0x080064b3
 8006430:	080064c9 	.word	0x080064c9
 8006434:	080064c9 	.word	0x080064c9
 8006438:	080064c9 	.word	0x080064c9
 800643c:	080064c9 	.word	0x080064c9
 8006440:	080064c9 	.word	0x080064c9
 8006444:	080064c9 	.word	0x080064c9
 8006448:	080064c9 	.word	0x080064c9
 800644c:	080064d1 	.word	0x080064d1
 8006450:	080064c9 	.word	0x080064c9
 8006454:	080064c9 	.word	0x080064c9
 8006458:	080064c9 	.word	0x080064c9
 800645c:	080064c9 	.word	0x080064c9
 8006460:	080064c9 	.word	0x080064c9
 8006464:	080064c9 	.word	0x080064c9
 8006468:	080064c9 	.word	0x080064c9
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064c9 	.word	0x080064c9
 8006474:	080064c9 	.word	0x080064c9
 8006478:	080064c9 	.word	0x080064c9
 800647c:	080064c9 	.word	0x080064c9
 8006480:	080064c9 	.word	0x080064c9
 8006484:	080064c9 	.word	0x080064c9
 8006488:	080064c9 	.word	0x080064c9
 800648c:	080064d1 	.word	0x080064d1
 8006490:	58024400 	.word	0x58024400
 8006494:	58024800 	.word	0x58024800
 8006498:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	3308      	adds	r3, #8
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fdcb 	bl	8008040 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064b0:	e00f      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b6:	3328      	adds	r3, #40	@ 0x28
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fe72 	bl	80081a4 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064da:	4bbf      	ldr	r3, [pc, #764]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e8:	4abb      	ldr	r2, [pc, #748]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ea:	430b      	orrs	r3, r1
 80064ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f002 0302 	and.w	r3, r2, #2
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800650e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d041      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651e:	2b05      	cmp	r3, #5
 8006520:	d824      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006575 	.word	0x08006575
 800652c:	08006541 	.word	0x08006541
 8006530:	08006557 	.word	0x08006557
 8006534:	08006575 	.word	0x08006575
 8006538:	08006575 	.word	0x08006575
 800653c:	08006575 	.word	0x08006575
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	3308      	adds	r3, #8
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fd79 	bl	8008040 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006554:	e00f      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	3328      	adds	r3, #40	@ 0x28
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fe20 	bl	80081a4 <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800656a:	e004      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006572:	e000      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800657e:	4b96      	ldr	r3, [pc, #600]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006582:	f023 0107 	bic.w	r1, r3, #7
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658c:	4a92      	ldr	r2, [pc, #584]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f002 0304 	and.w	r3, r2, #4
 80065a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d044      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	2b05      	cmp	r3, #5
 80065c6:	d825      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065c8:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	0800661d 	.word	0x0800661d
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065ff 	.word	0x080065ff
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	0800661d 	.word	0x0800661d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	3308      	adds	r3, #8
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 fd25 	bl	8008040 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00f      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	3328      	adds	r3, #40	@ 0x28
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fdcc 	bl	80081a4 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800661c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006626:	4b6c      	ldr	r3, [pc, #432]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662a:	f023 0107 	bic.w	r1, r3, #7
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	4a68      	ldr	r2, [pc, #416]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006638:	430b      	orrs	r3, r1
 800663a:	6593      	str	r3, [r2, #88]	@ 0x58
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f002 0320 	and.w	r3, r2, #32
 8006652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006656:	2300      	movs	r3, #0
 8006658:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800665c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d055      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800666e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006672:	d033      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006678:	d82c      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667e:	d02f      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006684:	d826      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800668a:	d02b      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800668c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006690:	d820      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006696:	d012      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800669c:	d81a      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d022      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a6:	d115      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ac:	3308      	adds	r3, #8
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fcc5 	bl	8008040 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066bc:	e015      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c2:	3328      	adds	r3, #40	@ 0x28
 80066c4:	2102      	movs	r1, #2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fd6c 	bl	80081a4 <RCCEx_PLL3_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066d2:	e00a      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066da:	e006      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066dc:	bf00      	nop
 80066de:	e004      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e0:	bf00      	nop
 80066e2:	e002      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e4:	bf00      	nop
 80066e6:	e000      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066f2:	4b39      	ldr	r3, [pc, #228]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006702:	4a35      	ldr	r2, [pc, #212]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6553      	str	r3, [r2, #84]	@ 0x54
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800670e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800671e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006728:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d058      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800673a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800673e:	d033      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006740:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006744:	d82c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	d02f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006750:	d826      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006752:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006756:	d02b      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800675c:	d820      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800675e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006762:	d012      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006768:	d81a      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d022      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006772:	d115      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	3308      	adds	r3, #8
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fc5f 	bl	8008040 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006788:	e015      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2102      	movs	r1, #2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fd06 	bl	80081a4 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800679e:	e00a      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067a8:	bf00      	nop
 80067aa:	e004      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067ac:	bf00      	nop
 80067ae:	e002      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10e      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067be:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ce:	4a02      	ldr	r2, [pc, #8]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d055      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800680c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006810:	d033      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006812:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006816:	d82c      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681c:	d02f      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800681e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006822:	d826      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006824:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006828:	d02b      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800682a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800682e:	d820      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006834:	d012      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800683a:	d81a      	bhi.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d022      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006844:	d115      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	3308      	adds	r3, #8
 800684c:	2100      	movs	r1, #0
 800684e:	4618      	mov	r0, r3
 8006850:	f001 fbf6 	bl	8008040 <RCCEx_PLL2_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800685a:	e015      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	3328      	adds	r3, #40	@ 0x28
 8006862:	2102      	movs	r1, #2
 8006864:	4618      	mov	r0, r3
 8006866:	f001 fc9d 	bl	80081a4 <RCCEx_PLL3_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006870:	e00a      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006878:	e006      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800687a:	bf00      	nop
 800687c:	e004      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800687e:	bf00      	nop
 8006880:	e002      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006882:	bf00      	nop
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006890:	4ba0      	ldr	r3, [pc, #640]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006894:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068a0:	4a9c      	ldr	r2, [pc, #624]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 0308 	and.w	r3, r2, #8
 80068bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068ca:	460b      	mov	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	d01e      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	3328      	adds	r3, #40	@ 0x28
 80068e4:	2102      	movs	r1, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fc5c 	bl	80081a4 <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068f8:	4b86      	ldr	r3, [pc, #536]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006908:	4a82      	ldr	r2, [pc, #520]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800690a:	430b      	orrs	r3, r1
 800690c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f002 0310 	and.w	r3, r2, #16
 800691a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006924:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d01e      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693a:	d10c      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006940:	3328      	adds	r3, #40	@ 0x28
 8006942:	2102      	movs	r1, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fc2d 	bl	80081a4 <RCCEx_PLL3_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006956:	4b6f      	ldr	r3, [pc, #444]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006966:	4a6b      	ldr	r2, [pc, #428]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006968:	430b      	orrs	r3, r1
 800696a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800697a:	2300      	movs	r3, #0
 800697c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800697e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006982:	460b      	mov	r3, r1
 8006984:	4313      	orrs	r3, r2
 8006986:	d03e      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006994:	d022      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800699a:	d81b      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80069a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a4:	d00b      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80069a6:	e015      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	3308      	adds	r3, #8
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fb45 	bl	8008040 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069bc:	e00f      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	3328      	adds	r3, #40	@ 0x28
 80069c4:	2102      	movs	r1, #2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 fbec 	bl	80081a4 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069d2:	e004      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069f6:	4a47      	ldr	r2, [pc, #284]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80069fc:	e003      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a14:	2300      	movs	r3, #0
 8006a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a2e:	d01f      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a34:	d818      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d003      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a40:	d007      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a42:	e011      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a44:	4b33      	ldr	r3, [pc, #204]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	4a32      	ldr	r2, [pc, #200]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a50:	e00f      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a56:	3328      	adds	r3, #40	@ 0x28
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 fba2 	bl	80081a4 <RCCEx_PLL3_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a66:	e004      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a6e:	e000      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a7a:	4b26      	ldr	r3, [pc, #152]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8a:	4a22      	ldr	r2, [pc, #136]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	d034      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d007      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006ac6:	e011      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac8:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00e      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	3308      	adds	r3, #8
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 faae 	bl	8008040 <RCCEx_PLL2_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10d      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0a:	4a02      	ldr	r2, [pc, #8]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b12:	bf00      	nop
 8006b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b2e:	2300      	movs	r3, #0
 8006b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d00c      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b40:	3328      	adds	r3, #40	@ 0x28
 8006b42:	2102      	movs	r1, #2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fb2d 	bl	80081a4 <RCCEx_PLL3_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b64:	2300      	movs	r3, #0
 8006b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b68:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d036      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b7c:	d018      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b82:	d811      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b88:	d014      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8e:	d80b      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b9a:	4bb7      	ldr	r3, [pc, #732]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	4ab6      	ldr	r2, [pc, #728]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ba6:	e008      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bae:	e004      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bc2:	4bad      	ldr	r3, [pc, #692]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bd0:	4aa9      	ldr	r2, [pc, #676]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bd6:	e003      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bee:	2300      	movs	r3, #0
 8006bf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d009      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bfc:	4b9e      	ldr	r3, [pc, #632]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c0a:	4a9b      	ldr	r2, [pc, #620]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c1e:	2300      	movs	r3, #0
 8006c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c2c:	4b92      	ldr	r3, [pc, #584]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c30:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c3a:	4a8f      	ldr	r2, [pc, #572]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c4e:	2300      	movs	r3, #0
 8006c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c56:	460b      	mov	r3, r1
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c5c:	4b86      	ldr	r3, [pc, #536]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	4a85      	ldr	r2, [pc, #532]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c66:	6113      	str	r3, [r2, #16]
 8006c68:	4b83      	ldr	r3, [pc, #524]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c6a:	6919      	ldr	r1, [r3, #16]
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c74:	4a80      	ldr	r2, [pc, #512]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c76:	430b      	orrs	r3, r1
 8006c78:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c90:	460b      	mov	r3, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c96:	4b78      	ldr	r3, [pc, #480]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca4:	4a74      	ldr	r2, [pc, #464]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	4a68      	ldr	r2, [pc, #416]	@ (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d011      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 f99d 	bl	8008040 <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	2100      	movs	r1, #0
 8006d26:	6239      	str	r1, [r7, #32]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d011      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 f97d 	bl	8008040 <RCCEx_PLL2_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	2100      	movs	r1, #0
 8006d66:	61b9      	str	r1, [r7, #24]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d011      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	2102      	movs	r1, #2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 f95d 	bl	8008040 <RCCEx_PLL2_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	2100      	movs	r1, #0
 8006da6:	6139      	str	r1, [r7, #16]
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d011      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbc:	3328      	adds	r3, #40	@ 0x28
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f9ef 	bl	80081a4 <RCCEx_PLL3_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	2100      	movs	r1, #0
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006df2:	460b      	mov	r3, r1
 8006df4:	4313      	orrs	r3, r2
 8006df6:	d011      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	3328      	adds	r3, #40	@ 0x28
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 f9cf 	bl	80081a4 <RCCEx_PLL3_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	2100      	movs	r1, #0
 8006e26:	6039      	str	r1, [r7, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d011      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3c:	3328      	adds	r3, #40	@ 0x28
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f9af 	bl	80081a4 <RCCEx_PLL3_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e5c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e70:	46bd      	mov	sp, r7
 8006e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e76:	bf00      	nop
 8006e78:	58024400 	.word	0x58024400

08006e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b090      	sub	sp, #64	@ 0x40
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	f040 8094 	bne.w	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006e94:	4b9b      	ldr	r3, [pc, #620]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	f200 8087 	bhi.w	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006f11 	.word	0x08006f11
 8006eb8:	08006fad 	.word	0x08006fad
 8006ebc:	08006f39 	.word	0x08006f39
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ec0:	4b90      	ldr	r3, [pc, #576]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ecc:	d108      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 ff62 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006edc:	f000 bc93 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee4:	f000 bc8f 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee8:	4b86      	ldr	r3, [pc, #536]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ef4:	d108      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef6:	f107 0318 	add.w	r3, r7, #24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fca6 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f04:	f000 bc7f 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f0c:	f000 bc7b 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f10:	4b7c      	ldr	r3, [pc, #496]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f1c:	d108      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f1e:	f107 030c 	add.w	r3, r7, #12
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fde6 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2c:	f000 bc6b 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f34:	f000 bc67 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f38:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f42:	4b70      	ldr	r3, [pc, #448]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f54:	4b6b      	ldr	r3, [pc, #428]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f66:	e01f      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f68:	4b66      	ldr	r3, [pc, #408]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f74:	d106      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f7c:	d102      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f7e:	4b63      	ldr	r3, [pc, #396]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f82:	e011      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f84:	4b5f      	ldr	r3, [pc, #380]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f90:	d106      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f98:	d102      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9e:	e003      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006fa4:	f000 bc2f 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fa8:	f000 bc2d 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fac:	4b59      	ldr	r3, [pc, #356]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb0:	f000 bc29 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fb8:	f000 bc25 	b.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	f040 80a7 	bne.w	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006fca:	4b4e      	ldr	r3, [pc, #312]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fce:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006fd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fda:	d054      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fe2:	f200 808b 	bhi.w	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fec:	f000 8083 	beq.w	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ff6:	f200 8081 	bhi.w	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007000:	d02f      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007008:	d878      	bhi.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007016:	d012      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007018:	e070      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800701a:	4b3a      	ldr	r3, [pc, #232]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007026:	d107      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800702c:	4618      	mov	r0, r3
 800702e:	f000 feb5 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007036:	e3e6      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e3e3      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800704a:	d107      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704c:	f107 0318 	add.w	r3, r7, #24
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fbfb 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705a:	e3d4      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007060:	e3d1      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007062:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800706e:	d107      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fd3d 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800707e:	e3c2      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007084:	e3bf      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800708a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007090:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b04      	cmp	r3, #4
 800709a:	d10c      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a2:	4b18      	ldr	r3, [pc, #96]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	4a16      	ldr	r2, [pc, #88]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80070ae:	fa22 f303 	lsr.w	r3, r2, r3
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e01e      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070b6:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c2:	d106      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80070c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ca:	d102      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070cc:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d0:	e010      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070de:	d106      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e6:	d102      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070e8:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070f2:	e388      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070f4:	e387      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070f6:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fa:	e384      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007100:	e381      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
 800710c:	003d0900 	.word	0x003d0900
 8007110:	007a1200 	.word	0x007a1200
 8007114:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007120:	430b      	orrs	r3, r1
 8007122:	f040 809c 	bne.w	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007126:	4b9e      	ldr	r3, [pc, #632]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800712e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007136:	d054      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800713e:	f200 808b 	bhi.w	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007148:	f000 8083 	beq.w	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007152:	f200 8081 	bhi.w	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800715c:	d02f      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007164:	d878      	bhi.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007172:	d012      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007174:	e070      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007176:	4b8a      	ldr	r3, [pc, #552]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007182:	d107      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fe07 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007192:	e338      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007198:	e335      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800719a:	4b81      	ldr	r3, [pc, #516]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a6:	d107      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a8:	f107 0318 	add.w	r3, r7, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fb4d 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b6:	e326      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071bc:	e323      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071be:	4b78      	ldr	r3, [pc, #480]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ca:	d107      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071cc:	f107 030c 	add.w	r3, r7, #12
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fc8f 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071da:	e314      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e0:	e311      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071e2:	4b6f      	ldr	r3, [pc, #444]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80071e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d10c      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80071f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071fe:	4b68      	ldr	r3, [pc, #416]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	4a66      	ldr	r2, [pc, #408]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800720a:	fa22 f303 	lsr.w	r3, r2, r3
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007210:	e01e      	b.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007212:	4b63      	ldr	r3, [pc, #396]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721e:	d106      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007226:	d102      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007228:	4b5f      	ldr	r3, [pc, #380]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800722c:	e010      	b.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800722e:	4b5c      	ldr	r3, [pc, #368]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800723a:	d106      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007242:	d102      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007244:	4b59      	ldr	r3, [pc, #356]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800724e:	e2da      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007250:	e2d9      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007252:	4b57      	ldr	r3, [pc, #348]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007256:	e2d6      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725c:	e2d3      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800725e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007262:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007266:	430b      	orrs	r3, r1
 8007268:	f040 80a7 	bne.w	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800726c:	4b4c      	ldr	r3, [pc, #304]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800726e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007270:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007274:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800727c:	d055      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007284:	f200 8096 	bhi.w	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800728e:	f000 8084 	beq.w	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007298:	f200 808c 	bhi.w	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072a2:	d030      	beq.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072aa:	f200 8083 	bhi.w	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ba:	d012      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80072bc:	e07a      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072be:	4b38      	ldr	r3, [pc, #224]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072ca:	d107      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fd63 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072da:	e294      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e0:	e291      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072e2:	4b2f      	ldr	r3, [pc, #188]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ee:	d107      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f0:	f107 0318 	add.w	r3, r7, #24
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 faa9 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072fe:	e282      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007304:	e27f      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007306:	4b26      	ldr	r3, [pc, #152]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800730e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007312:	d107      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007314:	f107 030c 	add.w	r3, r7, #12
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fbeb 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007322:	e270      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007328:	e26d      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800732a:	4b1d      	ldr	r3, [pc, #116]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800732c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800732e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007334:	4b1a      	ldr	r3, [pc, #104]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d10c      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007346:	4b16      	ldr	r3, [pc, #88]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	08db      	lsrs	r3, r3, #3
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	4a14      	ldr	r2, [pc, #80]	@ (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007352:	fa22 f303 	lsr.w	r3, r2, r3
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007358:	e01e      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800735a:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007366:	d106      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800736e:	d102      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007370:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007374:	e010      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007382:	d106      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800738a:	d102      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007396:	e236      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007398:	e235      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800739a:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800739c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800739e:	e232      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80073a0:	58024400 	.word	0x58024400
 80073a4:	03d09000 	.word	0x03d09000
 80073a8:	003d0900 	.word	0x003d0900
 80073ac:	007a1200 	.word	0x007a1200
 80073b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b8:	e225      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80073ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80073c2:	430b      	orrs	r3, r1
 80073c4:	f040 8085 	bne.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80073c8:	4b9c      	ldr	r3, [pc, #624]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80073ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80073d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073d8:	d06b      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80073da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073e0:	d874      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073e8:	d056      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80073ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073f0:	d86c      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073f8:	d03b      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007400:	d864      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007408:	d021      	beq.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007410:	d85c      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800741e:	d004      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007420:	e054      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007422:	f7fe fb5f 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8007426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007428:	e1ed      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800742a:	4b84      	ldr	r3, [pc, #528]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007436:	d107      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007438:	f107 0318 	add.w	r3, r7, #24
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fa05 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007446:	e1de      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800744c:	e1db      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800744e:	4b7b      	ldr	r3, [pc, #492]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800745a:	d107      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fb47 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800746a:	e1cc      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007470:	e1c9      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007472:	4b72      	ldr	r3, [pc, #456]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b04      	cmp	r3, #4
 800747c:	d109      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800747e:	4b6f      	ldr	r3, [pc, #444]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	08db      	lsrs	r3, r3, #3
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	4a6d      	ldr	r2, [pc, #436]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800748a:	fa22 f303 	lsr.w	r3, r2, r3
 800748e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007490:	e1b9      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007496:	e1b6      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007498:	4b68      	ldr	r3, [pc, #416]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a4:	d102      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80074a6:	4b67      	ldr	r3, [pc, #412]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074aa:	e1ac      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074b0:	e1a9      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074b2:	4b62      	ldr	r3, [pc, #392]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074be:	d102      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80074c0:	4b61      	ldr	r3, [pc, #388]	@ (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c4:	e19f      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ca:	e19c      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e199      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80074d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80074da:	430b      	orrs	r3, r1
 80074dc:	d173      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80074de:	4b57      	ldr	r3, [pc, #348]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ee:	d02f      	beq.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f6:	d863      	bhi.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007504:	d012      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007506:	e05b      	b.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007508:	4b4c      	ldr	r3, [pc, #304]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007516:	f107 0318 	add.w	r3, r7, #24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f996 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007524:	e16f      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752a:	e16c      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800752c:	4b43      	ldr	r3, [pc, #268]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007538:	d107      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fad8 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007548:	e15d      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754e:	e15a      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007550:	4b3a      	ldr	r3, [pc, #232]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007554:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007558:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800755a:	4b38      	ldr	r3, [pc, #224]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b04      	cmp	r3, #4
 8007564:	d10c      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800756c:	4b33      	ldr	r3, [pc, #204]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	08db      	lsrs	r3, r3, #3
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	4a32      	ldr	r2, [pc, #200]	@ (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800757e:	e01e      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007580:	4b2e      	ldr	r3, [pc, #184]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758c:	d106      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800758e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007594:	d102      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007596:	4b2b      	ldr	r3, [pc, #172]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800759a:	e010      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800759c:	4b27      	ldr	r3, [pc, #156]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075a8:	d106      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b0:	d102      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075b2:	4b25      	ldr	r3, [pc, #148]	@ (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80075bc:	e123      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80075be:	e122      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c4:	e11f      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80075c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ca:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80075ce:	430b      	orrs	r3, r1
 80075d0:	d13c      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80075d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d012      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80075ea:	e023      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ec:	4b13      	ldr	r3, [pc, #76]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075f8:	d107      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fbcc 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007608:	e0fd      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760e:	e0fa      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007610:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800761c:	d107      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800761e:	f107 0318 	add.w	r3, r7, #24
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f912 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800762c:	e0eb      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007632:	e0e8      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007638:	e0e5      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
 8007640:	03d09000 	.word	0x03d09000
 8007644:	003d0900 	.word	0x003d0900
 8007648:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800764c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007650:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007654:	430b      	orrs	r3, r1
 8007656:	f040 8085 	bne.w	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800765a:	4b6d      	ldr	r3, [pc, #436]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007662:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800766a:	d06b      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007672:	d874      	bhi.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767a:	d056      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007682:	d86c      	bhi.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800768a:	d03b      	beq.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007692:	d864      	bhi.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800769a:	d021      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076a2:	d85c      	bhi.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80076b2:	e054      	b.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80076b4:	f000 f8b4 	bl	8007820 <HAL_RCCEx_GetD3PCLK1Freq>
 80076b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076ba:	e0a4      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076bc:	4b54      	ldr	r3, [pc, #336]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c8:	d107      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f8bc 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d8:	e095      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076de:	e092      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076e0:	4b4b      	ldr	r3, [pc, #300]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d107      	bne.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f9fe 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076fc:	e083      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007702:	e080      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007704:	4b42      	ldr	r3, [pc, #264]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b04      	cmp	r3, #4
 800770e:	d109      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007710:	4b3f      	ldr	r3, [pc, #252]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	08db      	lsrs	r3, r3, #3
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	4a3e      	ldr	r2, [pc, #248]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007722:	e070      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007728:	e06d      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007736:	d102      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007738:	4b37      	ldr	r3, [pc, #220]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773c:	e063      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007742:	e060      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007744:	4b32      	ldr	r3, [pc, #200]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007750:	d102      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8007752:	4b32      	ldr	r3, [pc, #200]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007756:	e056      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775c:	e053      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007762:	e050      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007768:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800776c:	430b      	orrs	r3, r1
 800776e:	d148      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007770:	4b27      	ldr	r3, [pc, #156]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007778:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007780:	d02a      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007788:	d838      	bhi.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007796:	d00d      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007798:	e030      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800779a:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a6:	d102      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80077a8:	4b1c      	ldr	r3, [pc, #112]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ac:	e02b      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b2:	e028      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077b4:	4b16      	ldr	r3, [pc, #88]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077c0:	d107      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fae8 	bl	8007d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d0:	e019      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d6:	e016      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e6:	f107 0318 	add.w	r3, r7, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f82e 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f4:	e007      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fa:	e004      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007800:	e001      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007808:	4618      	mov	r0, r3
 800780a:	3740      	adds	r7, #64	@ 0x40
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	58024400 	.word	0x58024400
 8007814:	03d09000 	.word	0x03d09000
 8007818:	003d0900 	.word	0x003d0900
 800781c:	007a1200 	.word	0x007a1200

08007820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007824:	f7fe f92e 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	091b      	lsrs	r3, r3, #4
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	4904      	ldr	r1, [pc, #16]	@ (8007848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007840:	4618      	mov	r0, r3
 8007842:	bd80      	pop	{r7, pc}
 8007844:	58024400 	.word	0x58024400
 8007848:	0800c198 	.word	0x0800c198

0800784c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800784c:	b480      	push	{r7}
 800784e:	b089      	sub	sp, #36	@ 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007854:	4ba1      	ldr	r3, [pc, #644]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800785e:	4b9f      	ldr	r3, [pc, #636]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	0b1b      	lsrs	r3, r3, #12
 8007864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800786a:	4b9c      	ldr	r3, [pc, #624]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	091b      	lsrs	r3, r3, #4
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007876:	4b99      	ldr	r3, [pc, #612]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787a:	08db      	lsrs	r3, r3, #3
 800787c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8111 	beq.w	8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b02      	cmp	r3, #2
 800789e:	f000 8083 	beq.w	80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	f200 80a1 	bhi.w	80079ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d056      	beq.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078b6:	e099      	b.n	80079ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078b8:	4b88      	ldr	r3, [pc, #544]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02d      	beq.n	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078c4:	4b85      	ldr	r3, [pc, #532]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	4a84      	ldr	r2, [pc, #528]	@ (8007ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b7b      	ldr	r3, [pc, #492]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800791e:	e087      	b.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b6a      	ldr	r3, [pc, #424]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007962:	e065      	b.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b59      	ldr	r3, [pc, #356]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a03 	vldr	s12, [r7, #12]
 800798a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a6:	e043      	b.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ba:	4b48      	ldr	r3, [pc, #288]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ea:	e021      	b.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fe:	4b37      	ldr	r3, [pc, #220]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a30:	4b2a      	ldr	r3, [pc, #168]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a34:	0a5b      	lsrs	r3, r3, #9
 8007a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a56:	ee17 2a90 	vmov	r2, s15
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	0c1b      	lsrs	r3, r3, #16
 8007a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a84:	ee17 2a90 	vmov	r2, s15
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a8c:	4b13      	ldr	r3, [pc, #76]	@ (8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	0e1b      	lsrs	r3, r3, #24
 8007a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab2:	ee17 2a90 	vmov	r2, s15
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007aba:	e008      	b.n	8007ace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	3724      	adds	r7, #36	@ 0x24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	46000000 	.word	0x46000000
 8007ae8:	4c742400 	.word	0x4c742400
 8007aec:	4a742400 	.word	0x4a742400
 8007af0:	4af42400 	.word	0x4af42400

08007af4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b089      	sub	sp, #36	@ 0x24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007afc:	4ba1      	ldr	r3, [pc, #644]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b06:	4b9f      	ldr	r3, [pc, #636]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	0d1b      	lsrs	r3, r3, #20
 8007b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b12:	4b9c      	ldr	r3, [pc, #624]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b1e:	4b99      	ldr	r3, [pc, #612]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	fb02 f303 	mul.w	r3, r2, r3
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8111 	beq.w	8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	f000 8083 	beq.w	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	f200 80a1 	bhi.w	8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d056      	beq.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b5e:	e099      	b.n	8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b60:	4b88      	ldr	r3, [pc, #544]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d02d      	beq.n	8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b6c:	4b85      	ldr	r3, [pc, #532]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	08db      	lsrs	r3, r3, #3
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	4a84      	ldr	r2, [pc, #528]	@ (8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b7b      	ldr	r3, [pc, #492]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007baa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bc6:	e087      	b.n	8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b6a      	ldr	r3, [pc, #424]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c0a:	e065      	b.n	8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1e:	4b59      	ldr	r3, [pc, #356]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c4e:	e043      	b.n	8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c62:	4b48      	ldr	r3, [pc, #288]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c92:	e021      	b.n	8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca6:	4b37      	ldr	r3, [pc, #220]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cdc:	0a5b      	lsrs	r3, r3, #9
 8007cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cfe:	ee17 2a90 	vmov	r2, s15
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d06:	4b1f      	ldr	r3, [pc, #124]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2c:	ee17 2a90 	vmov	r2, s15
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d34:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d38:	0e1b      	lsrs	r3, r3, #24
 8007d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d5a:	ee17 2a90 	vmov	r2, s15
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	609a      	str	r2, [r3, #8]
}
 8007d76:	bf00      	nop
 8007d78:	3724      	adds	r7, #36	@ 0x24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	58024400 	.word	0x58024400
 8007d88:	03d09000 	.word	0x03d09000
 8007d8c:	46000000 	.word	0x46000000
 8007d90:	4c742400 	.word	0x4c742400
 8007d94:	4a742400 	.word	0x4a742400
 8007d98:	4af42400 	.word	0x4af42400

08007d9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b089      	sub	sp, #36	@ 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da4:	4ba0      	ldr	r3, [pc, #640]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007dae:	4b9e      	ldr	r3, [pc, #632]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007db8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007dba:	4b9b      	ldr	r3, [pc, #620]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007dc4:	4b98      	ldr	r3, [pc, #608]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc8:	08db      	lsrs	r3, r3, #3
 8007dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	ee07 3a90 	vmov	s15, r3
 8007dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ddc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8111 	beq.w	800800a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	f000 8083 	beq.w	8007ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	f200 80a1 	bhi.w	8007f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d056      	beq.n	8007eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e04:	e099      	b.n	8007f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e06:	4b88      	ldr	r3, [pc, #544]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d02d      	beq.n	8007e6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e12:	4b85      	ldr	r3, [pc, #532]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	08db      	lsrs	r3, r3, #3
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	4a83      	ldr	r2, [pc, #524]	@ (800802c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3c:	4b7a      	ldr	r3, [pc, #488]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e50:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e6c:	e087      	b.n	8007f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e78:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e80:	4b69      	ldr	r3, [pc, #420]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e88:	ee07 3a90 	vmov	s15, r3
 8007e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e94:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb0:	e065      	b.n	8007f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008038 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec4:	4b58      	ldr	r3, [pc, #352]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef4:	e043      	b.n	8007f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	ee07 3a90 	vmov	s15, r3
 8007efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f00:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800803c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f08:	4b47      	ldr	r3, [pc, #284]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f38:	e021      	b.n	8007f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f44:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4c:	4b36      	ldr	r3, [pc, #216]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f82:	0a5b      	lsrs	r3, r3, #9
 8007f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa4:	ee17 2a90 	vmov	r2, s15
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007fac:	4b1e      	ldr	r3, [pc, #120]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd2:	ee17 2a90 	vmov	r2, s15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007fda:	4b13      	ldr	r3, [pc, #76]	@ (8008028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fde:	0e1b      	lsrs	r3, r3, #24
 8007fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008000:	ee17 2a90 	vmov	r2, s15
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008008:	e008      	b.n	800801c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	609a      	str	r2, [r3, #8]
}
 800801c:	bf00      	nop
 800801e:	3724      	adds	r7, #36	@ 0x24
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	58024400 	.word	0x58024400
 800802c:	03d09000 	.word	0x03d09000
 8008030:	46000000 	.word	0x46000000
 8008034:	4c742400 	.word	0x4c742400
 8008038:	4a742400 	.word	0x4a742400
 800803c:	4af42400 	.word	0x4af42400

08008040 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800804e:	4b53      	ldr	r3, [pc, #332]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d101      	bne.n	800805e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e099      	b.n	8008192 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800805e:	4b4f      	ldr	r3, [pc, #316]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a4e      	ldr	r2, [pc, #312]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008064:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806a:	f7f9 fae3 	bl	8001634 <HAL_GetTick>
 800806e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008070:	e008      	b.n	8008084 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008072:	f7f9 fadf 	bl	8001634 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d901      	bls.n	8008084 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e086      	b.n	8008192 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008084:	4b45      	ldr	r3, [pc, #276]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f0      	bne.n	8008072 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008090:	4b42      	ldr	r3, [pc, #264]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008094:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	031b      	lsls	r3, r3, #12
 800809e:	493f      	ldr	r1, [pc, #252]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	025b      	lsls	r3, r3, #9
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	3b01      	subs	r3, #1
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	061b      	lsls	r3, r3, #24
 80080d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080d4:	4931      	ldr	r1, [pc, #196]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080da:	4b30      	ldr	r3, [pc, #192]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	492d      	ldr	r1, [pc, #180]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80080ec:	4b2b      	ldr	r3, [pc, #172]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f0:	f023 0220 	bic.w	r2, r3, #32
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	4928      	ldr	r1, [pc, #160]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80080fe:	4b27      	ldr	r3, [pc, #156]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	4a26      	ldr	r2, [pc, #152]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008104:	f023 0310 	bic.w	r3, r3, #16
 8008108:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800810a:	4b24      	ldr	r3, [pc, #144]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 800810c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800810e:	4b24      	ldr	r3, [pc, #144]	@ (80081a0 <RCCEx_PLL2_Config+0x160>)
 8008110:	4013      	ands	r3, r2
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	69d2      	ldr	r2, [r2, #28]
 8008116:	00d2      	lsls	r2, r2, #3
 8008118:	4920      	ldr	r1, [pc, #128]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	4a1e      	ldr	r2, [pc, #120]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008124:	f043 0310 	orr.w	r3, r3, #16
 8008128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008130:	4b1a      	ldr	r3, [pc, #104]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	4a19      	ldr	r2, [pc, #100]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008136:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800813a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800813c:	e00f      	b.n	800815e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d106      	bne.n	8008152 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008144:	4b15      	ldr	r3, [pc, #84]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	4a14      	ldr	r2, [pc, #80]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 800814a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800814e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008150:	e005      	b.n	800815e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008152:	4b12      	ldr	r3, [pc, #72]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	4a11      	ldr	r2, [pc, #68]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008158:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800815c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800815e:	4b0f      	ldr	r3, [pc, #60]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a0e      	ldr	r2, [pc, #56]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008164:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816a:	f7f9 fa63 	bl	8001634 <HAL_GetTick>
 800816e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008170:	e008      	b.n	8008184 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008172:	f7f9 fa5f 	bl	8001634 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e006      	b.n	8008192 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <RCCEx_PLL2_Config+0x15c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	58024400 	.word	0x58024400
 80081a0:	ffff0007 	.word	0xffff0007

080081a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081b2:	4b53      	ldr	r3, [pc, #332]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80081b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d101      	bne.n	80081c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e099      	b.n	80082f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80081c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ce:	f7f9 fa31 	bl	8001634 <HAL_GetTick>
 80081d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081d4:	e008      	b.n	80081e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081d6:	f7f9 fa2d 	bl	8001634 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e086      	b.n	80082f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081e8:	4b45      	ldr	r3, [pc, #276]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f0      	bne.n	80081d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80081f4:	4b42      	ldr	r3, [pc, #264]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	493f      	ldr	r1, [pc, #252]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008204:	4313      	orrs	r3, r2
 8008206:	628b      	str	r3, [r1, #40]	@ 0x28
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	3b01      	subs	r3, #1
 800820e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	3b01      	subs	r3, #1
 8008218:	025b      	lsls	r3, r3, #9
 800821a:	b29b      	uxth	r3, r3
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	3b01      	subs	r3, #1
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	3b01      	subs	r3, #1
 8008232:	061b      	lsls	r3, r3, #24
 8008234:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008238:	4931      	ldr	r1, [pc, #196]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 800823a:	4313      	orrs	r3, r2
 800823c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800823e:	4b30      	ldr	r3, [pc, #192]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	492d      	ldr	r1, [pc, #180]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 800824c:	4313      	orrs	r3, r2
 800824e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008250:	4b2b      	ldr	r3, [pc, #172]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	4928      	ldr	r1, [pc, #160]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 800825e:	4313      	orrs	r3, r2
 8008260:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008262:	4b27      	ldr	r3, [pc, #156]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008266:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800826c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800826e:	4b24      	ldr	r3, [pc, #144]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008272:	4b24      	ldr	r3, [pc, #144]	@ (8008304 <RCCEx_PLL3_Config+0x160>)
 8008274:	4013      	ands	r3, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	69d2      	ldr	r2, [r2, #28]
 800827a:	00d2      	lsls	r2, r2, #3
 800827c:	4920      	ldr	r1, [pc, #128]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008282:	4b1f      	ldr	r3, [pc, #124]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008286:	4a1e      	ldr	r2, [pc, #120]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800828c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008294:	4b1a      	ldr	r3, [pc, #104]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	4a19      	ldr	r2, [pc, #100]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 800829a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800829e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082a0:	e00f      	b.n	80082c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d106      	bne.n	80082b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082a8:	4b15      	ldr	r3, [pc, #84]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ac:	4a14      	ldr	r2, [pc, #80]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082b4:	e005      	b.n	80082c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082b6:	4b12      	ldr	r3, [pc, #72]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ba:	4a11      	ldr	r2, [pc, #68]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ce:	f7f9 f9b1 	bl	8001634 <HAL_GetTick>
 80082d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082d4:	e008      	b.n	80082e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082d6:	f7f9 f9ad 	bl	8001634 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e006      	b.n	80082f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0f0      	beq.n	80082d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	58024400 	.word	0x58024400
 8008304:	ffff0007 	.word	0xffff0007

08008308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e042      	b.n	80083a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7f8 ff15 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2224      	movs	r2, #36	@ 0x24
 8008336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0201 	bic.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 ff22 	bl	800919c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f8b3 	bl	80084c4 <UART_SetConfig>
 800835e:	4603      	mov	r3, r0
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e01b      	b.n	80083a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ffa1 	bl	80092e0 <UART_CheckIdleState>
 800839e:	4603      	mov	r3, r0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	@ 0x28
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d17b      	bne.n	80084ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_UART_Transmit+0x26>
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e074      	b.n	80084bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2221      	movs	r2, #33	@ 0x21
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083e2:	f7f9 f927 	bl	8001634 <HAL_GetTick>
 80083e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008400:	d108      	bne.n	8008414 <HAL_UART_Transmit+0x6c>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e003      	b.n	800841c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800841c:	e030      	b.n	8008480 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	2180      	movs	r1, #128	@ 0x80
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 f803 	bl	8009434 <UART_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e03d      	b.n	80084bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008454:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	3302      	adds	r3, #2
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	e007      	b.n	800846e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	3301      	adds	r3, #1
 800846c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1c8      	bne.n	800841e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2200      	movs	r2, #0
 8008494:	2140      	movs	r1, #64	@ 0x40
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 ffcc 	bl	8009434 <UART_WaitOnFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e006      	b.n	80084bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80084ba:	2302      	movs	r3, #2
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3720      	adds	r7, #32
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c8:	b092      	sub	sp, #72	@ 0x48
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	431a      	orrs	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4bbe      	ldr	r3, [pc, #760]	@ (80087ec <UART_SetConfig+0x328>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084fc:	430b      	orrs	r3, r1
 80084fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4ab3      	ldr	r2, [pc, #716]	@ (80087f0 <UART_SetConfig+0x32c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800852c:	4313      	orrs	r3, r2
 800852e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	4baf      	ldr	r3, [pc, #700]	@ (80087f4 <UART_SetConfig+0x330>)
 8008538:	4013      	ands	r3, r2
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008540:	430b      	orrs	r3, r1
 8008542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854a:	f023 010f 	bic.w	r1, r3, #15
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4aa6      	ldr	r2, [pc, #664]	@ (80087f8 <UART_SetConfig+0x334>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d177      	bne.n	8008654 <UART_SetConfig+0x190>
 8008564:	4ba5      	ldr	r3, [pc, #660]	@ (80087fc <UART_SetConfig+0x338>)
 8008566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008568:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800856c:	2b28      	cmp	r3, #40	@ 0x28
 800856e:	d86d      	bhi.n	800864c <UART_SetConfig+0x188>
 8008570:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0xb4>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	0800861d 	.word	0x0800861d
 800857c:	0800864d 	.word	0x0800864d
 8008580:	0800864d 	.word	0x0800864d
 8008584:	0800864d 	.word	0x0800864d
 8008588:	0800864d 	.word	0x0800864d
 800858c:	0800864d 	.word	0x0800864d
 8008590:	0800864d 	.word	0x0800864d
 8008594:	0800864d 	.word	0x0800864d
 8008598:	08008625 	.word	0x08008625
 800859c:	0800864d 	.word	0x0800864d
 80085a0:	0800864d 	.word	0x0800864d
 80085a4:	0800864d 	.word	0x0800864d
 80085a8:	0800864d 	.word	0x0800864d
 80085ac:	0800864d 	.word	0x0800864d
 80085b0:	0800864d 	.word	0x0800864d
 80085b4:	0800864d 	.word	0x0800864d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800864d 	.word	0x0800864d
 80085c0:	0800864d 	.word	0x0800864d
 80085c4:	0800864d 	.word	0x0800864d
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	0800864d 	.word	0x0800864d
 80085d0:	0800864d 	.word	0x0800864d
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	08008635 	.word	0x08008635
 80085dc:	0800864d 	.word	0x0800864d
 80085e0:	0800864d 	.word	0x0800864d
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	0800864d 	.word	0x0800864d
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	0800863d 	.word	0x0800863d
 80085fc:	0800864d 	.word	0x0800864d
 8008600:	0800864d 	.word	0x0800864d
 8008604:	0800864d 	.word	0x0800864d
 8008608:	0800864d 	.word	0x0800864d
 800860c:	0800864d 	.word	0x0800864d
 8008610:	0800864d 	.word	0x0800864d
 8008614:	0800864d 	.word	0x0800864d
 8008618:	08008645 	.word	0x08008645
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e326      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e322      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e31e      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e31a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800863c:	2320      	movs	r3, #32
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008642:	e316      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008644:	2340      	movs	r3, #64	@ 0x40
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864a:	e312      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800864c:	2380      	movs	r3, #128	@ 0x80
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008652:	e30e      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a69      	ldr	r2, [pc, #420]	@ (8008800 <UART_SetConfig+0x33c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d130      	bne.n	80086c0 <UART_SetConfig+0x1fc>
 800865e:	4b67      	ldr	r3, [pc, #412]	@ (80087fc <UART_SetConfig+0x338>)
 8008660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b05      	cmp	r3, #5
 8008668:	d826      	bhi.n	80086b8 <UART_SetConfig+0x1f4>
 800866a:	a201      	add	r2, pc, #4	@ (adr r2, 8008670 <UART_SetConfig+0x1ac>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008689 	.word	0x08008689
 8008674:	08008691 	.word	0x08008691
 8008678:	08008699 	.word	0x08008699
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086a9 	.word	0x080086a9
 8008684:	080086b1 	.word	0x080086b1
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e2f0      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e2ec      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e2e8      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a6:	e2e4      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086a8:	2320      	movs	r3, #32
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ae:	e2e0      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086b0:	2340      	movs	r3, #64	@ 0x40
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b6:	e2dc      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086b8:	2380      	movs	r3, #128	@ 0x80
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086be:	e2d8      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008804 <UART_SetConfig+0x340>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d130      	bne.n	800872c <UART_SetConfig+0x268>
 80086ca:	4b4c      	ldr	r3, [pc, #304]	@ (80087fc <UART_SetConfig+0x338>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d826      	bhi.n	8008724 <UART_SetConfig+0x260>
 80086d6:	a201      	add	r2, pc, #4	@ (adr r2, 80086dc <UART_SetConfig+0x218>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	080086f5 	.word	0x080086f5
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	08008705 	.word	0x08008705
 80086e8:	0800870d 	.word	0x0800870d
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e2ba      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80086fc:	2304      	movs	r3, #4
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e2b6      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008704:	2308      	movs	r3, #8
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e2b2      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800870c:	2310      	movs	r3, #16
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008712:	e2ae      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008714:	2320      	movs	r3, #32
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871a:	e2aa      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800871c:	2340      	movs	r3, #64	@ 0x40
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008722:	e2a6      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008724:	2380      	movs	r3, #128	@ 0x80
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872a:	e2a2      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a35      	ldr	r2, [pc, #212]	@ (8008808 <UART_SetConfig+0x344>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d130      	bne.n	8008798 <UART_SetConfig+0x2d4>
 8008736:	4b31      	ldr	r3, [pc, #196]	@ (80087fc <UART_SetConfig+0x338>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	2b05      	cmp	r3, #5
 8008740:	d826      	bhi.n	8008790 <UART_SetConfig+0x2cc>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <UART_SetConfig+0x284>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008761 	.word	0x08008761
 800874c:	08008769 	.word	0x08008769
 8008750:	08008771 	.word	0x08008771
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	2300      	movs	r3, #0
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e284      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e280      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e27c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e278      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008780:	2320      	movs	r3, #32
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e274      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008788:	2340      	movs	r3, #64	@ 0x40
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e270      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008790:	2380      	movs	r3, #128	@ 0x80
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e26c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <UART_SetConfig+0x348>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d142      	bne.n	8008828 <UART_SetConfig+0x364>
 80087a2:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <UART_SetConfig+0x338>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d838      	bhi.n	8008820 <UART_SetConfig+0x35c>
 80087ae:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <UART_SetConfig+0x2f0>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087cd 	.word	0x080087cd
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087dd 	.word	0x080087dd
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	08008811 	.word	0x08008811
 80087c8:	08008819 	.word	0x08008819
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e24e      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e24a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e246      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ea:	e242      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80087ec:	cfff69f3 	.word	0xcfff69f3
 80087f0:	58000c00 	.word	0x58000c00
 80087f4:	11fff4ff 	.word	0x11fff4ff
 80087f8:	40011000 	.word	0x40011000
 80087fc:	58024400 	.word	0x58024400
 8008800:	40004400 	.word	0x40004400
 8008804:	40004800 	.word	0x40004800
 8008808:	40004c00 	.word	0x40004c00
 800880c:	40005000 	.word	0x40005000
 8008810:	2320      	movs	r3, #32
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e22c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008818:	2340      	movs	r3, #64	@ 0x40
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e228      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008820:	2380      	movs	r3, #128	@ 0x80
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e224      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4ab1      	ldr	r2, [pc, #708]	@ (8008af4 <UART_SetConfig+0x630>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d176      	bne.n	8008920 <UART_SetConfig+0x45c>
 8008832:	4bb1      	ldr	r3, [pc, #708]	@ (8008af8 <UART_SetConfig+0x634>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800883a:	2b28      	cmp	r3, #40	@ 0x28
 800883c:	d86c      	bhi.n	8008918 <UART_SetConfig+0x454>
 800883e:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0x380>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	080088e9 	.word	0x080088e9
 8008848:	08008919 	.word	0x08008919
 800884c:	08008919 	.word	0x08008919
 8008850:	08008919 	.word	0x08008919
 8008854:	08008919 	.word	0x08008919
 8008858:	08008919 	.word	0x08008919
 800885c:	08008919 	.word	0x08008919
 8008860:	08008919 	.word	0x08008919
 8008864:	080088f1 	.word	0x080088f1
 8008868:	08008919 	.word	0x08008919
 800886c:	08008919 	.word	0x08008919
 8008870:	08008919 	.word	0x08008919
 8008874:	08008919 	.word	0x08008919
 8008878:	08008919 	.word	0x08008919
 800887c:	08008919 	.word	0x08008919
 8008880:	08008919 	.word	0x08008919
 8008884:	080088f9 	.word	0x080088f9
 8008888:	08008919 	.word	0x08008919
 800888c:	08008919 	.word	0x08008919
 8008890:	08008919 	.word	0x08008919
 8008894:	08008919 	.word	0x08008919
 8008898:	08008919 	.word	0x08008919
 800889c:	08008919 	.word	0x08008919
 80088a0:	08008919 	.word	0x08008919
 80088a4:	08008901 	.word	0x08008901
 80088a8:	08008919 	.word	0x08008919
 80088ac:	08008919 	.word	0x08008919
 80088b0:	08008919 	.word	0x08008919
 80088b4:	08008919 	.word	0x08008919
 80088b8:	08008919 	.word	0x08008919
 80088bc:	08008919 	.word	0x08008919
 80088c0:	08008919 	.word	0x08008919
 80088c4:	08008909 	.word	0x08008909
 80088c8:	08008919 	.word	0x08008919
 80088cc:	08008919 	.word	0x08008919
 80088d0:	08008919 	.word	0x08008919
 80088d4:	08008919 	.word	0x08008919
 80088d8:	08008919 	.word	0x08008919
 80088dc:	08008919 	.word	0x08008919
 80088e0:	08008919 	.word	0x08008919
 80088e4:	08008911 	.word	0x08008911
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e1c0      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e1bc      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e1b8      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e1b4      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008908:	2320      	movs	r3, #32
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890e:	e1b0      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008910:	2340      	movs	r3, #64	@ 0x40
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008916:	e1ac      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008918:	2380      	movs	r3, #128	@ 0x80
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891e:	e1a8      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a75      	ldr	r2, [pc, #468]	@ (8008afc <UART_SetConfig+0x638>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d130      	bne.n	800898c <UART_SetConfig+0x4c8>
 800892a:	4b73      	ldr	r3, [pc, #460]	@ (8008af8 <UART_SetConfig+0x634>)
 800892c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b05      	cmp	r3, #5
 8008934:	d826      	bhi.n	8008984 <UART_SetConfig+0x4c0>
 8008936:	a201      	add	r2, pc, #4	@ (adr r2, 800893c <UART_SetConfig+0x478>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008955 	.word	0x08008955
 8008940:	0800895d 	.word	0x0800895d
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e18a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e186      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e182      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008972:	e17e      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897a:	e17a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800897c:	2340      	movs	r3, #64	@ 0x40
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008982:	e176      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008984:	2380      	movs	r3, #128	@ 0x80
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898a:	e172      	b.n	8008c72 <UART_SetConfig+0x7ae>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a5b      	ldr	r2, [pc, #364]	@ (8008b00 <UART_SetConfig+0x63c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d130      	bne.n	80089f8 <UART_SetConfig+0x534>
 8008996:	4b58      	ldr	r3, [pc, #352]	@ (8008af8 <UART_SetConfig+0x634>)
 8008998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	2b05      	cmp	r3, #5
 80089a0:	d826      	bhi.n	80089f0 <UART_SetConfig+0x52c>
 80089a2:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <UART_SetConfig+0x4e4>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089e9 	.word	0x080089e9
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e154      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e150      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e14c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089de:	e148      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089e0:	2320      	movs	r3, #32
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e6:	e144      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089e8:	2340      	movs	r3, #64	@ 0x40
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ee:	e140      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f6:	e13c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a41      	ldr	r2, [pc, #260]	@ (8008b04 <UART_SetConfig+0x640>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	f040 8082 	bne.w	8008b08 <UART_SetConfig+0x644>
 8008a04:	4b3c      	ldr	r3, [pc, #240]	@ (8008af8 <UART_SetConfig+0x634>)
 8008a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a0c:	2b28      	cmp	r3, #40	@ 0x28
 8008a0e:	d86d      	bhi.n	8008aec <UART_SetConfig+0x628>
 8008a10:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <UART_SetConfig+0x554>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008abd 	.word	0x08008abd
 8008a1c:	08008aed 	.word	0x08008aed
 8008a20:	08008aed 	.word	0x08008aed
 8008a24:	08008aed 	.word	0x08008aed
 8008a28:	08008aed 	.word	0x08008aed
 8008a2c:	08008aed 	.word	0x08008aed
 8008a30:	08008aed 	.word	0x08008aed
 8008a34:	08008aed 	.word	0x08008aed
 8008a38:	08008ac5 	.word	0x08008ac5
 8008a3c:	08008aed 	.word	0x08008aed
 8008a40:	08008aed 	.word	0x08008aed
 8008a44:	08008aed 	.word	0x08008aed
 8008a48:	08008aed 	.word	0x08008aed
 8008a4c:	08008aed 	.word	0x08008aed
 8008a50:	08008aed 	.word	0x08008aed
 8008a54:	08008aed 	.word	0x08008aed
 8008a58:	08008acd 	.word	0x08008acd
 8008a5c:	08008aed 	.word	0x08008aed
 8008a60:	08008aed 	.word	0x08008aed
 8008a64:	08008aed 	.word	0x08008aed
 8008a68:	08008aed 	.word	0x08008aed
 8008a6c:	08008aed 	.word	0x08008aed
 8008a70:	08008aed 	.word	0x08008aed
 8008a74:	08008aed 	.word	0x08008aed
 8008a78:	08008ad5 	.word	0x08008ad5
 8008a7c:	08008aed 	.word	0x08008aed
 8008a80:	08008aed 	.word	0x08008aed
 8008a84:	08008aed 	.word	0x08008aed
 8008a88:	08008aed 	.word	0x08008aed
 8008a8c:	08008aed 	.word	0x08008aed
 8008a90:	08008aed 	.word	0x08008aed
 8008a94:	08008aed 	.word	0x08008aed
 8008a98:	08008add 	.word	0x08008add
 8008a9c:	08008aed 	.word	0x08008aed
 8008aa0:	08008aed 	.word	0x08008aed
 8008aa4:	08008aed 	.word	0x08008aed
 8008aa8:	08008aed 	.word	0x08008aed
 8008aac:	08008aed 	.word	0x08008aed
 8008ab0:	08008aed 	.word	0x08008aed
 8008ab4:	08008aed 	.word	0x08008aed
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e0d6      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e0d2      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008acc:	2308      	movs	r3, #8
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e0ce      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e0ca      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e0c6      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008ae4:	2340      	movs	r3, #64	@ 0x40
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e0c2      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008aec:	2380      	movs	r3, #128	@ 0x80
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e0be      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008af4:	40011400 	.word	0x40011400
 8008af8:	58024400 	.word	0x58024400
 8008afc:	40007800 	.word	0x40007800
 8008b00:	40007c00 	.word	0x40007c00
 8008b04:	40011800 	.word	0x40011800
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4aad      	ldr	r2, [pc, #692]	@ (8008dc4 <UART_SetConfig+0x900>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d176      	bne.n	8008c00 <UART_SetConfig+0x73c>
 8008b12:	4bad      	ldr	r3, [pc, #692]	@ (8008dc8 <UART_SetConfig+0x904>)
 8008b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b1a:	2b28      	cmp	r3, #40	@ 0x28
 8008b1c:	d86c      	bhi.n	8008bf8 <UART_SetConfig+0x734>
 8008b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <UART_SetConfig+0x660>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008bc9 	.word	0x08008bc9
 8008b28:	08008bf9 	.word	0x08008bf9
 8008b2c:	08008bf9 	.word	0x08008bf9
 8008b30:	08008bf9 	.word	0x08008bf9
 8008b34:	08008bf9 	.word	0x08008bf9
 8008b38:	08008bf9 	.word	0x08008bf9
 8008b3c:	08008bf9 	.word	0x08008bf9
 8008b40:	08008bf9 	.word	0x08008bf9
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bf9 	.word	0x08008bf9
 8008b4c:	08008bf9 	.word	0x08008bf9
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008bf9 	.word	0x08008bf9
 8008b58:	08008bf9 	.word	0x08008bf9
 8008b5c:	08008bf9 	.word	0x08008bf9
 8008b60:	08008bf9 	.word	0x08008bf9
 8008b64:	08008bd9 	.word	0x08008bd9
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008bf9 	.word	0x08008bf9
 8008b70:	08008bf9 	.word	0x08008bf9
 8008b74:	08008bf9 	.word	0x08008bf9
 8008b78:	08008bf9 	.word	0x08008bf9
 8008b7c:	08008bf9 	.word	0x08008bf9
 8008b80:	08008bf9 	.word	0x08008bf9
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008bf9 	.word	0x08008bf9
 8008b8c:	08008bf9 	.word	0x08008bf9
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008bf9 	.word	0x08008bf9
 8008b98:	08008bf9 	.word	0x08008bf9
 8008b9c:	08008bf9 	.word	0x08008bf9
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008bf9 	.word	0x08008bf9
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008bf9 	.word	0x08008bf9
 8008bbc:	08008bf9 	.word	0x08008bf9
 8008bc0:	08008bf9 	.word	0x08008bf9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e050      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e04c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e048      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e044      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e040      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008bf0:	2340      	movs	r3, #64	@ 0x40
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e03c      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e038      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a71      	ldr	r2, [pc, #452]	@ (8008dcc <UART_SetConfig+0x908>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d130      	bne.n	8008c6c <UART_SetConfig+0x7a8>
 8008c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8008dc8 <UART_SetConfig+0x904>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d826      	bhi.n	8008c64 <UART_SetConfig+0x7a0>
 8008c16:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <UART_SetConfig+0x758>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c3d 	.word	0x08008c3d
 8008c24:	08008c45 	.word	0x08008c45
 8008c28:	08008c4d 	.word	0x08008c4d
 8008c2c:	08008c55 	.word	0x08008c55
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	2302      	movs	r3, #2
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e01a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e016      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c44:	2308      	movs	r3, #8
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e012      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e00e      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c54:	2320      	movs	r3, #32
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e00a      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c5c:	2340      	movs	r3, #64	@ 0x40
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e006      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c64:	2380      	movs	r3, #128	@ 0x80
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e002      	b.n	8008c72 <UART_SetConfig+0x7ae>
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a55      	ldr	r2, [pc, #340]	@ (8008dcc <UART_SetConfig+0x908>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	f040 80f8 	bne.w	8008e6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	dc46      	bgt.n	8008d14 <UART_SetConfig+0x850>
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	db75      	blt.n	8008d76 <UART_SetConfig+0x8b2>
 8008c8a:	3b02      	subs	r3, #2
 8008c8c:	2b1e      	cmp	r3, #30
 8008c8e:	d872      	bhi.n	8008d76 <UART_SetConfig+0x8b2>
 8008c90:	a201      	add	r2, pc, #4	@ (adr r2, 8008c98 <UART_SetConfig+0x7d4>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008d1b 	.word	0x08008d1b
 8008c9c:	08008d77 	.word	0x08008d77
 8008ca0:	08008d23 	.word	0x08008d23
 8008ca4:	08008d77 	.word	0x08008d77
 8008ca8:	08008d77 	.word	0x08008d77
 8008cac:	08008d77 	.word	0x08008d77
 8008cb0:	08008d33 	.word	0x08008d33
 8008cb4:	08008d77 	.word	0x08008d77
 8008cb8:	08008d77 	.word	0x08008d77
 8008cbc:	08008d77 	.word	0x08008d77
 8008cc0:	08008d77 	.word	0x08008d77
 8008cc4:	08008d77 	.word	0x08008d77
 8008cc8:	08008d77 	.word	0x08008d77
 8008ccc:	08008d77 	.word	0x08008d77
 8008cd0:	08008d43 	.word	0x08008d43
 8008cd4:	08008d77 	.word	0x08008d77
 8008cd8:	08008d77 	.word	0x08008d77
 8008cdc:	08008d77 	.word	0x08008d77
 8008ce0:	08008d77 	.word	0x08008d77
 8008ce4:	08008d77 	.word	0x08008d77
 8008ce8:	08008d77 	.word	0x08008d77
 8008cec:	08008d77 	.word	0x08008d77
 8008cf0:	08008d77 	.word	0x08008d77
 8008cf4:	08008d77 	.word	0x08008d77
 8008cf8:	08008d77 	.word	0x08008d77
 8008cfc:	08008d77 	.word	0x08008d77
 8008d00:	08008d77 	.word	0x08008d77
 8008d04:	08008d77 	.word	0x08008d77
 8008d08:	08008d77 	.word	0x08008d77
 8008d0c:	08008d77 	.word	0x08008d77
 8008d10:	08008d69 	.word	0x08008d69
 8008d14:	2b40      	cmp	r3, #64	@ 0x40
 8008d16:	d02a      	beq.n	8008d6e <UART_SetConfig+0x8aa>
 8008d18:	e02d      	b.n	8008d76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d1a:	f7fe fd81 	bl	8007820 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d20:	e02f      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fd90 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	e027      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d32:	f107 0318 	add.w	r3, r7, #24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fedc 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d40:	e01f      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d42:	4b21      	ldr	r3, [pc, #132]	@ (8008dc8 <UART_SetConfig+0x904>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc8 <UART_SetConfig+0x904>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	08db      	lsrs	r3, r3, #3
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd0 <UART_SetConfig+0x90c>)
 8008d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d60:	e00f      	b.n	8008d82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d62:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd0 <UART_SetConfig+0x90c>)
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d66:	e00c      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d68:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <UART_SetConfig+0x910>)
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e009      	b.n	8008d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d74:	e005      	b.n	8008d82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 81ee 	beq.w	8009166 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8e:	4a12      	ldr	r2, [pc, #72]	@ (8008dd8 <UART_SetConfig+0x914>)
 8008d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d9c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d305      	bcc.n	8008dba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d910      	bls.n	8008ddc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008dc0:	e1d1      	b.n	8009166 <UART_SetConfig+0xca2>
 8008dc2:	bf00      	nop
 8008dc4:	40011c00 	.word	0x40011c00
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	58000c00 	.word	0x58000c00
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	0800c1a8 	.word	0x0800c1a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dde:	2200      	movs	r2, #0
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	60fa      	str	r2, [r7, #12]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de8:	4ac0      	ldr	r2, [pc, #768]	@ (80090ec <UART_SetConfig+0xc28>)
 8008dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2200      	movs	r2, #0
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dfe:	f7f7 fadf 	bl	80003c0 <__aeabi_uldivmod>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	020b      	lsls	r3, r1, #8
 8008e14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e18:	0202      	lsls	r2, r0, #8
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	6849      	ldr	r1, [r1, #4]
 8008e1e:	0849      	lsrs	r1, r1, #1
 8008e20:	2000      	movs	r0, #0
 8008e22:	460c      	mov	r4, r1
 8008e24:	4605      	mov	r5, r0
 8008e26:	eb12 0804 	adds.w	r8, r2, r4
 8008e2a:	eb43 0905 	adc.w	r9, r3, r5
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	469a      	mov	sl, r3
 8008e36:	4693      	mov	fp, r2
 8008e38:	4652      	mov	r2, sl
 8008e3a:	465b      	mov	r3, fp
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 fabe 	bl	80003c0 <__aeabi_uldivmod>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4613      	mov	r3, r2
 8008e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e52:	d308      	bcc.n	8008e66 <UART_SetConfig+0x9a2>
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e5a:	d204      	bcs.n	8008e66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e62:	60da      	str	r2, [r3, #12]
 8008e64:	e17f      	b.n	8009166 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e6c:	e17b      	b.n	8009166 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e76:	f040 80bd 	bne.w	8008ff4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	dc48      	bgt.n	8008f14 <UART_SetConfig+0xa50>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	db7b      	blt.n	8008f7e <UART_SetConfig+0xaba>
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d879      	bhi.n	8008f7e <UART_SetConfig+0xaba>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x9cc>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008f1b 	.word	0x08008f1b
 8008e94:	08008f23 	.word	0x08008f23
 8008e98:	08008f7f 	.word	0x08008f7f
 8008e9c:	08008f7f 	.word	0x08008f7f
 8008ea0:	08008f2b 	.word	0x08008f2b
 8008ea4:	08008f7f 	.word	0x08008f7f
 8008ea8:	08008f7f 	.word	0x08008f7f
 8008eac:	08008f7f 	.word	0x08008f7f
 8008eb0:	08008f3b 	.word	0x08008f3b
 8008eb4:	08008f7f 	.word	0x08008f7f
 8008eb8:	08008f7f 	.word	0x08008f7f
 8008ebc:	08008f7f 	.word	0x08008f7f
 8008ec0:	08008f7f 	.word	0x08008f7f
 8008ec4:	08008f7f 	.word	0x08008f7f
 8008ec8:	08008f7f 	.word	0x08008f7f
 8008ecc:	08008f7f 	.word	0x08008f7f
 8008ed0:	08008f4b 	.word	0x08008f4b
 8008ed4:	08008f7f 	.word	0x08008f7f
 8008ed8:	08008f7f 	.word	0x08008f7f
 8008edc:	08008f7f 	.word	0x08008f7f
 8008ee0:	08008f7f 	.word	0x08008f7f
 8008ee4:	08008f7f 	.word	0x08008f7f
 8008ee8:	08008f7f 	.word	0x08008f7f
 8008eec:	08008f7f 	.word	0x08008f7f
 8008ef0:	08008f7f 	.word	0x08008f7f
 8008ef4:	08008f7f 	.word	0x08008f7f
 8008ef8:	08008f7f 	.word	0x08008f7f
 8008efc:	08008f7f 	.word	0x08008f7f
 8008f00:	08008f7f 	.word	0x08008f7f
 8008f04:	08008f7f 	.word	0x08008f7f
 8008f08:	08008f7f 	.word	0x08008f7f
 8008f0c:	08008f7f 	.word	0x08008f7f
 8008f10:	08008f71 	.word	0x08008f71
 8008f14:	2b40      	cmp	r3, #64	@ 0x40
 8008f16:	d02e      	beq.n	8008f76 <UART_SetConfig+0xab2>
 8008f18:	e031      	b.n	8008f7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f1a:	f7fc fde3 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8008f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f20:	e033      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f22:	f7fc fdf5 	bl	8005b10 <HAL_RCC_GetPCLK2Freq>
 8008f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f28:	e02f      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fc8c 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f38:	e027      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3a:	f107 0318 	add.w	r3, r7, #24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fdd8 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f48:	e01f      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f4a:	4b69      	ldr	r3, [pc, #420]	@ (80090f0 <UART_SetConfig+0xc2c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f56:	4b66      	ldr	r3, [pc, #408]	@ (80090f0 <UART_SetConfig+0xc2c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	08db      	lsrs	r3, r3, #3
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	4a64      	ldr	r2, [pc, #400]	@ (80090f4 <UART_SetConfig+0xc30>)
 8008f62:	fa22 f303 	lsr.w	r3, r2, r3
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f68:	e00f      	b.n	8008f8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008f6a:	4b62      	ldr	r3, [pc, #392]	@ (80090f4 <UART_SetConfig+0xc30>)
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6e:	e00c      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f70:	4b61      	ldr	r3, [pc, #388]	@ (80090f8 <UART_SetConfig+0xc34>)
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e009      	b.n	8008f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7c:	e005      	b.n	8008f8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80ea 	beq.w	8009166 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f96:	4a55      	ldr	r2, [pc, #340]	@ (80090ec <UART_SetConfig+0xc28>)
 8008f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fa4:	005a      	lsls	r2, r3, #1
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	441a      	add	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d916      	bls.n	8008fec <UART_SetConfig+0xb28>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc4:	d212      	bcs.n	8008fec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f023 030f 	bic.w	r3, r3, #15
 8008fce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e0bc      	b.n	8009166 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ff2:	e0b8      	b.n	8009166 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	dc4b      	bgt.n	8009094 <UART_SetConfig+0xbd0>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f2c0 8087 	blt.w	8009110 <UART_SetConfig+0xc4c>
 8009002:	2b20      	cmp	r3, #32
 8009004:	f200 8084 	bhi.w	8009110 <UART_SetConfig+0xc4c>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <UART_SetConfig+0xb4c>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	0800909b 	.word	0x0800909b
 8009014:	080090a3 	.word	0x080090a3
 8009018:	08009111 	.word	0x08009111
 800901c:	08009111 	.word	0x08009111
 8009020:	080090ab 	.word	0x080090ab
 8009024:	08009111 	.word	0x08009111
 8009028:	08009111 	.word	0x08009111
 800902c:	08009111 	.word	0x08009111
 8009030:	080090bb 	.word	0x080090bb
 8009034:	08009111 	.word	0x08009111
 8009038:	08009111 	.word	0x08009111
 800903c:	08009111 	.word	0x08009111
 8009040:	08009111 	.word	0x08009111
 8009044:	08009111 	.word	0x08009111
 8009048:	08009111 	.word	0x08009111
 800904c:	08009111 	.word	0x08009111
 8009050:	080090cb 	.word	0x080090cb
 8009054:	08009111 	.word	0x08009111
 8009058:	08009111 	.word	0x08009111
 800905c:	08009111 	.word	0x08009111
 8009060:	08009111 	.word	0x08009111
 8009064:	08009111 	.word	0x08009111
 8009068:	08009111 	.word	0x08009111
 800906c:	08009111 	.word	0x08009111
 8009070:	08009111 	.word	0x08009111
 8009074:	08009111 	.word	0x08009111
 8009078:	08009111 	.word	0x08009111
 800907c:	08009111 	.word	0x08009111
 8009080:	08009111 	.word	0x08009111
 8009084:	08009111 	.word	0x08009111
 8009088:	08009111 	.word	0x08009111
 800908c:	08009111 	.word	0x08009111
 8009090:	08009103 	.word	0x08009103
 8009094:	2b40      	cmp	r3, #64	@ 0x40
 8009096:	d037      	beq.n	8009108 <UART_SetConfig+0xc44>
 8009098:	e03a      	b.n	8009110 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800909a:	f7fc fd23 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 800909e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090a0:	e03c      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090a2:	f7fc fd35 	bl	8005b10 <HAL_RCC_GetPCLK2Freq>
 80090a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090a8:	e038      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fbcc 	bl	800784c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090b8:	e030      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ba:	f107 0318 	add.w	r3, r7, #24
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fd18 	bl	8007af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c8:	e028      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <UART_SetConfig+0xc2c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d012      	beq.n	80090fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090d6:	4b06      	ldr	r3, [pc, #24]	@ (80090f0 <UART_SetConfig+0xc2c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	08db      	lsrs	r3, r3, #3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	4a04      	ldr	r2, [pc, #16]	@ (80090f4 <UART_SetConfig+0xc30>)
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090e8:	e018      	b.n	800911c <UART_SetConfig+0xc58>
 80090ea:	bf00      	nop
 80090ec:	0800c1a8 	.word	0x0800c1a8
 80090f0:	58024400 	.word	0x58024400
 80090f4:	03d09000 	.word	0x03d09000
 80090f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80090fc:	4b24      	ldr	r3, [pc, #144]	@ (8009190 <UART_SetConfig+0xccc>)
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009100:	e00c      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009102:	4b24      	ldr	r3, [pc, #144]	@ (8009194 <UART_SetConfig+0xcd0>)
 8009104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009106:	e009      	b.n	800911c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910e:	e005      	b.n	800911c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800911a:	bf00      	nop
    }

    if (pclk != 0U)
 800911c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d021      	beq.n	8009166 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009126:	4a1c      	ldr	r2, [pc, #112]	@ (8009198 <UART_SetConfig+0xcd4>)
 8009128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800912c:	461a      	mov	r2, r3
 800912e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009130:	fbb3 f2f2 	udiv	r2, r3, r2
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	441a      	add	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	fbb2 f3f3 	udiv	r3, r2, r3
 8009144:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009148:	2b0f      	cmp	r3, #15
 800914a:	d909      	bls.n	8009160 <UART_SetConfig+0xc9c>
 800914c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009152:	d205      	bcs.n	8009160 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	b29a      	uxth	r2, r3
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60da      	str	r2, [r3, #12]
 800915e:	e002      	b.n	8009166 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2201      	movs	r2, #1
 800916a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2201      	movs	r2, #1
 8009172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2200      	movs	r2, #0
 800917a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2200      	movs	r2, #0
 8009180:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009182:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009186:	4618      	mov	r0, r3
 8009188:	3748      	adds	r7, #72	@ 0x48
 800918a:	46bd      	mov	sp, r7
 800918c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009190:	03d09000 	.word	0x03d09000
 8009194:	003d0900 	.word	0x003d0900
 8009198:	0800c1a8 	.word	0x0800c1a8

0800919c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01a      	beq.n	80092b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800929a:	d10a      	bne.n	80092b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	605a      	str	r2, [r3, #4]
  }
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b098      	sub	sp, #96	@ 0x60
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092f0:	f7f8 f9a0 	bl	8001634 <HAL_GetTick>
 80092f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b08      	cmp	r3, #8
 8009302:	d12f      	bne.n	8009364 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800930c:	2200      	movs	r2, #0
 800930e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f88e 	bl	8009434 <UART_WaitOnFlagUntilTimeout>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d022      	beq.n	8009364 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800932c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009332:	653b      	str	r3, [r7, #80]	@ 0x50
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800933c:	647b      	str	r3, [r7, #68]	@ 0x44
 800933e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e6      	bne.n	800931e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2220      	movs	r2, #32
 8009354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e063      	b.n	800942c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d149      	bne.n	8009406 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009372:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800937a:	2200      	movs	r2, #0
 800937c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f857 	bl	8009434 <UART_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d03c      	beq.n	8009406 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	623b      	str	r3, [r7, #32]
   return(result);
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e6      	bne.n	800938c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093de:	61fa      	str	r2, [r7, #28]
 80093e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	69b9      	ldr	r1, [r7, #24]
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	617b      	str	r3, [r7, #20]
   return(result);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e012      	b.n	800942c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3758      	adds	r7, #88	@ 0x58
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	4613      	mov	r3, r2
 8009442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009444:	e04f      	b.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944c:	d04b      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944e:	f7f8 f8f1 	bl	8001634 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	429a      	cmp	r2, r3
 800945c:	d302      	bcc.n	8009464 <UART_WaitOnFlagUntilTimeout+0x30>
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e04e      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d037      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b80      	cmp	r3, #128	@ 0x80
 800947a:	d034      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b40      	cmp	r3, #64	@ 0x40
 8009480:	d031      	beq.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f003 0308 	and.w	r3, r3, #8
 800948c:	2b08      	cmp	r3, #8
 800948e:	d110      	bne.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2208      	movs	r2, #8
 8009496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f839 	bl	8009510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2208      	movs	r2, #8
 80094a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e029      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094c0:	d111      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f81f 	bl	8009510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e00f      	b.n	8009506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4013      	ands	r3, r2
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	bf0c      	ite	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	2300      	movne	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	429a      	cmp	r2, r3
 8009502:	d0a0      	beq.n	8009446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b095      	sub	sp, #84	@ 0x54
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800952c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009536:	643b      	str	r3, [r7, #64]	@ 0x40
 8009538:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800953c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e6      	bne.n	8009518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	61fb      	str	r3, [r7, #28]
   return(result);
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	4b1e      	ldr	r3, [pc, #120]	@ (80095d8 <UART_EndRxTransfer+0xc8>)
 800955e:	4013      	ands	r3, r2
 8009560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800956a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800956c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e5      	bne.n	800954a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d118      	bne.n	80095b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	60bb      	str	r3, [r7, #8]
   return(result);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f023 0310 	bic.w	r3, r3, #16
 800959a:	647b      	str	r3, [r7, #68]	@ 0x44
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6979      	ldr	r1, [r7, #20]
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	613b      	str	r3, [r7, #16]
   return(result);
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095cc:	bf00      	nop
 80095ce:	3754      	adds	r7, #84	@ 0x54
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	effffffe 	.word	0xeffffffe

080095dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e027      	b.n	8009642 <HAL_UARTEx_DisableFifoMode+0x66>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2224      	movs	r2, #36	@ 0x24
 80095fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009662:	2302      	movs	r3, #2
 8009664:	e02d      	b.n	80096c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2224      	movs	r2, #36	@ 0x24
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0201 	bic.w	r2, r2, #1
 800968c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f850 	bl	8009748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096de:	2302      	movs	r3, #2
 80096e0:	e02d      	b.n	800973e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2224      	movs	r2, #36	@ 0x24
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0201 	bic.w	r2, r2, #1
 8009708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f812 	bl	8009748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2220      	movs	r2, #32
 8009730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009768:	e031      	b.n	80097ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800976a:	2310      	movs	r3, #16
 800976c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800976e:	2310      	movs	r3, #16
 8009770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	0e5b      	lsrs	r3, r3, #25
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	0f5b      	lsrs	r3, r3, #29
 800978a:	b2db      	uxtb	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	7b3a      	ldrb	r2, [r7, #12]
 8009796:	4911      	ldr	r1, [pc, #68]	@ (80097dc <UARTEx_SetNbDataToProcess+0x94>)
 8009798:	5c8a      	ldrb	r2, [r1, r2]
 800979a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800979e:	7b3a      	ldrb	r2, [r7, #12]
 80097a0:	490f      	ldr	r1, [pc, #60]	@ (80097e0 <UARTEx_SetNbDataToProcess+0x98>)
 80097a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	7b7a      	ldrb	r2, [r7, #13]
 80097b4:	4909      	ldr	r1, [pc, #36]	@ (80097dc <UARTEx_SetNbDataToProcess+0x94>)
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
 80097b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097bc:	7b7a      	ldrb	r2, [r7, #13]
 80097be:	4908      	ldr	r1, [pc, #32]	@ (80097e0 <UARTEx_SetNbDataToProcess+0x98>)
 80097c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097ce:	bf00      	nop
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	0800c1c0 	.word	0x0800c1c0
 80097e0:	0800c1c8 	.word	0x0800c1c8

080097e4 <__cvt>:
 80097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e6:	ed2d 8b02 	vpush	{d8}
 80097ea:	eeb0 8b40 	vmov.f64	d8, d0
 80097ee:	b085      	sub	sp, #20
 80097f0:	4617      	mov	r7, r2
 80097f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80097f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097f6:	ee18 2a90 	vmov	r2, s17
 80097fa:	f025 0520 	bic.w	r5, r5, #32
 80097fe:	2a00      	cmp	r2, #0
 8009800:	bfb6      	itet	lt
 8009802:	222d      	movlt	r2, #45	@ 0x2d
 8009804:	2200      	movge	r2, #0
 8009806:	eeb1 8b40 	vneglt.f64	d8, d0
 800980a:	2d46      	cmp	r5, #70	@ 0x46
 800980c:	460c      	mov	r4, r1
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	d004      	beq.n	800981c <__cvt+0x38>
 8009812:	2d45      	cmp	r5, #69	@ 0x45
 8009814:	d100      	bne.n	8009818 <__cvt+0x34>
 8009816:	3401      	adds	r4, #1
 8009818:	2102      	movs	r1, #2
 800981a:	e000      	b.n	800981e <__cvt+0x3a>
 800981c:	2103      	movs	r1, #3
 800981e:	ab03      	add	r3, sp, #12
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	ab02      	add	r3, sp, #8
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	4622      	mov	r2, r4
 8009828:	4633      	mov	r3, r6
 800982a:	eeb0 0b48 	vmov.f64	d0, d8
 800982e:	f000 ff23 	bl	800a678 <_dtoa_r>
 8009832:	2d47      	cmp	r5, #71	@ 0x47
 8009834:	d114      	bne.n	8009860 <__cvt+0x7c>
 8009836:	07fb      	lsls	r3, r7, #31
 8009838:	d50a      	bpl.n	8009850 <__cvt+0x6c>
 800983a:	1902      	adds	r2, r0, r4
 800983c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009844:	bf08      	it	eq
 8009846:	9203      	streq	r2, [sp, #12]
 8009848:	2130      	movs	r1, #48	@ 0x30
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	4293      	cmp	r3, r2
 800984e:	d319      	bcc.n	8009884 <__cvt+0xa0>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009854:	1a1b      	subs	r3, r3, r0
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	b005      	add	sp, #20
 800985a:	ecbd 8b02 	vpop	{d8}
 800985e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009860:	2d46      	cmp	r5, #70	@ 0x46
 8009862:	eb00 0204 	add.w	r2, r0, r4
 8009866:	d1e9      	bne.n	800983c <__cvt+0x58>
 8009868:	7803      	ldrb	r3, [r0, #0]
 800986a:	2b30      	cmp	r3, #48	@ 0x30
 800986c:	d107      	bne.n	800987e <__cvt+0x9a>
 800986e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	bf1c      	itt	ne
 8009878:	f1c4 0401 	rsbne	r4, r4, #1
 800987c:	6034      	strne	r4, [r6, #0]
 800987e:	6833      	ldr	r3, [r6, #0]
 8009880:	441a      	add	r2, r3
 8009882:	e7db      	b.n	800983c <__cvt+0x58>
 8009884:	1c5c      	adds	r4, r3, #1
 8009886:	9403      	str	r4, [sp, #12]
 8009888:	7019      	strb	r1, [r3, #0]
 800988a:	e7de      	b.n	800984a <__cvt+0x66>

0800988c <__exponent>:
 800988c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800988e:	2900      	cmp	r1, #0
 8009890:	bfba      	itte	lt
 8009892:	4249      	neglt	r1, r1
 8009894:	232d      	movlt	r3, #45	@ 0x2d
 8009896:	232b      	movge	r3, #43	@ 0x2b
 8009898:	2909      	cmp	r1, #9
 800989a:	7002      	strb	r2, [r0, #0]
 800989c:	7043      	strb	r3, [r0, #1]
 800989e:	dd29      	ble.n	80098f4 <__exponent+0x68>
 80098a0:	f10d 0307 	add.w	r3, sp, #7
 80098a4:	461d      	mov	r5, r3
 80098a6:	270a      	movs	r7, #10
 80098a8:	461a      	mov	r2, r3
 80098aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80098ae:	fb07 1416 	mls	r4, r7, r6, r1
 80098b2:	3430      	adds	r4, #48	@ 0x30
 80098b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098b8:	460c      	mov	r4, r1
 80098ba:	2c63      	cmp	r4, #99	@ 0x63
 80098bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80098c0:	4631      	mov	r1, r6
 80098c2:	dcf1      	bgt.n	80098a8 <__exponent+0x1c>
 80098c4:	3130      	adds	r1, #48	@ 0x30
 80098c6:	1e94      	subs	r4, r2, #2
 80098c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098cc:	1c41      	adds	r1, r0, #1
 80098ce:	4623      	mov	r3, r4
 80098d0:	42ab      	cmp	r3, r5
 80098d2:	d30a      	bcc.n	80098ea <__exponent+0x5e>
 80098d4:	f10d 0309 	add.w	r3, sp, #9
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	42ac      	cmp	r4, r5
 80098dc:	bf88      	it	hi
 80098de:	2300      	movhi	r3, #0
 80098e0:	3302      	adds	r3, #2
 80098e2:	4403      	add	r3, r0
 80098e4:	1a18      	subs	r0, r3, r0
 80098e6:	b003      	add	sp, #12
 80098e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80098ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80098f2:	e7ed      	b.n	80098d0 <__exponent+0x44>
 80098f4:	2330      	movs	r3, #48	@ 0x30
 80098f6:	3130      	adds	r1, #48	@ 0x30
 80098f8:	7083      	strb	r3, [r0, #2]
 80098fa:	70c1      	strb	r1, [r0, #3]
 80098fc:	1d03      	adds	r3, r0, #4
 80098fe:	e7f1      	b.n	80098e4 <__exponent+0x58>

08009900 <_printf_float>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	b08d      	sub	sp, #52	@ 0x34
 8009906:	460c      	mov	r4, r1
 8009908:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800990c:	4616      	mov	r6, r2
 800990e:	461f      	mov	r7, r3
 8009910:	4605      	mov	r5, r0
 8009912:	f000 fdaf 	bl	800a474 <_localeconv_r>
 8009916:	f8d0 b000 	ldr.w	fp, [r0]
 800991a:	4658      	mov	r0, fp
 800991c:	f7f6 fd48 	bl	80003b0 <strlen>
 8009920:	2300      	movs	r3, #0
 8009922:	930a      	str	r3, [sp, #40]	@ 0x28
 8009924:	f8d8 3000 	ldr.w	r3, [r8]
 8009928:	f894 9018 	ldrb.w	r9, [r4, #24]
 800992c:	6822      	ldr	r2, [r4, #0]
 800992e:	9005      	str	r0, [sp, #20]
 8009930:	3307      	adds	r3, #7
 8009932:	f023 0307 	bic.w	r3, r3, #7
 8009936:	f103 0108 	add.w	r1, r3, #8
 800993a:	f8c8 1000 	str.w	r1, [r8]
 800993e:	ed93 0b00 	vldr	d0, [r3]
 8009942:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009ba0 <_printf_float+0x2a0>
 8009946:	eeb0 7bc0 	vabs.f64	d7, d0
 800994a:	eeb4 7b46 	vcmp.f64	d7, d6
 800994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009952:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009956:	dd24      	ble.n	80099a2 <_printf_float+0xa2>
 8009958:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	d502      	bpl.n	8009968 <_printf_float+0x68>
 8009962:	232d      	movs	r3, #45	@ 0x2d
 8009964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009968:	498f      	ldr	r1, [pc, #572]	@ (8009ba8 <_printf_float+0x2a8>)
 800996a:	4b90      	ldr	r3, [pc, #576]	@ (8009bac <_printf_float+0x2ac>)
 800996c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009970:	bf94      	ite	ls
 8009972:	4688      	movls	r8, r1
 8009974:	4698      	movhi	r8, r3
 8009976:	f022 0204 	bic.w	r2, r2, #4
 800997a:	2303      	movs	r3, #3
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	6022      	str	r2, [r4, #0]
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	9700      	str	r7, [sp, #0]
 8009986:	4633      	mov	r3, r6
 8009988:	aa0b      	add	r2, sp, #44	@ 0x2c
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f000 f9d1 	bl	8009d34 <_printf_common>
 8009992:	3001      	adds	r0, #1
 8009994:	f040 8089 	bne.w	8009aaa <_printf_float+0x1aa>
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	b00d      	add	sp, #52	@ 0x34
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80099a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099aa:	d709      	bvc.n	80099c0 <_printf_float+0xc0>
 80099ac:	ee10 3a90 	vmov	r3, s1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbc      	itt	lt
 80099b4:	232d      	movlt	r3, #45	@ 0x2d
 80099b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099ba:	497d      	ldr	r1, [pc, #500]	@ (8009bb0 <_printf_float+0x2b0>)
 80099bc:	4b7d      	ldr	r3, [pc, #500]	@ (8009bb4 <_printf_float+0x2b4>)
 80099be:	e7d5      	b.n	800996c <_printf_float+0x6c>
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	1c59      	adds	r1, r3, #1
 80099c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80099c8:	d139      	bne.n	8009a3e <_printf_float+0x13e>
 80099ca:	2306      	movs	r3, #6
 80099cc:	6063      	str	r3, [r4, #4]
 80099ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099d2:	2300      	movs	r3, #0
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80099da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80099de:	ab09      	add	r3, sp, #36	@ 0x24
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	6861      	ldr	r1, [r4, #4]
 80099e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff fefb 	bl	80097e4 <__cvt>
 80099ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099f4:	4680      	mov	r8, r0
 80099f6:	d129      	bne.n	8009a4c <_printf_float+0x14c>
 80099f8:	1cc8      	adds	r0, r1, #3
 80099fa:	db02      	blt.n	8009a02 <_printf_float+0x102>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	4299      	cmp	r1, r3
 8009a00:	dd41      	ble.n	8009a86 <_printf_float+0x186>
 8009a02:	f1a9 0902 	sub.w	r9, r9, #2
 8009a06:	fa5f f989 	uxtb.w	r9, r9
 8009a0a:	3901      	subs	r1, #1
 8009a0c:	464a      	mov	r2, r9
 8009a0e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a12:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a14:	f7ff ff3a 	bl	800988c <__exponent>
 8009a18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a1a:	1813      	adds	r3, r2, r0
 8009a1c:	2a01      	cmp	r2, #1
 8009a1e:	4682      	mov	sl, r0
 8009a20:	6123      	str	r3, [r4, #16]
 8009a22:	dc02      	bgt.n	8009a2a <_printf_float+0x12a>
 8009a24:	6822      	ldr	r2, [r4, #0]
 8009a26:	07d2      	lsls	r2, r2, #31
 8009a28:	d501      	bpl.n	8009a2e <_printf_float+0x12e>
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0a6      	beq.n	8009984 <_printf_float+0x84>
 8009a36:	232d      	movs	r3, #45	@ 0x2d
 8009a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a3c:	e7a2      	b.n	8009984 <_printf_float+0x84>
 8009a3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a42:	d1c4      	bne.n	80099ce <_printf_float+0xce>
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1c2      	bne.n	80099ce <_printf_float+0xce>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e7bf      	b.n	80099cc <_printf_float+0xcc>
 8009a4c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009a50:	d9db      	bls.n	8009a0a <_printf_float+0x10a>
 8009a52:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009a56:	d118      	bne.n	8009a8a <_printf_float+0x18a>
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	dd0b      	ble.n	8009a76 <_printf_float+0x176>
 8009a5e:	6121      	str	r1, [r4, #16]
 8009a60:	b913      	cbnz	r3, 8009a68 <_printf_float+0x168>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	07d0      	lsls	r0, r2, #31
 8009a66:	d502      	bpl.n	8009a6e <_printf_float+0x16e>
 8009a68:	3301      	adds	r3, #1
 8009a6a:	440b      	add	r3, r1
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a70:	f04f 0a00 	mov.w	sl, #0
 8009a74:	e7db      	b.n	8009a2e <_printf_float+0x12e>
 8009a76:	b913      	cbnz	r3, 8009a7e <_printf_float+0x17e>
 8009a78:	6822      	ldr	r2, [r4, #0]
 8009a7a:	07d2      	lsls	r2, r2, #31
 8009a7c:	d501      	bpl.n	8009a82 <_printf_float+0x182>
 8009a7e:	3302      	adds	r3, #2
 8009a80:	e7f4      	b.n	8009a6c <_printf_float+0x16c>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e7f2      	b.n	8009a6c <_printf_float+0x16c>
 8009a86:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	db05      	blt.n	8009a9c <_printf_float+0x19c>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	6121      	str	r1, [r4, #16]
 8009a94:	07d8      	lsls	r0, r3, #31
 8009a96:	d5ea      	bpl.n	8009a6e <_printf_float+0x16e>
 8009a98:	1c4b      	adds	r3, r1, #1
 8009a9a:	e7e7      	b.n	8009a6c <_printf_float+0x16c>
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	bfd4      	ite	le
 8009aa0:	f1c1 0202 	rsble	r2, r1, #2
 8009aa4:	2201      	movgt	r2, #1
 8009aa6:	4413      	add	r3, r2
 8009aa8:	e7e0      	b.n	8009a6c <_printf_float+0x16c>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	055a      	lsls	r2, r3, #21
 8009aae:	d407      	bmi.n	8009ac0 <_printf_float+0x1c0>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	d12a      	bne.n	8009b14 <_printf_float+0x214>
 8009abe:	e76b      	b.n	8009998 <_printf_float+0x98>
 8009ac0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009ac4:	f240 80e0 	bls.w	8009c88 <_printf_float+0x388>
 8009ac8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009acc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	d133      	bne.n	8009b3e <_printf_float+0x23e>
 8009ad6:	4a38      	ldr	r2, [pc, #224]	@ (8009bb8 <_printf_float+0x2b8>)
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	f43f af59 	beq.w	8009998 <_printf_float+0x98>
 8009ae6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009aea:	4543      	cmp	r3, r8
 8009aec:	db02      	blt.n	8009af4 <_printf_float+0x1f4>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	07d8      	lsls	r0, r3, #31
 8009af2:	d50f      	bpl.n	8009b14 <_printf_float+0x214>
 8009af4:	9b05      	ldr	r3, [sp, #20]
 8009af6:	465a      	mov	r2, fp
 8009af8:	4631      	mov	r1, r6
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b8      	blx	r7
 8009afe:	3001      	adds	r0, #1
 8009b00:	f43f af4a 	beq.w	8009998 <_printf_float+0x98>
 8009b04:	f04f 0900 	mov.w	r9, #0
 8009b08:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b0c:	f104 0a1a 	add.w	sl, r4, #26
 8009b10:	45c8      	cmp	r8, r9
 8009b12:	dc09      	bgt.n	8009b28 <_printf_float+0x228>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	079b      	lsls	r3, r3, #30
 8009b18:	f100 8107 	bmi.w	8009d2a <_printf_float+0x42a>
 8009b1c:	68e0      	ldr	r0, [r4, #12]
 8009b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b20:	4298      	cmp	r0, r3
 8009b22:	bfb8      	it	lt
 8009b24:	4618      	movlt	r0, r3
 8009b26:	e739      	b.n	800999c <_printf_float+0x9c>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af30 	beq.w	8009998 <_printf_float+0x98>
 8009b38:	f109 0901 	add.w	r9, r9, #1
 8009b3c:	e7e8      	b.n	8009b10 <_printf_float+0x210>
 8009b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc3b      	bgt.n	8009bbc <_printf_float+0x2bc>
 8009b44:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb8 <_printf_float+0x2b8>)
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f af22 	beq.w	8009998 <_printf_float+0x98>
 8009b54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b58:	ea59 0303 	orrs.w	r3, r9, r3
 8009b5c:	d102      	bne.n	8009b64 <_printf_float+0x264>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	07d9      	lsls	r1, r3, #31
 8009b62:	d5d7      	bpl.n	8009b14 <_printf_float+0x214>
 8009b64:	9b05      	ldr	r3, [sp, #20]
 8009b66:	465a      	mov	r2, fp
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af12 	beq.w	8009998 <_printf_float+0x98>
 8009b74:	f04f 0a00 	mov.w	sl, #0
 8009b78:	f104 0b1a 	add.w	fp, r4, #26
 8009b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7e:	425b      	negs	r3, r3
 8009b80:	4553      	cmp	r3, sl
 8009b82:	dc01      	bgt.n	8009b88 <_printf_float+0x288>
 8009b84:	464b      	mov	r3, r9
 8009b86:	e794      	b.n	8009ab2 <_printf_float+0x1b2>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	465a      	mov	r2, fp
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af00 	beq.w	8009998 <_printf_float+0x98>
 8009b98:	f10a 0a01 	add.w	sl, sl, #1
 8009b9c:	e7ee      	b.n	8009b7c <_printf_float+0x27c>
 8009b9e:	bf00      	nop
 8009ba0:	ffffffff 	.word	0xffffffff
 8009ba4:	7fefffff 	.word	0x7fefffff
 8009ba8:	0800c1d0 	.word	0x0800c1d0
 8009bac:	0800c1d4 	.word	0x0800c1d4
 8009bb0:	0800c1d8 	.word	0x0800c1d8
 8009bb4:	0800c1dc 	.word	0x0800c1dc
 8009bb8:	0800c1e0 	.word	0x0800c1e0
 8009bbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009bc2:	4553      	cmp	r3, sl
 8009bc4:	bfa8      	it	ge
 8009bc6:	4653      	movge	r3, sl
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	4699      	mov	r9, r3
 8009bcc:	dc37      	bgt.n	8009c3e <_printf_float+0x33e>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd6:	f104 021a 	add.w	r2, r4, #26
 8009bda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bdc:	9907      	ldr	r1, [sp, #28]
 8009bde:	9306      	str	r3, [sp, #24]
 8009be0:	eba3 0309 	sub.w	r3, r3, r9
 8009be4:	428b      	cmp	r3, r1
 8009be6:	dc31      	bgt.n	8009c4c <_printf_float+0x34c>
 8009be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bea:	459a      	cmp	sl, r3
 8009bec:	dc3b      	bgt.n	8009c66 <_printf_float+0x366>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	07da      	lsls	r2, r3, #31
 8009bf2:	d438      	bmi.n	8009c66 <_printf_float+0x366>
 8009bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf6:	ebaa 0903 	sub.w	r9, sl, r3
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	ebaa 0303 	sub.w	r3, sl, r3
 8009c00:	4599      	cmp	r9, r3
 8009c02:	bfa8      	it	ge
 8009c04:	4699      	movge	r9, r3
 8009c06:	f1b9 0f00 	cmp.w	r9, #0
 8009c0a:	dc34      	bgt.n	8009c76 <_printf_float+0x376>
 8009c0c:	f04f 0800 	mov.w	r8, #0
 8009c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c14:	f104 0b1a 	add.w	fp, r4, #26
 8009c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c1e:	eba3 0309 	sub.w	r3, r3, r9
 8009c22:	4543      	cmp	r3, r8
 8009c24:	f77f af76 	ble.w	8009b14 <_printf_float+0x214>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	465a      	mov	r2, fp
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f aeb0 	beq.w	8009998 <_printf_float+0x98>
 8009c38:	f108 0801 	add.w	r8, r8, #1
 8009c3c:	e7ec      	b.n	8009c18 <_printf_float+0x318>
 8009c3e:	4642      	mov	r2, r8
 8009c40:	4631      	mov	r1, r6
 8009c42:	4628      	mov	r0, r5
 8009c44:	47b8      	blx	r7
 8009c46:	3001      	adds	r0, #1
 8009c48:	d1c1      	bne.n	8009bce <_printf_float+0x2ce>
 8009c4a:	e6a5      	b.n	8009998 <_printf_float+0x98>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	9206      	str	r2, [sp, #24]
 8009c54:	47b8      	blx	r7
 8009c56:	3001      	adds	r0, #1
 8009c58:	f43f ae9e 	beq.w	8009998 <_printf_float+0x98>
 8009c5c:	9b07      	ldr	r3, [sp, #28]
 8009c5e:	9a06      	ldr	r2, [sp, #24]
 8009c60:	3301      	adds	r3, #1
 8009c62:	9307      	str	r3, [sp, #28]
 8009c64:	e7b9      	b.n	8009bda <_printf_float+0x2da>
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	465a      	mov	r2, fp
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	d1bf      	bne.n	8009bf4 <_printf_float+0x2f4>
 8009c74:	e690      	b.n	8009998 <_printf_float+0x98>
 8009c76:	9a06      	ldr	r2, [sp, #24]
 8009c78:	464b      	mov	r3, r9
 8009c7a:	4442      	add	r2, r8
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	d1c2      	bne.n	8009c0c <_printf_float+0x30c>
 8009c86:	e687      	b.n	8009998 <_printf_float+0x98>
 8009c88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009c8c:	f1b9 0f01 	cmp.w	r9, #1
 8009c90:	dc01      	bgt.n	8009c96 <_printf_float+0x396>
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d536      	bpl.n	8009d04 <_printf_float+0x404>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f ae79 	beq.w	8009998 <_printf_float+0x98>
 8009ca6:	9b05      	ldr	r3, [sp, #20]
 8009ca8:	465a      	mov	r2, fp
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae71 	beq.w	8009998 <_printf_float+0x98>
 8009cb6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009cba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009cc6:	d018      	beq.n	8009cfa <_printf_float+0x3fa>
 8009cc8:	464b      	mov	r3, r9
 8009cca:	f108 0201 	add.w	r2, r8, #1
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d10c      	bne.n	8009cf2 <_printf_float+0x3f2>
 8009cd8:	e65e      	b.n	8009998 <_printf_float+0x98>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	465a      	mov	r2, fp
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae57 	beq.w	8009998 <_printf_float+0x98>
 8009cea:	f108 0801 	add.w	r8, r8, #1
 8009cee:	45c8      	cmp	r8, r9
 8009cf0:	dbf3      	blt.n	8009cda <_printf_float+0x3da>
 8009cf2:	4653      	mov	r3, sl
 8009cf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cf8:	e6dc      	b.n	8009ab4 <_printf_float+0x1b4>
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	f104 0b1a 	add.w	fp, r4, #26
 8009d02:	e7f4      	b.n	8009cee <_printf_float+0x3ee>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4642      	mov	r2, r8
 8009d08:	e7e1      	b.n	8009cce <_printf_float+0x3ce>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae3f 	beq.w	8009998 <_printf_float+0x98>
 8009d1a:	f108 0801 	add.w	r8, r8, #1
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d22:	1a5b      	subs	r3, r3, r1
 8009d24:	4543      	cmp	r3, r8
 8009d26:	dcf0      	bgt.n	8009d0a <_printf_float+0x40a>
 8009d28:	e6f8      	b.n	8009b1c <_printf_float+0x21c>
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	f104 0919 	add.w	r9, r4, #25
 8009d32:	e7f4      	b.n	8009d1e <_printf_float+0x41e>

08009d34 <_printf_common>:
 8009d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d38:	4616      	mov	r6, r2
 8009d3a:	4698      	mov	r8, r3
 8009d3c:	688a      	ldr	r2, [r1, #8]
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d44:	4293      	cmp	r3, r2
 8009d46:	bfb8      	it	lt
 8009d48:	4613      	movlt	r3, r2
 8009d4a:	6033      	str	r3, [r6, #0]
 8009d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d50:	4607      	mov	r7, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	b10a      	cbz	r2, 8009d5a <_printf_common+0x26>
 8009d56:	3301      	adds	r3, #1
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	0699      	lsls	r1, r3, #26
 8009d5e:	bf42      	ittt	mi
 8009d60:	6833      	ldrmi	r3, [r6, #0]
 8009d62:	3302      	addmi	r3, #2
 8009d64:	6033      	strmi	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	f015 0506 	ands.w	r5, r5, #6
 8009d6c:	d106      	bne.n	8009d7c <_printf_common+0x48>
 8009d6e:	f104 0a19 	add.w	sl, r4, #25
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	6832      	ldr	r2, [r6, #0]
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	42ab      	cmp	r3, r5
 8009d7a:	dc26      	bgt.n	8009dca <_printf_common+0x96>
 8009d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	3b00      	subs	r3, #0
 8009d84:	bf18      	it	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	0692      	lsls	r2, r2, #26
 8009d8a:	d42b      	bmi.n	8009de4 <_printf_common+0xb0>
 8009d8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d90:	4641      	mov	r1, r8
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c8      	blx	r9
 8009d96:	3001      	adds	r0, #1
 8009d98:	d01e      	beq.n	8009dd8 <_printf_common+0xa4>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6922      	ldr	r2, [r4, #16]
 8009d9e:	f003 0306 	and.w	r3, r3, #6
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	bf02      	ittt	eq
 8009da6:	68e5      	ldreq	r5, [r4, #12]
 8009da8:	6833      	ldreq	r3, [r6, #0]
 8009daa:	1aed      	subeq	r5, r5, r3
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	bf0c      	ite	eq
 8009db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db4:	2500      	movne	r5, #0
 8009db6:	4293      	cmp	r3, r2
 8009db8:	bfc4      	itt	gt
 8009dba:	1a9b      	subgt	r3, r3, r2
 8009dbc:	18ed      	addgt	r5, r5, r3
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	341a      	adds	r4, #26
 8009dc2:	42b5      	cmp	r5, r6
 8009dc4:	d11a      	bne.n	8009dfc <_printf_common+0xc8>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e008      	b.n	8009ddc <_printf_common+0xa8>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4652      	mov	r2, sl
 8009dce:	4641      	mov	r1, r8
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	47c8      	blx	r9
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d103      	bne.n	8009de0 <_printf_common+0xac>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de0:	3501      	adds	r5, #1
 8009de2:	e7c6      	b.n	8009d72 <_printf_common+0x3e>
 8009de4:	18e1      	adds	r1, r4, r3
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	2030      	movs	r0, #48	@ 0x30
 8009dea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dee:	4422      	add	r2, r4
 8009df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009df8:	3302      	adds	r3, #2
 8009dfa:	e7c7      	b.n	8009d8c <_printf_common+0x58>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4641      	mov	r1, r8
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c8      	blx	r9
 8009e06:	3001      	adds	r0, #1
 8009e08:	d0e6      	beq.n	8009dd8 <_printf_common+0xa4>
 8009e0a:	3601      	adds	r6, #1
 8009e0c:	e7d9      	b.n	8009dc2 <_printf_common+0x8e>
	...

08009e10 <_printf_i>:
 8009e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	7e0f      	ldrb	r7, [r1, #24]
 8009e16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e18:	2f78      	cmp	r7, #120	@ 0x78
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	469a      	mov	sl, r3
 8009e22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e26:	d807      	bhi.n	8009e38 <_printf_i+0x28>
 8009e28:	2f62      	cmp	r7, #98	@ 0x62
 8009e2a:	d80a      	bhi.n	8009e42 <_printf_i+0x32>
 8009e2c:	2f00      	cmp	r7, #0
 8009e2e:	f000 80d2 	beq.w	8009fd6 <_printf_i+0x1c6>
 8009e32:	2f58      	cmp	r7, #88	@ 0x58
 8009e34:	f000 80b9 	beq.w	8009faa <_printf_i+0x19a>
 8009e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e40:	e03a      	b.n	8009eb8 <_printf_i+0xa8>
 8009e42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e46:	2b15      	cmp	r3, #21
 8009e48:	d8f6      	bhi.n	8009e38 <_printf_i+0x28>
 8009e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e50 <_printf_i+0x40>)
 8009e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e50:	08009ea9 	.word	0x08009ea9
 8009e54:	08009ebd 	.word	0x08009ebd
 8009e58:	08009e39 	.word	0x08009e39
 8009e5c:	08009e39 	.word	0x08009e39
 8009e60:	08009e39 	.word	0x08009e39
 8009e64:	08009e39 	.word	0x08009e39
 8009e68:	08009ebd 	.word	0x08009ebd
 8009e6c:	08009e39 	.word	0x08009e39
 8009e70:	08009e39 	.word	0x08009e39
 8009e74:	08009e39 	.word	0x08009e39
 8009e78:	08009e39 	.word	0x08009e39
 8009e7c:	08009fbd 	.word	0x08009fbd
 8009e80:	08009ee7 	.word	0x08009ee7
 8009e84:	08009f77 	.word	0x08009f77
 8009e88:	08009e39 	.word	0x08009e39
 8009e8c:	08009e39 	.word	0x08009e39
 8009e90:	08009fdf 	.word	0x08009fdf
 8009e94:	08009e39 	.word	0x08009e39
 8009e98:	08009ee7 	.word	0x08009ee7
 8009e9c:	08009e39 	.word	0x08009e39
 8009ea0:	08009e39 	.word	0x08009e39
 8009ea4:	08009f7f 	.word	0x08009f7f
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6032      	str	r2, [r6, #0]
 8009eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e09d      	b.n	8009ff8 <_printf_i+0x1e8>
 8009ebc:	6833      	ldr	r3, [r6, #0]
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	1d19      	adds	r1, r3, #4
 8009ec2:	6031      	str	r1, [r6, #0]
 8009ec4:	0606      	lsls	r6, r0, #24
 8009ec6:	d501      	bpl.n	8009ecc <_printf_i+0xbc>
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	e003      	b.n	8009ed4 <_printf_i+0xc4>
 8009ecc:	0645      	lsls	r5, r0, #25
 8009ece:	d5fb      	bpl.n	8009ec8 <_printf_i+0xb8>
 8009ed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	da03      	bge.n	8009ee0 <_printf_i+0xd0>
 8009ed8:	232d      	movs	r3, #45	@ 0x2d
 8009eda:	426d      	negs	r5, r5
 8009edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee0:	4859      	ldr	r0, [pc, #356]	@ (800a048 <_printf_i+0x238>)
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	e011      	b.n	8009f0a <_printf_i+0xfa>
 8009ee6:	6821      	ldr	r1, [r4, #0]
 8009ee8:	6833      	ldr	r3, [r6, #0]
 8009eea:	0608      	lsls	r0, r1, #24
 8009eec:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ef0:	d402      	bmi.n	8009ef8 <_printf_i+0xe8>
 8009ef2:	0649      	lsls	r1, r1, #25
 8009ef4:	bf48      	it	mi
 8009ef6:	b2ad      	uxthmi	r5, r5
 8009ef8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009efa:	4853      	ldr	r0, [pc, #332]	@ (800a048 <_printf_i+0x238>)
 8009efc:	6033      	str	r3, [r6, #0]
 8009efe:	bf14      	ite	ne
 8009f00:	230a      	movne	r3, #10
 8009f02:	2308      	moveq	r3, #8
 8009f04:	2100      	movs	r1, #0
 8009f06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f0a:	6866      	ldr	r6, [r4, #4]
 8009f0c:	60a6      	str	r6, [r4, #8]
 8009f0e:	2e00      	cmp	r6, #0
 8009f10:	bfa2      	ittt	ge
 8009f12:	6821      	ldrge	r1, [r4, #0]
 8009f14:	f021 0104 	bicge.w	r1, r1, #4
 8009f18:	6021      	strge	r1, [r4, #0]
 8009f1a:	b90d      	cbnz	r5, 8009f20 <_printf_i+0x110>
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	d04b      	beq.n	8009fb8 <_printf_i+0x1a8>
 8009f20:	4616      	mov	r6, r2
 8009f22:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f26:	fb03 5711 	mls	r7, r3, r1, r5
 8009f2a:	5dc7      	ldrb	r7, [r0, r7]
 8009f2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f30:	462f      	mov	r7, r5
 8009f32:	42bb      	cmp	r3, r7
 8009f34:	460d      	mov	r5, r1
 8009f36:	d9f4      	bls.n	8009f22 <_printf_i+0x112>
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	d10b      	bne.n	8009f54 <_printf_i+0x144>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	07df      	lsls	r7, r3, #31
 8009f40:	d508      	bpl.n	8009f54 <_printf_i+0x144>
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6861      	ldr	r1, [r4, #4]
 8009f46:	4299      	cmp	r1, r3
 8009f48:	bfde      	ittt	le
 8009f4a:	2330      	movle	r3, #48	@ 0x30
 8009f4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f54:	1b92      	subs	r2, r2, r6
 8009f56:	6122      	str	r2, [r4, #16]
 8009f58:	f8cd a000 	str.w	sl, [sp]
 8009f5c:	464b      	mov	r3, r9
 8009f5e:	aa03      	add	r2, sp, #12
 8009f60:	4621      	mov	r1, r4
 8009f62:	4640      	mov	r0, r8
 8009f64:	f7ff fee6 	bl	8009d34 <_printf_common>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d14a      	bne.n	800a002 <_printf_i+0x1f2>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b004      	add	sp, #16
 8009f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	f043 0320 	orr.w	r3, r3, #32
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	4833      	ldr	r0, [pc, #204]	@ (800a04c <_printf_i+0x23c>)
 8009f80:	2778      	movs	r7, #120	@ 0x78
 8009f82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	6831      	ldr	r1, [r6, #0]
 8009f8a:	061f      	lsls	r7, r3, #24
 8009f8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f90:	d402      	bmi.n	8009f98 <_printf_i+0x188>
 8009f92:	065f      	lsls	r7, r3, #25
 8009f94:	bf48      	it	mi
 8009f96:	b2ad      	uxthmi	r5, r5
 8009f98:	6031      	str	r1, [r6, #0]
 8009f9a:	07d9      	lsls	r1, r3, #31
 8009f9c:	bf44      	itt	mi
 8009f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009fa2:	6023      	strmi	r3, [r4, #0]
 8009fa4:	b11d      	cbz	r5, 8009fae <_printf_i+0x19e>
 8009fa6:	2310      	movs	r3, #16
 8009fa8:	e7ac      	b.n	8009f04 <_printf_i+0xf4>
 8009faa:	4827      	ldr	r0, [pc, #156]	@ (800a048 <_printf_i+0x238>)
 8009fac:	e7e9      	b.n	8009f82 <_printf_i+0x172>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f023 0320 	bic.w	r3, r3, #32
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	e7f6      	b.n	8009fa6 <_printf_i+0x196>
 8009fb8:	4616      	mov	r6, r2
 8009fba:	e7bd      	b.n	8009f38 <_printf_i+0x128>
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	6825      	ldr	r5, [r4, #0]
 8009fc0:	6961      	ldr	r1, [r4, #20]
 8009fc2:	1d18      	adds	r0, r3, #4
 8009fc4:	6030      	str	r0, [r6, #0]
 8009fc6:	062e      	lsls	r6, r5, #24
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	d501      	bpl.n	8009fd0 <_printf_i+0x1c0>
 8009fcc:	6019      	str	r1, [r3, #0]
 8009fce:	e002      	b.n	8009fd6 <_printf_i+0x1c6>
 8009fd0:	0668      	lsls	r0, r5, #25
 8009fd2:	d5fb      	bpl.n	8009fcc <_printf_i+0x1bc>
 8009fd4:	8019      	strh	r1, [r3, #0]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	4616      	mov	r6, r2
 8009fdc:	e7bc      	b.n	8009f58 <_printf_i+0x148>
 8009fde:	6833      	ldr	r3, [r6, #0]
 8009fe0:	1d1a      	adds	r2, r3, #4
 8009fe2:	6032      	str	r2, [r6, #0]
 8009fe4:	681e      	ldr	r6, [r3, #0]
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 f990 	bl	8000310 <memchr>
 8009ff0:	b108      	cbz	r0, 8009ff6 <_printf_i+0x1e6>
 8009ff2:	1b80      	subs	r0, r0, r6
 8009ff4:	6060      	str	r0, [r4, #4]
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a000:	e7aa      	b.n	8009f58 <_printf_i+0x148>
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	4632      	mov	r2, r6
 800a006:	4649      	mov	r1, r9
 800a008:	4640      	mov	r0, r8
 800a00a:	47d0      	blx	sl
 800a00c:	3001      	adds	r0, #1
 800a00e:	d0ad      	beq.n	8009f6c <_printf_i+0x15c>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	079b      	lsls	r3, r3, #30
 800a014:	d413      	bmi.n	800a03e <_printf_i+0x22e>
 800a016:	68e0      	ldr	r0, [r4, #12]
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	4298      	cmp	r0, r3
 800a01c:	bfb8      	it	lt
 800a01e:	4618      	movlt	r0, r3
 800a020:	e7a6      	b.n	8009f70 <_printf_i+0x160>
 800a022:	2301      	movs	r3, #1
 800a024:	4632      	mov	r2, r6
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d09d      	beq.n	8009f6c <_printf_i+0x15c>
 800a030:	3501      	adds	r5, #1
 800a032:	68e3      	ldr	r3, [r4, #12]
 800a034:	9903      	ldr	r1, [sp, #12]
 800a036:	1a5b      	subs	r3, r3, r1
 800a038:	42ab      	cmp	r3, r5
 800a03a:	dcf2      	bgt.n	800a022 <_printf_i+0x212>
 800a03c:	e7eb      	b.n	800a016 <_printf_i+0x206>
 800a03e:	2500      	movs	r5, #0
 800a040:	f104 0619 	add.w	r6, r4, #25
 800a044:	e7f5      	b.n	800a032 <_printf_i+0x222>
 800a046:	bf00      	nop
 800a048:	0800c1e2 	.word	0x0800c1e2
 800a04c:	0800c1f3 	.word	0x0800c1f3

0800a050 <std>:
 800a050:	2300      	movs	r3, #0
 800a052:	b510      	push	{r4, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	e9c0 3300 	strd	r3, r3, [r0]
 800a05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a05e:	6083      	str	r3, [r0, #8]
 800a060:	8181      	strh	r1, [r0, #12]
 800a062:	6643      	str	r3, [r0, #100]	@ 0x64
 800a064:	81c2      	strh	r2, [r0, #14]
 800a066:	6183      	str	r3, [r0, #24]
 800a068:	4619      	mov	r1, r3
 800a06a:	2208      	movs	r2, #8
 800a06c:	305c      	adds	r0, #92	@ 0x5c
 800a06e:	f000 f9f9 	bl	800a464 <memset>
 800a072:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a8 <std+0x58>)
 800a074:	6263      	str	r3, [r4, #36]	@ 0x24
 800a076:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <std+0x5c>)
 800a078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <std+0x60>)
 800a07c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a07e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <std+0x64>)
 800a080:	6323      	str	r3, [r4, #48]	@ 0x30
 800a082:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <std+0x68>)
 800a084:	6224      	str	r4, [r4, #32]
 800a086:	429c      	cmp	r4, r3
 800a088:	d006      	beq.n	800a098 <std+0x48>
 800a08a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a08e:	4294      	cmp	r4, r2
 800a090:	d002      	beq.n	800a098 <std+0x48>
 800a092:	33d0      	adds	r3, #208	@ 0xd0
 800a094:	429c      	cmp	r4, r3
 800a096:	d105      	bne.n	800a0a4 <std+0x54>
 800a098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a0:	f000 ba5c 	b.w	800a55c <__retarget_lock_init_recursive>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0800a2b5 	.word	0x0800a2b5
 800a0ac:	0800a2d7 	.word	0x0800a2d7
 800a0b0:	0800a30f 	.word	0x0800a30f
 800a0b4:	0800a333 	.word	0x0800a333
 800a0b8:	240005b0 	.word	0x240005b0

0800a0bc <stdio_exit_handler>:
 800a0bc:	4a02      	ldr	r2, [pc, #8]	@ (800a0c8 <stdio_exit_handler+0xc>)
 800a0be:	4903      	ldr	r1, [pc, #12]	@ (800a0cc <stdio_exit_handler+0x10>)
 800a0c0:	4803      	ldr	r0, [pc, #12]	@ (800a0d0 <stdio_exit_handler+0x14>)
 800a0c2:	f000 b869 	b.w	800a198 <_fwalk_sglue>
 800a0c6:	bf00      	nop
 800a0c8:	24000010 	.word	0x24000010
 800a0cc:	0800bdb5 	.word	0x0800bdb5
 800a0d0:	24000020 	.word	0x24000020

0800a0d4 <cleanup_stdio>:
 800a0d4:	6841      	ldr	r1, [r0, #4]
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <cleanup_stdio+0x34>)
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	4604      	mov	r4, r0
 800a0de:	d001      	beq.n	800a0e4 <cleanup_stdio+0x10>
 800a0e0:	f001 fe68 	bl	800bdb4 <_fflush_r>
 800a0e4:	68a1      	ldr	r1, [r4, #8]
 800a0e6:	4b09      	ldr	r3, [pc, #36]	@ (800a10c <cleanup_stdio+0x38>)
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	d002      	beq.n	800a0f2 <cleanup_stdio+0x1e>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f001 fe61 	bl	800bdb4 <_fflush_r>
 800a0f2:	68e1      	ldr	r1, [r4, #12]
 800a0f4:	4b06      	ldr	r3, [pc, #24]	@ (800a110 <cleanup_stdio+0x3c>)
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	d004      	beq.n	800a104 <cleanup_stdio+0x30>
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a100:	f001 be58 	b.w	800bdb4 <_fflush_r>
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop
 800a108:	240005b0 	.word	0x240005b0
 800a10c:	24000618 	.word	0x24000618
 800a110:	24000680 	.word	0x24000680

0800a114 <global_stdio_init.part.0>:
 800a114:	b510      	push	{r4, lr}
 800a116:	4b0b      	ldr	r3, [pc, #44]	@ (800a144 <global_stdio_init.part.0+0x30>)
 800a118:	4c0b      	ldr	r4, [pc, #44]	@ (800a148 <global_stdio_init.part.0+0x34>)
 800a11a:	4a0c      	ldr	r2, [pc, #48]	@ (800a14c <global_stdio_init.part.0+0x38>)
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	4620      	mov	r0, r4
 800a120:	2200      	movs	r2, #0
 800a122:	2104      	movs	r1, #4
 800a124:	f7ff ff94 	bl	800a050 <std>
 800a128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a12c:	2201      	movs	r2, #1
 800a12e:	2109      	movs	r1, #9
 800a130:	f7ff ff8e 	bl	800a050 <std>
 800a134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a138:	2202      	movs	r2, #2
 800a13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13e:	2112      	movs	r1, #18
 800a140:	f7ff bf86 	b.w	800a050 <std>
 800a144:	240006e8 	.word	0x240006e8
 800a148:	240005b0 	.word	0x240005b0
 800a14c:	0800a0bd 	.word	0x0800a0bd

0800a150 <__sfp_lock_acquire>:
 800a150:	4801      	ldr	r0, [pc, #4]	@ (800a158 <__sfp_lock_acquire+0x8>)
 800a152:	f000 ba04 	b.w	800a55e <__retarget_lock_acquire_recursive>
 800a156:	bf00      	nop
 800a158:	240006f1 	.word	0x240006f1

0800a15c <__sfp_lock_release>:
 800a15c:	4801      	ldr	r0, [pc, #4]	@ (800a164 <__sfp_lock_release+0x8>)
 800a15e:	f000 b9ff 	b.w	800a560 <__retarget_lock_release_recursive>
 800a162:	bf00      	nop
 800a164:	240006f1 	.word	0x240006f1

0800a168 <__sinit>:
 800a168:	b510      	push	{r4, lr}
 800a16a:	4604      	mov	r4, r0
 800a16c:	f7ff fff0 	bl	800a150 <__sfp_lock_acquire>
 800a170:	6a23      	ldr	r3, [r4, #32]
 800a172:	b11b      	cbz	r3, 800a17c <__sinit+0x14>
 800a174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a178:	f7ff bff0 	b.w	800a15c <__sfp_lock_release>
 800a17c:	4b04      	ldr	r3, [pc, #16]	@ (800a190 <__sinit+0x28>)
 800a17e:	6223      	str	r3, [r4, #32]
 800a180:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <__sinit+0x2c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1f5      	bne.n	800a174 <__sinit+0xc>
 800a188:	f7ff ffc4 	bl	800a114 <global_stdio_init.part.0>
 800a18c:	e7f2      	b.n	800a174 <__sinit+0xc>
 800a18e:	bf00      	nop
 800a190:	0800a0d5 	.word	0x0800a0d5
 800a194:	240006e8 	.word	0x240006e8

0800a198 <_fwalk_sglue>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4607      	mov	r7, r0
 800a19e:	4688      	mov	r8, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	2600      	movs	r6, #0
 800a1a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ac:	d505      	bpl.n	800a1ba <_fwalk_sglue+0x22>
 800a1ae:	6824      	ldr	r4, [r4, #0]
 800a1b0:	2c00      	cmp	r4, #0
 800a1b2:	d1f7      	bne.n	800a1a4 <_fwalk_sglue+0xc>
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d907      	bls.n	800a1d0 <_fwalk_sglue+0x38>
 800a1c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	d003      	beq.n	800a1d0 <_fwalk_sglue+0x38>
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c0      	blx	r8
 800a1ce:	4306      	orrs	r6, r0
 800a1d0:	3568      	adds	r5, #104	@ 0x68
 800a1d2:	e7e9      	b.n	800a1a8 <_fwalk_sglue+0x10>

0800a1d4 <iprintf>:
 800a1d4:	b40f      	push	{r0, r1, r2, r3}
 800a1d6:	b507      	push	{r0, r1, r2, lr}
 800a1d8:	4906      	ldr	r1, [pc, #24]	@ (800a1f4 <iprintf+0x20>)
 800a1da:	ab04      	add	r3, sp, #16
 800a1dc:	6808      	ldr	r0, [r1, #0]
 800a1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e2:	6881      	ldr	r1, [r0, #8]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	f001 fc49 	bl	800ba7c <_vfiprintf_r>
 800a1ea:	b003      	add	sp, #12
 800a1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f0:	b004      	add	sp, #16
 800a1f2:	4770      	bx	lr
 800a1f4:	2400001c 	.word	0x2400001c

0800a1f8 <_puts_r>:
 800a1f8:	6a03      	ldr	r3, [r0, #32]
 800a1fa:	b570      	push	{r4, r5, r6, lr}
 800a1fc:	6884      	ldr	r4, [r0, #8]
 800a1fe:	4605      	mov	r5, r0
 800a200:	460e      	mov	r6, r1
 800a202:	b90b      	cbnz	r3, 800a208 <_puts_r+0x10>
 800a204:	f7ff ffb0 	bl	800a168 <__sinit>
 800a208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a20a:	07db      	lsls	r3, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_puts_r+0x22>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	0598      	lsls	r0, r3, #22
 800a212:	d402      	bmi.n	800a21a <_puts_r+0x22>
 800a214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a216:	f000 f9a2 	bl	800a55e <__retarget_lock_acquire_recursive>
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	0719      	lsls	r1, r3, #28
 800a21e:	d502      	bpl.n	800a226 <_puts_r+0x2e>
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d135      	bne.n	800a292 <_puts_r+0x9a>
 800a226:	4621      	mov	r1, r4
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 f8c5 	bl	800a3b8 <__swsetup_r>
 800a22e:	b380      	cbz	r0, 800a292 <_puts_r+0x9a>
 800a230:	f04f 35ff 	mov.w	r5, #4294967295
 800a234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a236:	07da      	lsls	r2, r3, #31
 800a238:	d405      	bmi.n	800a246 <_puts_r+0x4e>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	059b      	lsls	r3, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_puts_r+0x4e>
 800a240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a242:	f000 f98d 	bl	800a560 <__retarget_lock_release_recursive>
 800a246:	4628      	mov	r0, r5
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da04      	bge.n	800a258 <_puts_r+0x60>
 800a24e:	69a2      	ldr	r2, [r4, #24]
 800a250:	429a      	cmp	r2, r3
 800a252:	dc17      	bgt.n	800a284 <_puts_r+0x8c>
 800a254:	290a      	cmp	r1, #10
 800a256:	d015      	beq.n	800a284 <_puts_r+0x8c>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	7019      	strb	r1, [r3, #0]
 800a260:	68a3      	ldr	r3, [r4, #8]
 800a262:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a266:	3b01      	subs	r3, #1
 800a268:	60a3      	str	r3, [r4, #8]
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d1ed      	bne.n	800a24a <_puts_r+0x52>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da11      	bge.n	800a296 <_puts_r+0x9e>
 800a272:	4622      	mov	r2, r4
 800a274:	210a      	movs	r1, #10
 800a276:	4628      	mov	r0, r5
 800a278:	f000 f85f 	bl	800a33a <__swbuf_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d0d7      	beq.n	800a230 <_puts_r+0x38>
 800a280:	250a      	movs	r5, #10
 800a282:	e7d7      	b.n	800a234 <_puts_r+0x3c>
 800a284:	4622      	mov	r2, r4
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f857 	bl	800a33a <__swbuf_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d1e7      	bne.n	800a260 <_puts_r+0x68>
 800a290:	e7ce      	b.n	800a230 <_puts_r+0x38>
 800a292:	3e01      	subs	r6, #1
 800a294:	e7e4      	b.n	800a260 <_puts_r+0x68>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	220a      	movs	r2, #10
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	e7ee      	b.n	800a280 <_puts_r+0x88>
	...

0800a2a4 <puts>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	@ (800a2b0 <puts+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7ff bfa5 	b.w	800a1f8 <_puts_r>
 800a2ae:	bf00      	nop
 800a2b0:	2400001c 	.word	0x2400001c

0800a2b4 <__sread>:
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2bc:	f000 f900 	bl	800a4c0 <_read_r>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	bfab      	itete	ge
 800a2c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2c8:	181b      	addge	r3, r3, r0
 800a2ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2ce:	bfac      	ite	ge
 800a2d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2d2:	81a3      	strhlt	r3, [r4, #12]
 800a2d4:	bd10      	pop	{r4, pc}

0800a2d6 <__swrite>:
 800a2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2da:	461f      	mov	r7, r3
 800a2dc:	898b      	ldrh	r3, [r1, #12]
 800a2de:	05db      	lsls	r3, r3, #23
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	4616      	mov	r6, r2
 800a2e6:	d505      	bpl.n	800a2f4 <__swrite+0x1e>
 800a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f000 f8d4 	bl	800a49c <_lseek_r>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	4632      	mov	r2, r6
 800a302:	463b      	mov	r3, r7
 800a304:	4628      	mov	r0, r5
 800a306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	f000 b8eb 	b.w	800a4e4 <_write_r>

0800a30e <__sseek>:
 800a30e:	b510      	push	{r4, lr}
 800a310:	460c      	mov	r4, r1
 800a312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a316:	f000 f8c1 	bl	800a49c <_lseek_r>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	bf15      	itete	ne
 800a320:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a32a:	81a3      	strheq	r3, [r4, #12]
 800a32c:	bf18      	it	ne
 800a32e:	81a3      	strhne	r3, [r4, #12]
 800a330:	bd10      	pop	{r4, pc}

0800a332 <__sclose>:
 800a332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a336:	f000 b8a1 	b.w	800a47c <_close_r>

0800a33a <__swbuf_r>:
 800a33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33c:	460e      	mov	r6, r1
 800a33e:	4614      	mov	r4, r2
 800a340:	4605      	mov	r5, r0
 800a342:	b118      	cbz	r0, 800a34c <__swbuf_r+0x12>
 800a344:	6a03      	ldr	r3, [r0, #32]
 800a346:	b90b      	cbnz	r3, 800a34c <__swbuf_r+0x12>
 800a348:	f7ff ff0e 	bl	800a168 <__sinit>
 800a34c:	69a3      	ldr	r3, [r4, #24]
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	071a      	lsls	r2, r3, #28
 800a354:	d501      	bpl.n	800a35a <__swbuf_r+0x20>
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	b943      	cbnz	r3, 800a36c <__swbuf_r+0x32>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	f000 f82b 	bl	800a3b8 <__swsetup_r>
 800a362:	b118      	cbz	r0, 800a36c <__swbuf_r+0x32>
 800a364:	f04f 37ff 	mov.w	r7, #4294967295
 800a368:	4638      	mov	r0, r7
 800a36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	6922      	ldr	r2, [r4, #16]
 800a370:	1a98      	subs	r0, r3, r2
 800a372:	6963      	ldr	r3, [r4, #20]
 800a374:	b2f6      	uxtb	r6, r6
 800a376:	4283      	cmp	r3, r0
 800a378:	4637      	mov	r7, r6
 800a37a:	dc05      	bgt.n	800a388 <__swbuf_r+0x4e>
 800a37c:	4621      	mov	r1, r4
 800a37e:	4628      	mov	r0, r5
 800a380:	f001 fd18 	bl	800bdb4 <_fflush_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	d1ed      	bne.n	800a364 <__swbuf_r+0x2a>
 800a388:	68a3      	ldr	r3, [r4, #8]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	60a3      	str	r3, [r4, #8]
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	6022      	str	r2, [r4, #0]
 800a394:	701e      	strb	r6, [r3, #0]
 800a396:	6962      	ldr	r2, [r4, #20]
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d004      	beq.n	800a3a8 <__swbuf_r+0x6e>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	07db      	lsls	r3, r3, #31
 800a3a2:	d5e1      	bpl.n	800a368 <__swbuf_r+0x2e>
 800a3a4:	2e0a      	cmp	r6, #10
 800a3a6:	d1df      	bne.n	800a368 <__swbuf_r+0x2e>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f001 fd02 	bl	800bdb4 <_fflush_r>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d0d9      	beq.n	800a368 <__swbuf_r+0x2e>
 800a3b4:	e7d6      	b.n	800a364 <__swbuf_r+0x2a>
	...

0800a3b8 <__swsetup_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4b29      	ldr	r3, [pc, #164]	@ (800a460 <__swsetup_r+0xa8>)
 800a3bc:	4605      	mov	r5, r0
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	b118      	cbz	r0, 800a3cc <__swsetup_r+0x14>
 800a3c4:	6a03      	ldr	r3, [r0, #32]
 800a3c6:	b90b      	cbnz	r3, 800a3cc <__swsetup_r+0x14>
 800a3c8:	f7ff fece 	bl	800a168 <__sinit>
 800a3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d0:	0719      	lsls	r1, r3, #28
 800a3d2:	d422      	bmi.n	800a41a <__swsetup_r+0x62>
 800a3d4:	06da      	lsls	r2, r3, #27
 800a3d6:	d407      	bmi.n	800a3e8 <__swsetup_r+0x30>
 800a3d8:	2209      	movs	r2, #9
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e6:	e033      	b.n	800a450 <__swsetup_r+0x98>
 800a3e8:	0758      	lsls	r0, r3, #29
 800a3ea:	d512      	bpl.n	800a412 <__swsetup_r+0x5a>
 800a3ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ee:	b141      	cbz	r1, 800a402 <__swsetup_r+0x4a>
 800a3f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	d002      	beq.n	800a3fe <__swsetup_r+0x46>
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 fe93 	bl	800b124 <_free_r>
 800a3fe:	2300      	movs	r3, #0
 800a400:	6363      	str	r3, [r4, #52]	@ 0x34
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	2300      	movs	r3, #0
 800a40c:	6063      	str	r3, [r4, #4]
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f043 0308 	orr.w	r3, r3, #8
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	b94b      	cbnz	r3, 800a432 <__swsetup_r+0x7a>
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a428:	d003      	beq.n	800a432 <__swsetup_r+0x7a>
 800a42a:	4621      	mov	r1, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	f001 fd0f 	bl	800be50 <__smakebuf_r>
 800a432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a436:	f013 0201 	ands.w	r2, r3, #1
 800a43a:	d00a      	beq.n	800a452 <__swsetup_r+0x9a>
 800a43c:	2200      	movs	r2, #0
 800a43e:	60a2      	str	r2, [r4, #8]
 800a440:	6962      	ldr	r2, [r4, #20]
 800a442:	4252      	negs	r2, r2
 800a444:	61a2      	str	r2, [r4, #24]
 800a446:	6922      	ldr	r2, [r4, #16]
 800a448:	b942      	cbnz	r2, 800a45c <__swsetup_r+0xa4>
 800a44a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a44e:	d1c5      	bne.n	800a3dc <__swsetup_r+0x24>
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	0799      	lsls	r1, r3, #30
 800a454:	bf58      	it	pl
 800a456:	6962      	ldrpl	r2, [r4, #20]
 800a458:	60a2      	str	r2, [r4, #8]
 800a45a:	e7f4      	b.n	800a446 <__swsetup_r+0x8e>
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7f7      	b.n	800a450 <__swsetup_r+0x98>
 800a460:	2400001c 	.word	0x2400001c

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <_localeconv_r>:
 800a474:	4800      	ldr	r0, [pc, #0]	@ (800a478 <_localeconv_r+0x4>)
 800a476:	4770      	bx	lr
 800a478:	2400015c 	.word	0x2400015c

0800a47c <_close_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	@ (800a498 <_close_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f6 ff41 	bl	800130e <_close>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_close_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_close_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	240006ec 	.word	0x240006ec

0800a49c <_lseek_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	@ (800a4bc <_lseek_r+0x20>)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	4608      	mov	r0, r1
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	602a      	str	r2, [r5, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f7f6 ff56 	bl	800135c <_lseek>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_lseek_r+0x1e>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_lseek_r+0x1e>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	240006ec 	.word	0x240006ec

0800a4c0 <_read_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	@ (800a4e0 <_read_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f6 ff00 	bl	80012d4 <_read>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_read_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_read_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	240006ec 	.word	0x240006ec

0800a4e4 <_write_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	@ (800a504 <_write_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f6 fc70 	bl	8000dd8 <_write>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_write_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_write_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	240006ec 	.word	0x240006ec

0800a508 <__errno>:
 800a508:	4b01      	ldr	r3, [pc, #4]	@ (800a510 <__errno+0x8>)
 800a50a:	6818      	ldr	r0, [r3, #0]
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	2400001c 	.word	0x2400001c

0800a514 <__libc_init_array>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4d0d      	ldr	r5, [pc, #52]	@ (800a54c <__libc_init_array+0x38>)
 800a518:	4c0d      	ldr	r4, [pc, #52]	@ (800a550 <__libc_init_array+0x3c>)
 800a51a:	1b64      	subs	r4, r4, r5
 800a51c:	10a4      	asrs	r4, r4, #2
 800a51e:	2600      	movs	r6, #0
 800a520:	42a6      	cmp	r6, r4
 800a522:	d109      	bne.n	800a538 <__libc_init_array+0x24>
 800a524:	4d0b      	ldr	r5, [pc, #44]	@ (800a554 <__libc_init_array+0x40>)
 800a526:	4c0c      	ldr	r4, [pc, #48]	@ (800a558 <__libc_init_array+0x44>)
 800a528:	f001 fdbe 	bl	800c0a8 <_init>
 800a52c:	1b64      	subs	r4, r4, r5
 800a52e:	10a4      	asrs	r4, r4, #2
 800a530:	2600      	movs	r6, #0
 800a532:	42a6      	cmp	r6, r4
 800a534:	d105      	bne.n	800a542 <__libc_init_array+0x2e>
 800a536:	bd70      	pop	{r4, r5, r6, pc}
 800a538:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53c:	4798      	blx	r3
 800a53e:	3601      	adds	r6, #1
 800a540:	e7ee      	b.n	800a520 <__libc_init_array+0xc>
 800a542:	f855 3b04 	ldr.w	r3, [r5], #4
 800a546:	4798      	blx	r3
 800a548:	3601      	adds	r6, #1
 800a54a:	e7f2      	b.n	800a532 <__libc_init_array+0x1e>
 800a54c:	0800c548 	.word	0x0800c548
 800a550:	0800c548 	.word	0x0800c548
 800a554:	0800c548 	.word	0x0800c548
 800a558:	0800c54c 	.word	0x0800c54c

0800a55c <__retarget_lock_init_recursive>:
 800a55c:	4770      	bx	lr

0800a55e <__retarget_lock_acquire_recursive>:
 800a55e:	4770      	bx	lr

0800a560 <__retarget_lock_release_recursive>:
 800a560:	4770      	bx	lr

0800a562 <quorem>:
 800a562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a566:	6903      	ldr	r3, [r0, #16]
 800a568:	690c      	ldr	r4, [r1, #16]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	4607      	mov	r7, r0
 800a56e:	db7e      	blt.n	800a66e <quorem+0x10c>
 800a570:	3c01      	subs	r4, #1
 800a572:	f101 0814 	add.w	r8, r1, #20
 800a576:	00a3      	lsls	r3, r4, #2
 800a578:	f100 0514 	add.w	r5, r0, #20
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a582:	9301      	str	r3, [sp, #4]
 800a584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a58c:	3301      	adds	r3, #1
 800a58e:	429a      	cmp	r2, r3
 800a590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a594:	fbb2 f6f3 	udiv	r6, r2, r3
 800a598:	d32e      	bcc.n	800a5f8 <quorem+0x96>
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	46c4      	mov	ip, r8
 800a5a0:	46ae      	mov	lr, r5
 800a5a2:	46d3      	mov	fp, sl
 800a5a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5a8:	b298      	uxth	r0, r3
 800a5aa:	fb06 a000 	mla	r0, r6, r0, sl
 800a5ae:	0c02      	lsrs	r2, r0, #16
 800a5b0:	0c1b      	lsrs	r3, r3, #16
 800a5b2:	fb06 2303 	mla	r3, r6, r3, r2
 800a5b6:	f8de 2000 	ldr.w	r2, [lr]
 800a5ba:	b280      	uxth	r0, r0
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	1a12      	subs	r2, r2, r0
 800a5c0:	445a      	add	r2, fp
 800a5c2:	f8de 0000 	ldr.w	r0, [lr]
 800a5c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5d4:	b292      	uxth	r2, r2
 800a5d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5da:	45e1      	cmp	r9, ip
 800a5dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a5e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5e4:	d2de      	bcs.n	800a5a4 <quorem+0x42>
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	58eb      	ldr	r3, [r5, r3]
 800a5ea:	b92b      	cbnz	r3, 800a5f8 <quorem+0x96>
 800a5ec:	9b01      	ldr	r3, [sp, #4]
 800a5ee:	3b04      	subs	r3, #4
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	d32f      	bcc.n	800a656 <quorem+0xf4>
 800a5f6:	613c      	str	r4, [r7, #16]
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f001 f90d 	bl	800b818 <__mcmp>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	db25      	blt.n	800a64e <quorem+0xec>
 800a602:	4629      	mov	r1, r5
 800a604:	2000      	movs	r0, #0
 800a606:	f858 2b04 	ldr.w	r2, [r8], #4
 800a60a:	f8d1 c000 	ldr.w	ip, [r1]
 800a60e:	fa1f fe82 	uxth.w	lr, r2
 800a612:	fa1f f38c 	uxth.w	r3, ip
 800a616:	eba3 030e 	sub.w	r3, r3, lr
 800a61a:	4403      	add	r3, r0
 800a61c:	0c12      	lsrs	r2, r2, #16
 800a61e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a622:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a62c:	45c1      	cmp	r9, r8
 800a62e:	f841 3b04 	str.w	r3, [r1], #4
 800a632:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a636:	d2e6      	bcs.n	800a606 <quorem+0xa4>
 800a638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a63c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a640:	b922      	cbnz	r2, 800a64c <quorem+0xea>
 800a642:	3b04      	subs	r3, #4
 800a644:	429d      	cmp	r5, r3
 800a646:	461a      	mov	r2, r3
 800a648:	d30b      	bcc.n	800a662 <quorem+0x100>
 800a64a:	613c      	str	r4, [r7, #16]
 800a64c:	3601      	adds	r6, #1
 800a64e:	4630      	mov	r0, r6
 800a650:	b003      	add	sp, #12
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	6812      	ldr	r2, [r2, #0]
 800a658:	3b04      	subs	r3, #4
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	d1cb      	bne.n	800a5f6 <quorem+0x94>
 800a65e:	3c01      	subs	r4, #1
 800a660:	e7c6      	b.n	800a5f0 <quorem+0x8e>
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	3b04      	subs	r3, #4
 800a666:	2a00      	cmp	r2, #0
 800a668:	d1ef      	bne.n	800a64a <quorem+0xe8>
 800a66a:	3c01      	subs	r4, #1
 800a66c:	e7ea      	b.n	800a644 <quorem+0xe2>
 800a66e:	2000      	movs	r0, #0
 800a670:	e7ee      	b.n	800a650 <quorem+0xee>
 800a672:	0000      	movs	r0, r0
 800a674:	0000      	movs	r0, r0
	...

0800a678 <_dtoa_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ed2d 8b02 	vpush	{d8}
 800a680:	69c7      	ldr	r7, [r0, #28]
 800a682:	b091      	sub	sp, #68	@ 0x44
 800a684:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a688:	ec55 4b10 	vmov	r4, r5, d0
 800a68c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a68e:	9107      	str	r1, [sp, #28]
 800a690:	4681      	mov	r9, r0
 800a692:	9209      	str	r2, [sp, #36]	@ 0x24
 800a694:	930d      	str	r3, [sp, #52]	@ 0x34
 800a696:	b97f      	cbnz	r7, 800a6b8 <_dtoa_r+0x40>
 800a698:	2010      	movs	r0, #16
 800a69a:	f000 fd8d 	bl	800b1b8 <malloc>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6a4:	b920      	cbnz	r0, 800a6b0 <_dtoa_r+0x38>
 800a6a6:	4ba0      	ldr	r3, [pc, #640]	@ (800a928 <_dtoa_r+0x2b0>)
 800a6a8:	21ef      	movs	r1, #239	@ 0xef
 800a6aa:	48a0      	ldr	r0, [pc, #640]	@ (800a92c <_dtoa_r+0x2b4>)
 800a6ac:	f001 fc4c 	bl	800bf48 <__assert_func>
 800a6b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6b4:	6007      	str	r7, [r0, #0]
 800a6b6:	60c7      	str	r7, [r0, #12]
 800a6b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6bc:	6819      	ldr	r1, [r3, #0]
 800a6be:	b159      	cbz	r1, 800a6d8 <_dtoa_r+0x60>
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	604a      	str	r2, [r1, #4]
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4093      	lsls	r3, r2
 800a6c8:	608b      	str	r3, [r1, #8]
 800a6ca:	4648      	mov	r0, r9
 800a6cc:	f000 fe6a 	bl	800b3a4 <_Bfree>
 800a6d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	1e2b      	subs	r3, r5, #0
 800a6da:	bfbb      	ittet	lt
 800a6dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6e0:	9303      	strlt	r3, [sp, #12]
 800a6e2:	2300      	movge	r3, #0
 800a6e4:	2201      	movlt	r2, #1
 800a6e6:	bfac      	ite	ge
 800a6e8:	6033      	strge	r3, [r6, #0]
 800a6ea:	6032      	strlt	r2, [r6, #0]
 800a6ec:	4b90      	ldr	r3, [pc, #576]	@ (800a930 <_dtoa_r+0x2b8>)
 800a6ee:	9e03      	ldr	r6, [sp, #12]
 800a6f0:	43b3      	bics	r3, r6
 800a6f2:	d110      	bne.n	800a716 <_dtoa_r+0x9e>
 800a6f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a700:	4323      	orrs	r3, r4
 800a702:	f000 84de 	beq.w	800b0c2 <_dtoa_r+0xa4a>
 800a706:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a708:	4f8a      	ldr	r7, [pc, #552]	@ (800a934 <_dtoa_r+0x2bc>)
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 84e0 	beq.w	800b0d0 <_dtoa_r+0xa58>
 800a710:	1cfb      	adds	r3, r7, #3
 800a712:	f000 bcdb 	b.w	800b0cc <_dtoa_r+0xa54>
 800a716:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a71a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	d10a      	bne.n	800a73a <_dtoa_r+0xc2>
 800a724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a726:	2301      	movs	r3, #1
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a72c:	b113      	cbz	r3, 800a734 <_dtoa_r+0xbc>
 800a72e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a730:	4b81      	ldr	r3, [pc, #516]	@ (800a938 <_dtoa_r+0x2c0>)
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	4f81      	ldr	r7, [pc, #516]	@ (800a93c <_dtoa_r+0x2c4>)
 800a736:	f000 bccb 	b.w	800b0d0 <_dtoa_r+0xa58>
 800a73a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a73c:	a90f      	add	r1, sp, #60	@ 0x3c
 800a73e:	4648      	mov	r0, r9
 800a740:	eeb0 0b48 	vmov.f64	d0, d8
 800a744:	f001 f918 	bl	800b978 <__d2b>
 800a748:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a74c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a74e:	9001      	str	r0, [sp, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d045      	beq.n	800a7e0 <_dtoa_r+0x168>
 800a754:	eeb0 7b48 	vmov.f64	d7, d8
 800a758:	ee18 1a90 	vmov	r1, s17
 800a75c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a760:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a764:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a768:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a76c:	2500      	movs	r5, #0
 800a76e:	ee07 1a90 	vmov	s15, r1
 800a772:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a776:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a910 <_dtoa_r+0x298>
 800a77a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a77e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a918 <_dtoa_r+0x2a0>
 800a782:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a920 <_dtoa_r+0x2a8>
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a792:	eeb0 7b46 	vmov.f64	d7, d6
 800a796:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a79a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a79e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	ee16 8a90 	vmov	r8, s13
 800a7aa:	d508      	bpl.n	800a7be <_dtoa_r+0x146>
 800a7ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a7b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b8:	bf18      	it	ne
 800a7ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a7be:	f1b8 0f16 	cmp.w	r8, #22
 800a7c2:	d82b      	bhi.n	800a81c <_dtoa_r+0x1a4>
 800a7c4:	495e      	ldr	r1, [pc, #376]	@ (800a940 <_dtoa_r+0x2c8>)
 800a7c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a7ca:	ed91 7b00 	vldr	d7, [r1]
 800a7ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d6:	d501      	bpl.n	800a7dc <_dtoa_r+0x164>
 800a7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7dc:	2100      	movs	r1, #0
 800a7de:	e01e      	b.n	800a81e <_dtoa_r+0x1a6>
 800a7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a7e8:	2920      	cmp	r1, #32
 800a7ea:	bfc1      	itttt	gt
 800a7ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a7f0:	408e      	lslgt	r6, r1
 800a7f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a7f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a7fa:	bfd6      	itet	le
 800a7fc:	f1c1 0120 	rsble	r1, r1, #32
 800a800:	4331      	orrgt	r1, r6
 800a802:	fa04 f101 	lslle.w	r1, r4, r1
 800a806:	ee07 1a90 	vmov	s15, r1
 800a80a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a80e:	3b01      	subs	r3, #1
 800a810:	ee17 1a90 	vmov	r1, s15
 800a814:	2501      	movs	r5, #1
 800a816:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a81a:	e7a8      	b.n	800a76e <_dtoa_r+0xf6>
 800a81c:	2101      	movs	r1, #1
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	1e53      	subs	r3, r2, #1
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	bf45      	ittet	mi
 800a826:	f1c2 0301 	rsbmi	r3, r2, #1
 800a82a:	9305      	strmi	r3, [sp, #20]
 800a82c:	2300      	movpl	r3, #0
 800a82e:	2300      	movmi	r3, #0
 800a830:	bf4c      	ite	mi
 800a832:	9306      	strmi	r3, [sp, #24]
 800a834:	9305      	strpl	r3, [sp, #20]
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	910c      	str	r1, [sp, #48]	@ 0x30
 800a83c:	db18      	blt.n	800a870 <_dtoa_r+0x1f8>
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a844:	4443      	add	r3, r8
 800a846:	9306      	str	r3, [sp, #24]
 800a848:	2300      	movs	r3, #0
 800a84a:	9a07      	ldr	r2, [sp, #28]
 800a84c:	2a09      	cmp	r2, #9
 800a84e:	d849      	bhi.n	800a8e4 <_dtoa_r+0x26c>
 800a850:	2a05      	cmp	r2, #5
 800a852:	bfc4      	itt	gt
 800a854:	3a04      	subgt	r2, #4
 800a856:	9207      	strgt	r2, [sp, #28]
 800a858:	9a07      	ldr	r2, [sp, #28]
 800a85a:	f1a2 0202 	sub.w	r2, r2, #2
 800a85e:	bfcc      	ite	gt
 800a860:	2400      	movgt	r4, #0
 800a862:	2401      	movle	r4, #1
 800a864:	2a03      	cmp	r2, #3
 800a866:	d848      	bhi.n	800a8fa <_dtoa_r+0x282>
 800a868:	e8df f002 	tbb	[pc, r2]
 800a86c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a870:	9b05      	ldr	r3, [sp, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	eba3 0308 	sub.w	r3, r3, r8
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a87c:	f1c8 0300 	rsb	r3, r8, #0
 800a880:	e7e3      	b.n	800a84a <_dtoa_r+0x1d2>
 800a882:	2200      	movs	r2, #0
 800a884:	9208      	str	r2, [sp, #32]
 800a886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a888:	2a00      	cmp	r2, #0
 800a88a:	dc39      	bgt.n	800a900 <_dtoa_r+0x288>
 800a88c:	f04f 0b01 	mov.w	fp, #1
 800a890:	46da      	mov	sl, fp
 800a892:	465a      	mov	r2, fp
 800a894:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a898:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a89c:	2100      	movs	r1, #0
 800a89e:	2004      	movs	r0, #4
 800a8a0:	f100 0614 	add.w	r6, r0, #20
 800a8a4:	4296      	cmp	r6, r2
 800a8a6:	d930      	bls.n	800a90a <_dtoa_r+0x292>
 800a8a8:	6079      	str	r1, [r7, #4]
 800a8aa:	4648      	mov	r0, r9
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	f000 fd39 	bl	800b324 <_Balloc>
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d146      	bne.n	800a948 <_dtoa_r+0x2d0>
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <_dtoa_r+0x2cc>)
 800a8bc:	4602      	mov	r2, r0
 800a8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8c2:	e6f2      	b.n	800a6aa <_dtoa_r+0x32>
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	e7dd      	b.n	800a884 <_dtoa_r+0x20c>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	9208      	str	r2, [sp, #32]
 800a8cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ce:	eb08 0b02 	add.w	fp, r8, r2
 800a8d2:	f10b 0a01 	add.w	sl, fp, #1
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	2a01      	cmp	r2, #1
 800a8da:	bfb8      	it	lt
 800a8dc:	2201      	movlt	r2, #1
 800a8de:	e7db      	b.n	800a898 <_dtoa_r+0x220>
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	e7f2      	b.n	800a8ca <_dtoa_r+0x252>
 800a8e4:	2401      	movs	r4, #1
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a8ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	46da      	mov	sl, fp
 800a8f4:	2212      	movs	r2, #18
 800a8f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8f8:	e7ce      	b.n	800a898 <_dtoa_r+0x220>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	9208      	str	r2, [sp, #32]
 800a8fe:	e7f5      	b.n	800a8ec <_dtoa_r+0x274>
 800a900:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a904:	46da      	mov	sl, fp
 800a906:	465a      	mov	r2, fp
 800a908:	e7c6      	b.n	800a898 <_dtoa_r+0x220>
 800a90a:	3101      	adds	r1, #1
 800a90c:	0040      	lsls	r0, r0, #1
 800a90e:	e7c7      	b.n	800a8a0 <_dtoa_r+0x228>
 800a910:	636f4361 	.word	0x636f4361
 800a914:	3fd287a7 	.word	0x3fd287a7
 800a918:	8b60c8b3 	.word	0x8b60c8b3
 800a91c:	3fc68a28 	.word	0x3fc68a28
 800a920:	509f79fb 	.word	0x509f79fb
 800a924:	3fd34413 	.word	0x3fd34413
 800a928:	0800c211 	.word	0x0800c211
 800a92c:	0800c228 	.word	0x0800c228
 800a930:	7ff00000 	.word	0x7ff00000
 800a934:	0800c20d 	.word	0x0800c20d
 800a938:	0800c1e1 	.word	0x0800c1e1
 800a93c:	0800c1e0 	.word	0x0800c1e0
 800a940:	0800c320 	.word	0x0800c320
 800a944:	0800c280 	.word	0x0800c280
 800a948:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a94c:	f1ba 0f0e 	cmp.w	sl, #14
 800a950:	6010      	str	r0, [r2, #0]
 800a952:	d86f      	bhi.n	800aa34 <_dtoa_r+0x3bc>
 800a954:	2c00      	cmp	r4, #0
 800a956:	d06d      	beq.n	800aa34 <_dtoa_r+0x3bc>
 800a958:	f1b8 0f00 	cmp.w	r8, #0
 800a95c:	f340 80c2 	ble.w	800aae4 <_dtoa_r+0x46c>
 800a960:	4aca      	ldr	r2, [pc, #808]	@ (800ac8c <_dtoa_r+0x614>)
 800a962:	f008 010f 	and.w	r1, r8, #15
 800a966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a96a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a96e:	ed92 7b00 	vldr	d7, [r2]
 800a972:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a976:	f000 80a9 	beq.w	800aacc <_dtoa_r+0x454>
 800a97a:	4ac5      	ldr	r2, [pc, #788]	@ (800ac90 <_dtoa_r+0x618>)
 800a97c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a980:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a984:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a988:	f001 010f 	and.w	r1, r1, #15
 800a98c:	2203      	movs	r2, #3
 800a98e:	48c0      	ldr	r0, [pc, #768]	@ (800ac90 <_dtoa_r+0x618>)
 800a990:	2900      	cmp	r1, #0
 800a992:	f040 809d 	bne.w	800aad0 <_dtoa_r+0x458>
 800a996:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a99a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a99e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9a8:	2900      	cmp	r1, #0
 800a9aa:	f000 80c1 	beq.w	800ab30 <_dtoa_r+0x4b8>
 800a9ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a9b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ba:	f140 80b9 	bpl.w	800ab30 <_dtoa_r+0x4b8>
 800a9be:	f1ba 0f00 	cmp.w	sl, #0
 800a9c2:	f000 80b5 	beq.w	800ab30 <_dtoa_r+0x4b8>
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	dd31      	ble.n	800aa30 <_dtoa_r+0x3b8>
 800a9cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a9d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9d8:	f108 31ff 	add.w	r1, r8, #4294967295
 800a9dc:	9104      	str	r1, [sp, #16]
 800a9de:	3201      	adds	r2, #1
 800a9e0:	465c      	mov	r4, fp
 800a9e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a9ea:	ee07 2a90 	vmov	s15, r2
 800a9ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a9f6:	ee15 2a90 	vmov	r2, s11
 800a9fa:	ec51 0b15 	vmov	r0, r1, d5
 800a9fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	f040 8098 	bne.w	800ab38 <_dtoa_r+0x4c0>
 800aa08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa10:	ec41 0b17 	vmov	d7, r0, r1
 800aa14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1c:	f300 8261 	bgt.w	800aee2 <_dtoa_r+0x86a>
 800aa20:	eeb1 7b47 	vneg.f64	d7, d7
 800aa24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2c:	f100 80f5 	bmi.w	800ac1a <_dtoa_r+0x5a2>
 800aa30:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	f2c0 812c 	blt.w	800ac94 <_dtoa_r+0x61c>
 800aa3c:	f1b8 0f0e 	cmp.w	r8, #14
 800aa40:	f300 8128 	bgt.w	800ac94 <_dtoa_r+0x61c>
 800aa44:	4b91      	ldr	r3, [pc, #580]	@ (800ac8c <_dtoa_r+0x614>)
 800aa46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa4a:	ed93 6b00 	vldr	d6, [r3]
 800aa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da03      	bge.n	800aa5c <_dtoa_r+0x3e4>
 800aa54:	f1ba 0f00 	cmp.w	sl, #0
 800aa58:	f340 80d2 	ble.w	800ac00 <_dtoa_r+0x588>
 800aa5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800aa60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa64:	463e      	mov	r6, r7
 800aa66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aa6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa6e:	ee15 3a10 	vmov	r3, s10
 800aa72:	3330      	adds	r3, #48	@ 0x30
 800aa74:	f806 3b01 	strb.w	r3, [r6], #1
 800aa78:	1bf3      	subs	r3, r6, r7
 800aa7a:	459a      	cmp	sl, r3
 800aa7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aa80:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aa84:	f040 80f8 	bne.w	800ac78 <_dtoa_r+0x600>
 800aa88:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa94:	f300 80dd 	bgt.w	800ac52 <_dtoa_r+0x5da>
 800aa98:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa0:	d104      	bne.n	800aaac <_dtoa_r+0x434>
 800aaa2:	ee15 3a10 	vmov	r3, s10
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	f100 80d3 	bmi.w	800ac52 <_dtoa_r+0x5da>
 800aaac:	9901      	ldr	r1, [sp, #4]
 800aaae:	4648      	mov	r0, r9
 800aab0:	f000 fc78 	bl	800b3a4 <_Bfree>
 800aab4:	2300      	movs	r3, #0
 800aab6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aab8:	7033      	strb	r3, [r6, #0]
 800aaba:	f108 0301 	add.w	r3, r8, #1
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 8304 	beq.w	800b0d0 <_dtoa_r+0xa58>
 800aac8:	601e      	str	r6, [r3, #0]
 800aaca:	e301      	b.n	800b0d0 <_dtoa_r+0xa58>
 800aacc:	2202      	movs	r2, #2
 800aace:	e75e      	b.n	800a98e <_dtoa_r+0x316>
 800aad0:	07cc      	lsls	r4, r1, #31
 800aad2:	d504      	bpl.n	800aade <_dtoa_r+0x466>
 800aad4:	ed90 6b00 	vldr	d6, [r0]
 800aad8:	3201      	adds	r2, #1
 800aada:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aade:	1049      	asrs	r1, r1, #1
 800aae0:	3008      	adds	r0, #8
 800aae2:	e755      	b.n	800a990 <_dtoa_r+0x318>
 800aae4:	d022      	beq.n	800ab2c <_dtoa_r+0x4b4>
 800aae6:	f1c8 0100 	rsb	r1, r8, #0
 800aaea:	4a68      	ldr	r2, [pc, #416]	@ (800ac8c <_dtoa_r+0x614>)
 800aaec:	f001 000f 	and.w	r0, r1, #15
 800aaf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800aaf4:	ed92 7b00 	vldr	d7, [r2]
 800aaf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aafc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab00:	4863      	ldr	r0, [pc, #396]	@ (800ac90 <_dtoa_r+0x618>)
 800ab02:	1109      	asrs	r1, r1, #4
 800ab04:	2400      	movs	r4, #0
 800ab06:	2202      	movs	r2, #2
 800ab08:	b929      	cbnz	r1, 800ab16 <_dtoa_r+0x49e>
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	f43f af49 	beq.w	800a9a2 <_dtoa_r+0x32a>
 800ab10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab14:	e745      	b.n	800a9a2 <_dtoa_r+0x32a>
 800ab16:	07ce      	lsls	r6, r1, #31
 800ab18:	d505      	bpl.n	800ab26 <_dtoa_r+0x4ae>
 800ab1a:	ed90 6b00 	vldr	d6, [r0]
 800ab1e:	3201      	adds	r2, #1
 800ab20:	2401      	movs	r4, #1
 800ab22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab26:	1049      	asrs	r1, r1, #1
 800ab28:	3008      	adds	r0, #8
 800ab2a:	e7ed      	b.n	800ab08 <_dtoa_r+0x490>
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	e738      	b.n	800a9a2 <_dtoa_r+0x32a>
 800ab30:	f8cd 8010 	str.w	r8, [sp, #16]
 800ab34:	4654      	mov	r4, sl
 800ab36:	e754      	b.n	800a9e2 <_dtoa_r+0x36a>
 800ab38:	4a54      	ldr	r2, [pc, #336]	@ (800ac8c <_dtoa_r+0x614>)
 800ab3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ab3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ab42:	9a08      	ldr	r2, [sp, #32]
 800ab44:	ec41 0b17 	vmov	d7, r0, r1
 800ab48:	443c      	add	r4, r7
 800ab4a:	b34a      	cbz	r2, 800aba0 <_dtoa_r+0x528>
 800ab4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ab50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ab54:	463e      	mov	r6, r7
 800ab56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ab5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ab5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab66:	ee14 2a90 	vmov	r2, s9
 800ab6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab6e:	3230      	adds	r2, #48	@ 0x30
 800ab70:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	f806 2b01 	strb.w	r2, [r6], #1
 800ab80:	d438      	bmi.n	800abf4 <_dtoa_r+0x57c>
 800ab82:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ab86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	d462      	bmi.n	800ac56 <_dtoa_r+0x5de>
 800ab90:	42a6      	cmp	r6, r4
 800ab92:	f43f af4d 	beq.w	800aa30 <_dtoa_r+0x3b8>
 800ab96:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ab9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab9e:	e7e0      	b.n	800ab62 <_dtoa_r+0x4ea>
 800aba0:	4621      	mov	r1, r4
 800aba2:	463e      	mov	r6, r7
 800aba4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aba8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800abb0:	ee14 2a90 	vmov	r2, s9
 800abb4:	3230      	adds	r2, #48	@ 0x30
 800abb6:	f806 2b01 	strb.w	r2, [r6], #1
 800abba:	42a6      	cmp	r6, r4
 800abbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800abc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800abc4:	d119      	bne.n	800abfa <_dtoa_r+0x582>
 800abc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800abca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800abce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800abd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd6:	dc3e      	bgt.n	800ac56 <_dtoa_r+0x5de>
 800abd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800abdc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe4:	f57f af24 	bpl.w	800aa30 <_dtoa_r+0x3b8>
 800abe8:	460e      	mov	r6, r1
 800abea:	3901      	subs	r1, #1
 800abec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abf0:	2b30      	cmp	r3, #48	@ 0x30
 800abf2:	d0f9      	beq.n	800abe8 <_dtoa_r+0x570>
 800abf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abf8:	e758      	b.n	800aaac <_dtoa_r+0x434>
 800abfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abfe:	e7d5      	b.n	800abac <_dtoa_r+0x534>
 800ac00:	d10b      	bne.n	800ac1a <_dtoa_r+0x5a2>
 800ac02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac06:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	f2c0 8161 	blt.w	800aedc <_dtoa_r+0x864>
 800ac1a:	2400      	movs	r4, #0
 800ac1c:	4625      	mov	r5, r4
 800ac1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac20:	43db      	mvns	r3, r3
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	463e      	mov	r6, r7
 800ac26:	f04f 0800 	mov.w	r8, #0
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f000 fbb9 	bl	800b3a4 <_Bfree>
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	d0de      	beq.n	800abf4 <_dtoa_r+0x57c>
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	d005      	beq.n	800ac48 <_dtoa_r+0x5d0>
 800ac3c:	45a8      	cmp	r8, r5
 800ac3e:	d003      	beq.n	800ac48 <_dtoa_r+0x5d0>
 800ac40:	4641      	mov	r1, r8
 800ac42:	4648      	mov	r0, r9
 800ac44:	f000 fbae 	bl	800b3a4 <_Bfree>
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4648      	mov	r0, r9
 800ac4c:	f000 fbaa 	bl	800b3a4 <_Bfree>
 800ac50:	e7d0      	b.n	800abf4 <_dtoa_r+0x57c>
 800ac52:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac56:	4633      	mov	r3, r6
 800ac58:	461e      	mov	r6, r3
 800ac5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac5e:	2a39      	cmp	r2, #57	@ 0x39
 800ac60:	d106      	bne.n	800ac70 <_dtoa_r+0x5f8>
 800ac62:	429f      	cmp	r7, r3
 800ac64:	d1f8      	bne.n	800ac58 <_dtoa_r+0x5e0>
 800ac66:	9a04      	ldr	r2, [sp, #16]
 800ac68:	3201      	adds	r2, #1
 800ac6a:	9204      	str	r2, [sp, #16]
 800ac6c:	2230      	movs	r2, #48	@ 0x30
 800ac6e:	703a      	strb	r2, [r7, #0]
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	3201      	adds	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e7bd      	b.n	800abf4 <_dtoa_r+0x57c>
 800ac78:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac84:	f47f aeef 	bne.w	800aa66 <_dtoa_r+0x3ee>
 800ac88:	e710      	b.n	800aaac <_dtoa_r+0x434>
 800ac8a:	bf00      	nop
 800ac8c:	0800c320 	.word	0x0800c320
 800ac90:	0800c2f8 	.word	0x0800c2f8
 800ac94:	9908      	ldr	r1, [sp, #32]
 800ac96:	2900      	cmp	r1, #0
 800ac98:	f000 80e3 	beq.w	800ae62 <_dtoa_r+0x7ea>
 800ac9c:	9907      	ldr	r1, [sp, #28]
 800ac9e:	2901      	cmp	r1, #1
 800aca0:	f300 80c8 	bgt.w	800ae34 <_dtoa_r+0x7bc>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	f000 80c1 	beq.w	800ae2c <_dtoa_r+0x7b4>
 800acaa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acae:	9e05      	ldr	r6, [sp, #20]
 800acb0:	461c      	mov	r4, r3
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	4413      	add	r3, r2
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	2101      	movs	r1, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	4648      	mov	r0, r9
 800acc2:	9306      	str	r3, [sp, #24]
 800acc4:	f000 fc22 	bl	800b50c <__i2b>
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	4605      	mov	r5, r0
 800accc:	b166      	cbz	r6, 800ace8 <_dtoa_r+0x670>
 800acce:	9a06      	ldr	r2, [sp, #24]
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	dd09      	ble.n	800ace8 <_dtoa_r+0x670>
 800acd4:	42b2      	cmp	r2, r6
 800acd6:	9905      	ldr	r1, [sp, #20]
 800acd8:	bfa8      	it	ge
 800acda:	4632      	movge	r2, r6
 800acdc:	1a89      	subs	r1, r1, r2
 800acde:	9105      	str	r1, [sp, #20]
 800ace0:	9906      	ldr	r1, [sp, #24]
 800ace2:	1ab6      	subs	r6, r6, r2
 800ace4:	1a8a      	subs	r2, r1, r2
 800ace6:	9206      	str	r2, [sp, #24]
 800ace8:	b1fb      	cbz	r3, 800ad2a <_dtoa_r+0x6b2>
 800acea:	9a08      	ldr	r2, [sp, #32]
 800acec:	2a00      	cmp	r2, #0
 800acee:	f000 80bc 	beq.w	800ae6a <_dtoa_r+0x7f2>
 800acf2:	b19c      	cbz	r4, 800ad1c <_dtoa_r+0x6a4>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4622      	mov	r2, r4
 800acf8:	4648      	mov	r0, r9
 800acfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acfc:	f000 fcc6 	bl	800b68c <__pow5mult>
 800ad00:	9a01      	ldr	r2, [sp, #4]
 800ad02:	4601      	mov	r1, r0
 800ad04:	4605      	mov	r5, r0
 800ad06:	4648      	mov	r0, r9
 800ad08:	f000 fc16 	bl	800b538 <__multiply>
 800ad0c:	9901      	ldr	r1, [sp, #4]
 800ad0e:	9004      	str	r0, [sp, #16]
 800ad10:	4648      	mov	r0, r9
 800ad12:	f000 fb47 	bl	800b3a4 <_Bfree>
 800ad16:	9a04      	ldr	r2, [sp, #16]
 800ad18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	1b1a      	subs	r2, r3, r4
 800ad1e:	d004      	beq.n	800ad2a <_dtoa_r+0x6b2>
 800ad20:	9901      	ldr	r1, [sp, #4]
 800ad22:	4648      	mov	r0, r9
 800ad24:	f000 fcb2 	bl	800b68c <__pow5mult>
 800ad28:	9001      	str	r0, [sp, #4]
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f000 fbed 	bl	800b50c <__i2b>
 800ad32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad34:	4604      	mov	r4, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 81d0 	beq.w	800b0dc <_dtoa_r+0xa64>
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4601      	mov	r1, r0
 800ad40:	4648      	mov	r0, r9
 800ad42:	f000 fca3 	bl	800b68c <__pow5mult>
 800ad46:	9b07      	ldr	r3, [sp, #28]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f300 8095 	bgt.w	800ae7a <_dtoa_r+0x802>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f040 808b 	bne.w	800ae6e <_dtoa_r+0x7f6>
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	f040 8087 	bne.w	800ae72 <_dtoa_r+0x7fa>
 800ad64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad68:	0d12      	lsrs	r2, r2, #20
 800ad6a:	0512      	lsls	r2, r2, #20
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	f000 8082 	beq.w	800ae76 <_dtoa_r+0x7fe>
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	9305      	str	r3, [sp, #20]
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	9306      	str	r3, [sp, #24]
 800ad7e:	2301      	movs	r3, #1
 800ad80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 81af 	beq.w	800b0e8 <_dtoa_r+0xa70>
 800ad8a:	6922      	ldr	r2, [r4, #16]
 800ad8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad90:	6910      	ldr	r0, [r2, #16]
 800ad92:	f000 fb6f 	bl	800b474 <__hi0bits>
 800ad96:	f1c0 0020 	rsb	r0, r0, #32
 800ad9a:	9b06      	ldr	r3, [sp, #24]
 800ad9c:	4418      	add	r0, r3
 800ad9e:	f010 001f 	ands.w	r0, r0, #31
 800ada2:	d076      	beq.n	800ae92 <_dtoa_r+0x81a>
 800ada4:	f1c0 0220 	rsb	r2, r0, #32
 800ada8:	2a04      	cmp	r2, #4
 800adaa:	dd69      	ble.n	800ae80 <_dtoa_r+0x808>
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	f1c0 001c 	rsb	r0, r0, #28
 800adb2:	4403      	add	r3, r0
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	9b06      	ldr	r3, [sp, #24]
 800adb8:	4406      	add	r6, r0
 800adba:	4403      	add	r3, r0
 800adbc:	9306      	str	r3, [sp, #24]
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x758>
 800adc4:	9901      	ldr	r1, [sp, #4]
 800adc6:	461a      	mov	r2, r3
 800adc8:	4648      	mov	r0, r9
 800adca:	f000 fcb9 	bl	800b740 <__lshift>
 800adce:	9001      	str	r0, [sp, #4]
 800add0:	9b06      	ldr	r3, [sp, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	dd05      	ble.n	800ade2 <_dtoa_r+0x76a>
 800add6:	4621      	mov	r1, r4
 800add8:	461a      	mov	r2, r3
 800adda:	4648      	mov	r0, r9
 800addc:	f000 fcb0 	bl	800b740 <__lshift>
 800ade0:	4604      	mov	r4, r0
 800ade2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d056      	beq.n	800ae96 <_dtoa_r+0x81e>
 800ade8:	9801      	ldr	r0, [sp, #4]
 800adea:	4621      	mov	r1, r4
 800adec:	f000 fd14 	bl	800b818 <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	da50      	bge.n	800ae96 <_dtoa_r+0x81e>
 800adf4:	f108 33ff 	add.w	r3, r8, #4294967295
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	9901      	ldr	r1, [sp, #4]
 800adfc:	2300      	movs	r3, #0
 800adfe:	220a      	movs	r2, #10
 800ae00:	4648      	mov	r0, r9
 800ae02:	f000 faf1 	bl	800b3e8 <__multadd>
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	9001      	str	r0, [sp, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 816e 	beq.w	800b0ec <_dtoa_r+0xa74>
 800ae10:	4629      	mov	r1, r5
 800ae12:	2300      	movs	r3, #0
 800ae14:	220a      	movs	r2, #10
 800ae16:	4648      	mov	r0, r9
 800ae18:	f000 fae6 	bl	800b3e8 <__multadd>
 800ae1c:	f1bb 0f00 	cmp.w	fp, #0
 800ae20:	4605      	mov	r5, r0
 800ae22:	dc64      	bgt.n	800aeee <_dtoa_r+0x876>
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	dc3e      	bgt.n	800aea8 <_dtoa_r+0x830>
 800ae2a:	e060      	b.n	800aeee <_dtoa_r+0x876>
 800ae2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae32:	e73c      	b.n	800acae <_dtoa_r+0x636>
 800ae34:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	bfbf      	itttt	lt
 800ae3c:	1ae2      	sublt	r2, r4, r3
 800ae3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ae44:	bfae      	itee	ge
 800ae46:	1b1c      	subge	r4, r3, r4
 800ae48:	4623      	movlt	r3, r4
 800ae4a:	2400      	movlt	r4, #0
 800ae4c:	f1ba 0f00 	cmp.w	sl, #0
 800ae50:	bfb5      	itete	lt
 800ae52:	9a05      	ldrlt	r2, [sp, #20]
 800ae54:	9e05      	ldrge	r6, [sp, #20]
 800ae56:	eba2 060a 	sublt.w	r6, r2, sl
 800ae5a:	4652      	movge	r2, sl
 800ae5c:	bfb8      	it	lt
 800ae5e:	2200      	movlt	r2, #0
 800ae60:	e727      	b.n	800acb2 <_dtoa_r+0x63a>
 800ae62:	9e05      	ldr	r6, [sp, #20]
 800ae64:	9d08      	ldr	r5, [sp, #32]
 800ae66:	461c      	mov	r4, r3
 800ae68:	e730      	b.n	800accc <_dtoa_r+0x654>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	e758      	b.n	800ad20 <_dtoa_r+0x6a8>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e786      	b.n	800ad80 <_dtoa_r+0x708>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	e784      	b.n	800ad80 <_dtoa_r+0x708>
 800ae76:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae78:	e783      	b.n	800ad82 <_dtoa_r+0x70a>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae7e:	e784      	b.n	800ad8a <_dtoa_r+0x712>
 800ae80:	d09d      	beq.n	800adbe <_dtoa_r+0x746>
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	321c      	adds	r2, #28
 800ae86:	4413      	add	r3, r2
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	9b06      	ldr	r3, [sp, #24]
 800ae8c:	4416      	add	r6, r2
 800ae8e:	4413      	add	r3, r2
 800ae90:	e794      	b.n	800adbc <_dtoa_r+0x744>
 800ae92:	4602      	mov	r2, r0
 800ae94:	e7f5      	b.n	800ae82 <_dtoa_r+0x80a>
 800ae96:	f1ba 0f00 	cmp.w	sl, #0
 800ae9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae9e:	46d3      	mov	fp, sl
 800aea0:	dc21      	bgt.n	800aee6 <_dtoa_r+0x86e>
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	dd1e      	ble.n	800aee6 <_dtoa_r+0x86e>
 800aea8:	f1bb 0f00 	cmp.w	fp, #0
 800aeac:	f47f aeb7 	bne.w	800ac1e <_dtoa_r+0x5a6>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	465b      	mov	r3, fp
 800aeb4:	2205      	movs	r2, #5
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f000 fa96 	bl	800b3e8 <__multadd>
 800aebc:	4601      	mov	r1, r0
 800aebe:	4604      	mov	r4, r0
 800aec0:	9801      	ldr	r0, [sp, #4]
 800aec2:	f000 fca9 	bl	800b818 <__mcmp>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f77f aea9 	ble.w	800ac1e <_dtoa_r+0x5a6>
 800aecc:	463e      	mov	r6, r7
 800aece:	2331      	movs	r3, #49	@ 0x31
 800aed0:	f806 3b01 	strb.w	r3, [r6], #1
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	3301      	adds	r3, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	e6a4      	b.n	800ac26 <_dtoa_r+0x5ae>
 800aedc:	f8cd 8010 	str.w	r8, [sp, #16]
 800aee0:	4654      	mov	r4, sl
 800aee2:	4625      	mov	r5, r4
 800aee4:	e7f2      	b.n	800aecc <_dtoa_r+0x854>
 800aee6:	9b08      	ldr	r3, [sp, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 8103 	beq.w	800b0f4 <_dtoa_r+0xa7c>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	dd05      	ble.n	800aefe <_dtoa_r+0x886>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4632      	mov	r2, r6
 800aef6:	4648      	mov	r0, r9
 800aef8:	f000 fc22 	bl	800b740 <__lshift>
 800aefc:	4605      	mov	r5, r0
 800aefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d058      	beq.n	800afb6 <_dtoa_r+0x93e>
 800af04:	6869      	ldr	r1, [r5, #4]
 800af06:	4648      	mov	r0, r9
 800af08:	f000 fa0c 	bl	800b324 <_Balloc>
 800af0c:	4606      	mov	r6, r0
 800af0e:	b928      	cbnz	r0, 800af1c <_dtoa_r+0x8a4>
 800af10:	4b82      	ldr	r3, [pc, #520]	@ (800b11c <_dtoa_r+0xaa4>)
 800af12:	4602      	mov	r2, r0
 800af14:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af18:	f7ff bbc7 	b.w	800a6aa <_dtoa_r+0x32>
 800af1c:	692a      	ldr	r2, [r5, #16]
 800af1e:	3202      	adds	r2, #2
 800af20:	0092      	lsls	r2, r2, #2
 800af22:	f105 010c 	add.w	r1, r5, #12
 800af26:	300c      	adds	r0, #12
 800af28:	f001 f800 	bl	800bf2c <memcpy>
 800af2c:	2201      	movs	r2, #1
 800af2e:	4631      	mov	r1, r6
 800af30:	4648      	mov	r0, r9
 800af32:	f000 fc05 	bl	800b740 <__lshift>
 800af36:	1c7b      	adds	r3, r7, #1
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	eb07 030b 	add.w	r3, r7, fp
 800af3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	46a8      	mov	r8, r5
 800af48:	9308      	str	r3, [sp, #32]
 800af4a:	4605      	mov	r5, r0
 800af4c:	9b05      	ldr	r3, [sp, #20]
 800af4e:	9801      	ldr	r0, [sp, #4]
 800af50:	4621      	mov	r1, r4
 800af52:	f103 3bff 	add.w	fp, r3, #4294967295
 800af56:	f7ff fb04 	bl	800a562 <quorem>
 800af5a:	4641      	mov	r1, r8
 800af5c:	9002      	str	r0, [sp, #8]
 800af5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800af62:	9801      	ldr	r0, [sp, #4]
 800af64:	f000 fc58 	bl	800b818 <__mcmp>
 800af68:	462a      	mov	r2, r5
 800af6a:	9006      	str	r0, [sp, #24]
 800af6c:	4621      	mov	r1, r4
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 fc6e 	bl	800b850 <__mdiff>
 800af74:	68c2      	ldr	r2, [r0, #12]
 800af76:	4606      	mov	r6, r0
 800af78:	b9fa      	cbnz	r2, 800afba <_dtoa_r+0x942>
 800af7a:	4601      	mov	r1, r0
 800af7c:	9801      	ldr	r0, [sp, #4]
 800af7e:	f000 fc4b 	bl	800b818 <__mcmp>
 800af82:	4602      	mov	r2, r0
 800af84:	4631      	mov	r1, r6
 800af86:	4648      	mov	r0, r9
 800af88:	920a      	str	r2, [sp, #40]	@ 0x28
 800af8a:	f000 fa0b 	bl	800b3a4 <_Bfree>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af92:	9e05      	ldr	r6, [sp, #20]
 800af94:	ea43 0102 	orr.w	r1, r3, r2
 800af98:	9b08      	ldr	r3, [sp, #32]
 800af9a:	4319      	orrs	r1, r3
 800af9c:	d10f      	bne.n	800afbe <_dtoa_r+0x946>
 800af9e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800afa2:	d028      	beq.n	800aff6 <_dtoa_r+0x97e>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dd02      	ble.n	800afb0 <_dtoa_r+0x938>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800afb0:	f88b a000 	strb.w	sl, [fp]
 800afb4:	e639      	b.n	800ac2a <_dtoa_r+0x5b2>
 800afb6:	4628      	mov	r0, r5
 800afb8:	e7bd      	b.n	800af36 <_dtoa_r+0x8be>
 800afba:	2201      	movs	r2, #1
 800afbc:	e7e2      	b.n	800af84 <_dtoa_r+0x90c>
 800afbe:	9b06      	ldr	r3, [sp, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	db04      	blt.n	800afce <_dtoa_r+0x956>
 800afc4:	9907      	ldr	r1, [sp, #28]
 800afc6:	430b      	orrs	r3, r1
 800afc8:	9908      	ldr	r1, [sp, #32]
 800afca:	430b      	orrs	r3, r1
 800afcc:	d120      	bne.n	800b010 <_dtoa_r+0x998>
 800afce:	2a00      	cmp	r2, #0
 800afd0:	ddee      	ble.n	800afb0 <_dtoa_r+0x938>
 800afd2:	9901      	ldr	r1, [sp, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	4648      	mov	r0, r9
 800afd8:	f000 fbb2 	bl	800b740 <__lshift>
 800afdc:	4621      	mov	r1, r4
 800afde:	9001      	str	r0, [sp, #4]
 800afe0:	f000 fc1a 	bl	800b818 <__mcmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	dc03      	bgt.n	800aff0 <_dtoa_r+0x978>
 800afe8:	d1e2      	bne.n	800afb0 <_dtoa_r+0x938>
 800afea:	f01a 0f01 	tst.w	sl, #1
 800afee:	d0df      	beq.n	800afb0 <_dtoa_r+0x938>
 800aff0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aff4:	d1d9      	bne.n	800afaa <_dtoa_r+0x932>
 800aff6:	2339      	movs	r3, #57	@ 0x39
 800aff8:	f88b 3000 	strb.w	r3, [fp]
 800affc:	4633      	mov	r3, r6
 800affe:	461e      	mov	r6, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b006:	2a39      	cmp	r2, #57	@ 0x39
 800b008:	d053      	beq.n	800b0b2 <_dtoa_r+0xa3a>
 800b00a:	3201      	adds	r2, #1
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e60c      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b010:	2a00      	cmp	r2, #0
 800b012:	dd07      	ble.n	800b024 <_dtoa_r+0x9ac>
 800b014:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b018:	d0ed      	beq.n	800aff6 <_dtoa_r+0x97e>
 800b01a:	f10a 0301 	add.w	r3, sl, #1
 800b01e:	f88b 3000 	strb.w	r3, [fp]
 800b022:	e602      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	9a05      	ldr	r2, [sp, #20]
 800b028:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02e:	4293      	cmp	r3, r2
 800b030:	d029      	beq.n	800b086 <_dtoa_r+0xa0e>
 800b032:	9901      	ldr	r1, [sp, #4]
 800b034:	2300      	movs	r3, #0
 800b036:	220a      	movs	r2, #10
 800b038:	4648      	mov	r0, r9
 800b03a:	f000 f9d5 	bl	800b3e8 <__multadd>
 800b03e:	45a8      	cmp	r8, r5
 800b040:	9001      	str	r0, [sp, #4]
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	f04f 020a 	mov.w	r2, #10
 800b04a:	4641      	mov	r1, r8
 800b04c:	4648      	mov	r0, r9
 800b04e:	d107      	bne.n	800b060 <_dtoa_r+0x9e8>
 800b050:	f000 f9ca 	bl	800b3e8 <__multadd>
 800b054:	4680      	mov	r8, r0
 800b056:	4605      	mov	r5, r0
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	e775      	b.n	800af4c <_dtoa_r+0x8d4>
 800b060:	f000 f9c2 	bl	800b3e8 <__multadd>
 800b064:	4629      	mov	r1, r5
 800b066:	4680      	mov	r8, r0
 800b068:	2300      	movs	r3, #0
 800b06a:	220a      	movs	r2, #10
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 f9bb 	bl	800b3e8 <__multadd>
 800b072:	4605      	mov	r5, r0
 800b074:	e7f0      	b.n	800b058 <_dtoa_r+0x9e0>
 800b076:	f1bb 0f00 	cmp.w	fp, #0
 800b07a:	bfcc      	ite	gt
 800b07c:	465e      	movgt	r6, fp
 800b07e:	2601      	movle	r6, #1
 800b080:	443e      	add	r6, r7
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	9901      	ldr	r1, [sp, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	4648      	mov	r0, r9
 800b08c:	f000 fb58 	bl	800b740 <__lshift>
 800b090:	4621      	mov	r1, r4
 800b092:	9001      	str	r0, [sp, #4]
 800b094:	f000 fbc0 	bl	800b818 <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dcaf      	bgt.n	800affc <_dtoa_r+0x984>
 800b09c:	d102      	bne.n	800b0a4 <_dtoa_r+0xa2c>
 800b09e:	f01a 0f01 	tst.w	sl, #1
 800b0a2:	d1ab      	bne.n	800affc <_dtoa_r+0x984>
 800b0a4:	4633      	mov	r3, r6
 800b0a6:	461e      	mov	r6, r3
 800b0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ac:	2a30      	cmp	r2, #48	@ 0x30
 800b0ae:	d0fa      	beq.n	800b0a6 <_dtoa_r+0xa2e>
 800b0b0:	e5bb      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b0b2:	429f      	cmp	r7, r3
 800b0b4:	d1a3      	bne.n	800affe <_dtoa_r+0x986>
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	2331      	movs	r3, #49	@ 0x31
 800b0be:	703b      	strb	r3, [r7, #0]
 800b0c0:	e5b3      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b0c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0c4:	4f16      	ldr	r7, [pc, #88]	@ (800b120 <_dtoa_r+0xaa8>)
 800b0c6:	b11b      	cbz	r3, 800b0d0 <_dtoa_r+0xa58>
 800b0c8:	f107 0308 	add.w	r3, r7, #8
 800b0cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	b011      	add	sp, #68	@ 0x44
 800b0d4:	ecbd 8b02 	vpop	{d8}
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	f77f ae36 	ble.w	800ad50 <_dtoa_r+0x6d8>
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	e656      	b.n	800ad9a <_dtoa_r+0x722>
 800b0ec:	f1bb 0f00 	cmp.w	fp, #0
 800b0f0:	f77f aed7 	ble.w	800aea2 <_dtoa_r+0x82a>
 800b0f4:	463e      	mov	r6, r7
 800b0f6:	9801      	ldr	r0, [sp, #4]
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7ff fa32 	bl	800a562 <quorem>
 800b0fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b102:	f806 ab01 	strb.w	sl, [r6], #1
 800b106:	1bf2      	subs	r2, r6, r7
 800b108:	4593      	cmp	fp, r2
 800b10a:	ddb4      	ble.n	800b076 <_dtoa_r+0x9fe>
 800b10c:	9901      	ldr	r1, [sp, #4]
 800b10e:	2300      	movs	r3, #0
 800b110:	220a      	movs	r2, #10
 800b112:	4648      	mov	r0, r9
 800b114:	f000 f968 	bl	800b3e8 <__multadd>
 800b118:	9001      	str	r0, [sp, #4]
 800b11a:	e7ec      	b.n	800b0f6 <_dtoa_r+0xa7e>
 800b11c:	0800c280 	.word	0x0800c280
 800b120:	0800c204 	.word	0x0800c204

0800b124 <_free_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4605      	mov	r5, r0
 800b128:	2900      	cmp	r1, #0
 800b12a:	d041      	beq.n	800b1b0 <_free_r+0x8c>
 800b12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b130:	1f0c      	subs	r4, r1, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	bfb8      	it	lt
 800b136:	18e4      	addlt	r4, r4, r3
 800b138:	f000 f8e8 	bl	800b30c <__malloc_lock>
 800b13c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b4 <_free_r+0x90>)
 800b13e:	6813      	ldr	r3, [r2, #0]
 800b140:	b933      	cbnz	r3, 800b150 <_free_r+0x2c>
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	6014      	str	r4, [r2, #0]
 800b146:	4628      	mov	r0, r5
 800b148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b14c:	f000 b8e4 	b.w	800b318 <__malloc_unlock>
 800b150:	42a3      	cmp	r3, r4
 800b152:	d908      	bls.n	800b166 <_free_r+0x42>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	1821      	adds	r1, r4, r0
 800b158:	428b      	cmp	r3, r1
 800b15a:	bf01      	itttt	eq
 800b15c:	6819      	ldreq	r1, [r3, #0]
 800b15e:	685b      	ldreq	r3, [r3, #4]
 800b160:	1809      	addeq	r1, r1, r0
 800b162:	6021      	streq	r1, [r4, #0]
 800b164:	e7ed      	b.n	800b142 <_free_r+0x1e>
 800b166:	461a      	mov	r2, r3
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	b10b      	cbz	r3, 800b170 <_free_r+0x4c>
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	d9fa      	bls.n	800b166 <_free_r+0x42>
 800b170:	6811      	ldr	r1, [r2, #0]
 800b172:	1850      	adds	r0, r2, r1
 800b174:	42a0      	cmp	r0, r4
 800b176:	d10b      	bne.n	800b190 <_free_r+0x6c>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	4401      	add	r1, r0
 800b17c:	1850      	adds	r0, r2, r1
 800b17e:	4283      	cmp	r3, r0
 800b180:	6011      	str	r1, [r2, #0]
 800b182:	d1e0      	bne.n	800b146 <_free_r+0x22>
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	6053      	str	r3, [r2, #4]
 800b18a:	4408      	add	r0, r1
 800b18c:	6010      	str	r0, [r2, #0]
 800b18e:	e7da      	b.n	800b146 <_free_r+0x22>
 800b190:	d902      	bls.n	800b198 <_free_r+0x74>
 800b192:	230c      	movs	r3, #12
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	e7d6      	b.n	800b146 <_free_r+0x22>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	1821      	adds	r1, r4, r0
 800b19c:	428b      	cmp	r3, r1
 800b19e:	bf04      	itt	eq
 800b1a0:	6819      	ldreq	r1, [r3, #0]
 800b1a2:	685b      	ldreq	r3, [r3, #4]
 800b1a4:	6063      	str	r3, [r4, #4]
 800b1a6:	bf04      	itt	eq
 800b1a8:	1809      	addeq	r1, r1, r0
 800b1aa:	6021      	streq	r1, [r4, #0]
 800b1ac:	6054      	str	r4, [r2, #4]
 800b1ae:	e7ca      	b.n	800b146 <_free_r+0x22>
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	240006f8 	.word	0x240006f8

0800b1b8 <malloc>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	@ (800b1c4 <malloc+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f000 b825 	b.w	800b20c <_malloc_r>
 800b1c2:	bf00      	nop
 800b1c4:	2400001c 	.word	0x2400001c

0800b1c8 <sbrk_aligned>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	4e0f      	ldr	r6, [pc, #60]	@ (800b208 <sbrk_aligned+0x40>)
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	6831      	ldr	r1, [r6, #0]
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	b911      	cbnz	r1, 800b1da <sbrk_aligned+0x12>
 800b1d4:	f000 fe9a 	bl	800bf0c <_sbrk_r>
 800b1d8:	6030      	str	r0, [r6, #0]
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 fe95 	bl	800bf0c <_sbrk_r>
 800b1e2:	1c43      	adds	r3, r0, #1
 800b1e4:	d103      	bne.n	800b1ee <sbrk_aligned+0x26>
 800b1e6:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}
 800b1ee:	1cc4      	adds	r4, r0, #3
 800b1f0:	f024 0403 	bic.w	r4, r4, #3
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d0f8      	beq.n	800b1ea <sbrk_aligned+0x22>
 800b1f8:	1a21      	subs	r1, r4, r0
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 fe86 	bl	800bf0c <_sbrk_r>
 800b200:	3001      	adds	r0, #1
 800b202:	d1f2      	bne.n	800b1ea <sbrk_aligned+0x22>
 800b204:	e7ef      	b.n	800b1e6 <sbrk_aligned+0x1e>
 800b206:	bf00      	nop
 800b208:	240006f4 	.word	0x240006f4

0800b20c <_malloc_r>:
 800b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b210:	1ccd      	adds	r5, r1, #3
 800b212:	f025 0503 	bic.w	r5, r5, #3
 800b216:	3508      	adds	r5, #8
 800b218:	2d0c      	cmp	r5, #12
 800b21a:	bf38      	it	cc
 800b21c:	250c      	movcc	r5, #12
 800b21e:	2d00      	cmp	r5, #0
 800b220:	4606      	mov	r6, r0
 800b222:	db01      	blt.n	800b228 <_malloc_r+0x1c>
 800b224:	42a9      	cmp	r1, r5
 800b226:	d904      	bls.n	800b232 <_malloc_r+0x26>
 800b228:	230c      	movs	r3, #12
 800b22a:	6033      	str	r3, [r6, #0]
 800b22c:	2000      	movs	r0, #0
 800b22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b308 <_malloc_r+0xfc>
 800b236:	f000 f869 	bl	800b30c <__malloc_lock>
 800b23a:	f8d8 3000 	ldr.w	r3, [r8]
 800b23e:	461c      	mov	r4, r3
 800b240:	bb44      	cbnz	r4, 800b294 <_malloc_r+0x88>
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff ffbf 	bl	800b1c8 <sbrk_aligned>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	4604      	mov	r4, r0
 800b24e:	d158      	bne.n	800b302 <_malloc_r+0xf6>
 800b250:	f8d8 4000 	ldr.w	r4, [r8]
 800b254:	4627      	mov	r7, r4
 800b256:	2f00      	cmp	r7, #0
 800b258:	d143      	bne.n	800b2e2 <_malloc_r+0xd6>
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d04b      	beq.n	800b2f6 <_malloc_r+0xea>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	4639      	mov	r1, r7
 800b262:	4630      	mov	r0, r6
 800b264:	eb04 0903 	add.w	r9, r4, r3
 800b268:	f000 fe50 	bl	800bf0c <_sbrk_r>
 800b26c:	4581      	cmp	r9, r0
 800b26e:	d142      	bne.n	800b2f6 <_malloc_r+0xea>
 800b270:	6821      	ldr	r1, [r4, #0]
 800b272:	1a6d      	subs	r5, r5, r1
 800b274:	4629      	mov	r1, r5
 800b276:	4630      	mov	r0, r6
 800b278:	f7ff ffa6 	bl	800b1c8 <sbrk_aligned>
 800b27c:	3001      	adds	r0, #1
 800b27e:	d03a      	beq.n	800b2f6 <_malloc_r+0xea>
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	442b      	add	r3, r5
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	f8d8 3000 	ldr.w	r3, [r8]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	bb62      	cbnz	r2, 800b2e8 <_malloc_r+0xdc>
 800b28e:	f8c8 7000 	str.w	r7, [r8]
 800b292:	e00f      	b.n	800b2b4 <_malloc_r+0xa8>
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	1b52      	subs	r2, r2, r5
 800b298:	d420      	bmi.n	800b2dc <_malloc_r+0xd0>
 800b29a:	2a0b      	cmp	r2, #11
 800b29c:	d917      	bls.n	800b2ce <_malloc_r+0xc2>
 800b29e:	1961      	adds	r1, r4, r5
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	6025      	str	r5, [r4, #0]
 800b2a4:	bf18      	it	ne
 800b2a6:	6059      	strne	r1, [r3, #4]
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	bf08      	it	eq
 800b2ac:	f8c8 1000 	streq.w	r1, [r8]
 800b2b0:	5162      	str	r2, [r4, r5]
 800b2b2:	604b      	str	r3, [r1, #4]
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f82f 	bl	800b318 <__malloc_unlock>
 800b2ba:	f104 000b 	add.w	r0, r4, #11
 800b2be:	1d23      	adds	r3, r4, #4
 800b2c0:	f020 0007 	bic.w	r0, r0, #7
 800b2c4:	1ac2      	subs	r2, r0, r3
 800b2c6:	bf1c      	itt	ne
 800b2c8:	1a1b      	subne	r3, r3, r0
 800b2ca:	50a3      	strne	r3, [r4, r2]
 800b2cc:	e7af      	b.n	800b22e <_malloc_r+0x22>
 800b2ce:	6862      	ldr	r2, [r4, #4]
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	bf0c      	ite	eq
 800b2d4:	f8c8 2000 	streq.w	r2, [r8]
 800b2d8:	605a      	strne	r2, [r3, #4]
 800b2da:	e7eb      	b.n	800b2b4 <_malloc_r+0xa8>
 800b2dc:	4623      	mov	r3, r4
 800b2de:	6864      	ldr	r4, [r4, #4]
 800b2e0:	e7ae      	b.n	800b240 <_malloc_r+0x34>
 800b2e2:	463c      	mov	r4, r7
 800b2e4:	687f      	ldr	r7, [r7, #4]
 800b2e6:	e7b6      	b.n	800b256 <_malloc_r+0x4a>
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d1fb      	bne.n	800b2e8 <_malloc_r+0xdc>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	6053      	str	r3, [r2, #4]
 800b2f4:	e7de      	b.n	800b2b4 <_malloc_r+0xa8>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 f80c 	bl	800b318 <__malloc_unlock>
 800b300:	e794      	b.n	800b22c <_malloc_r+0x20>
 800b302:	6005      	str	r5, [r0, #0]
 800b304:	e7d6      	b.n	800b2b4 <_malloc_r+0xa8>
 800b306:	bf00      	nop
 800b308:	240006f8 	.word	0x240006f8

0800b30c <__malloc_lock>:
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <__malloc_lock+0x8>)
 800b30e:	f7ff b926 	b.w	800a55e <__retarget_lock_acquire_recursive>
 800b312:	bf00      	nop
 800b314:	240006f0 	.word	0x240006f0

0800b318 <__malloc_unlock>:
 800b318:	4801      	ldr	r0, [pc, #4]	@ (800b320 <__malloc_unlock+0x8>)
 800b31a:	f7ff b921 	b.w	800a560 <__retarget_lock_release_recursive>
 800b31e:	bf00      	nop
 800b320:	240006f0 	.word	0x240006f0

0800b324 <_Balloc>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	69c6      	ldr	r6, [r0, #28]
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	b976      	cbnz	r6, 800b34c <_Balloc+0x28>
 800b32e:	2010      	movs	r0, #16
 800b330:	f7ff ff42 	bl	800b1b8 <malloc>
 800b334:	4602      	mov	r2, r0
 800b336:	61e0      	str	r0, [r4, #28]
 800b338:	b920      	cbnz	r0, 800b344 <_Balloc+0x20>
 800b33a:	4b18      	ldr	r3, [pc, #96]	@ (800b39c <_Balloc+0x78>)
 800b33c:	4818      	ldr	r0, [pc, #96]	@ (800b3a0 <_Balloc+0x7c>)
 800b33e:	216b      	movs	r1, #107	@ 0x6b
 800b340:	f000 fe02 	bl	800bf48 <__assert_func>
 800b344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b348:	6006      	str	r6, [r0, #0]
 800b34a:	60c6      	str	r6, [r0, #12]
 800b34c:	69e6      	ldr	r6, [r4, #28]
 800b34e:	68f3      	ldr	r3, [r6, #12]
 800b350:	b183      	cbz	r3, 800b374 <_Balloc+0x50>
 800b352:	69e3      	ldr	r3, [r4, #28]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b35a:	b9b8      	cbnz	r0, 800b38c <_Balloc+0x68>
 800b35c:	2101      	movs	r1, #1
 800b35e:	fa01 f605 	lsl.w	r6, r1, r5
 800b362:	1d72      	adds	r2, r6, #5
 800b364:	0092      	lsls	r2, r2, #2
 800b366:	4620      	mov	r0, r4
 800b368:	f000 fe0c 	bl	800bf84 <_calloc_r>
 800b36c:	b160      	cbz	r0, 800b388 <_Balloc+0x64>
 800b36e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b372:	e00e      	b.n	800b392 <_Balloc+0x6e>
 800b374:	2221      	movs	r2, #33	@ 0x21
 800b376:	2104      	movs	r1, #4
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fe03 	bl	800bf84 <_calloc_r>
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	60f0      	str	r0, [r6, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e4      	bne.n	800b352 <_Balloc+0x2e>
 800b388:	2000      	movs	r0, #0
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	6802      	ldr	r2, [r0, #0]
 800b38e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b392:	2300      	movs	r3, #0
 800b394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b398:	e7f7      	b.n	800b38a <_Balloc+0x66>
 800b39a:	bf00      	nop
 800b39c:	0800c211 	.word	0x0800c211
 800b3a0:	0800c291 	.word	0x0800c291

0800b3a4 <_Bfree>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	69c6      	ldr	r6, [r0, #28]
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	b976      	cbnz	r6, 800b3cc <_Bfree+0x28>
 800b3ae:	2010      	movs	r0, #16
 800b3b0:	f7ff ff02 	bl	800b1b8 <malloc>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	61e8      	str	r0, [r5, #28]
 800b3b8:	b920      	cbnz	r0, 800b3c4 <_Bfree+0x20>
 800b3ba:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <_Bfree+0x3c>)
 800b3bc:	4809      	ldr	r0, [pc, #36]	@ (800b3e4 <_Bfree+0x40>)
 800b3be:	218f      	movs	r1, #143	@ 0x8f
 800b3c0:	f000 fdc2 	bl	800bf48 <__assert_func>
 800b3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3c8:	6006      	str	r6, [r0, #0]
 800b3ca:	60c6      	str	r6, [r0, #12]
 800b3cc:	b13c      	cbz	r4, 800b3de <_Bfree+0x3a>
 800b3ce:	69eb      	ldr	r3, [r5, #28]
 800b3d0:	6862      	ldr	r2, [r4, #4]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3d8:	6021      	str	r1, [r4, #0]
 800b3da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	0800c211 	.word	0x0800c211
 800b3e4:	0800c291 	.word	0x0800c291

0800b3e8 <__multadd>:
 800b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	690d      	ldr	r5, [r1, #16]
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	461e      	mov	r6, r3
 800b3f4:	f101 0c14 	add.w	ip, r1, #20
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b3fe:	b299      	uxth	r1, r3
 800b400:	fb02 6101 	mla	r1, r2, r1, r6
 800b404:	0c1e      	lsrs	r6, r3, #16
 800b406:	0c0b      	lsrs	r3, r1, #16
 800b408:	fb02 3306 	mla	r3, r2, r6, r3
 800b40c:	b289      	uxth	r1, r1
 800b40e:	3001      	adds	r0, #1
 800b410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b414:	4285      	cmp	r5, r0
 800b416:	f84c 1b04 	str.w	r1, [ip], #4
 800b41a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b41e:	dcec      	bgt.n	800b3fa <__multadd+0x12>
 800b420:	b30e      	cbz	r6, 800b466 <__multadd+0x7e>
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	42ab      	cmp	r3, r5
 800b426:	dc19      	bgt.n	800b45c <__multadd+0x74>
 800b428:	6861      	ldr	r1, [r4, #4]
 800b42a:	4638      	mov	r0, r7
 800b42c:	3101      	adds	r1, #1
 800b42e:	f7ff ff79 	bl	800b324 <_Balloc>
 800b432:	4680      	mov	r8, r0
 800b434:	b928      	cbnz	r0, 800b442 <__multadd+0x5a>
 800b436:	4602      	mov	r2, r0
 800b438:	4b0c      	ldr	r3, [pc, #48]	@ (800b46c <__multadd+0x84>)
 800b43a:	480d      	ldr	r0, [pc, #52]	@ (800b470 <__multadd+0x88>)
 800b43c:	21ba      	movs	r1, #186	@ 0xba
 800b43e:	f000 fd83 	bl	800bf48 <__assert_func>
 800b442:	6922      	ldr	r2, [r4, #16]
 800b444:	3202      	adds	r2, #2
 800b446:	f104 010c 	add.w	r1, r4, #12
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	300c      	adds	r0, #12
 800b44e:	f000 fd6d 	bl	800bf2c <memcpy>
 800b452:	4621      	mov	r1, r4
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff ffa5 	bl	800b3a4 <_Bfree>
 800b45a:	4644      	mov	r4, r8
 800b45c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b460:	3501      	adds	r5, #1
 800b462:	615e      	str	r6, [r3, #20]
 800b464:	6125      	str	r5, [r4, #16]
 800b466:	4620      	mov	r0, r4
 800b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46c:	0800c280 	.word	0x0800c280
 800b470:	0800c291 	.word	0x0800c291

0800b474 <__hi0bits>:
 800b474:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b478:	4603      	mov	r3, r0
 800b47a:	bf36      	itet	cc
 800b47c:	0403      	lslcc	r3, r0, #16
 800b47e:	2000      	movcs	r0, #0
 800b480:	2010      	movcc	r0, #16
 800b482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b486:	bf3c      	itt	cc
 800b488:	021b      	lslcc	r3, r3, #8
 800b48a:	3008      	addcc	r0, #8
 800b48c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b490:	bf3c      	itt	cc
 800b492:	011b      	lslcc	r3, r3, #4
 800b494:	3004      	addcc	r0, #4
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b49a:	bf3c      	itt	cc
 800b49c:	009b      	lslcc	r3, r3, #2
 800b49e:	3002      	addcc	r0, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	db05      	blt.n	800b4b0 <__hi0bits+0x3c>
 800b4a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4a8:	f100 0001 	add.w	r0, r0, #1
 800b4ac:	bf08      	it	eq
 800b4ae:	2020      	moveq	r0, #32
 800b4b0:	4770      	bx	lr

0800b4b2 <__lo0bits>:
 800b4b2:	6803      	ldr	r3, [r0, #0]
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	f013 0007 	ands.w	r0, r3, #7
 800b4ba:	d00b      	beq.n	800b4d4 <__lo0bits+0x22>
 800b4bc:	07d9      	lsls	r1, r3, #31
 800b4be:	d421      	bmi.n	800b504 <__lo0bits+0x52>
 800b4c0:	0798      	lsls	r0, r3, #30
 800b4c2:	bf49      	itett	mi
 800b4c4:	085b      	lsrmi	r3, r3, #1
 800b4c6:	089b      	lsrpl	r3, r3, #2
 800b4c8:	2001      	movmi	r0, #1
 800b4ca:	6013      	strmi	r3, [r2, #0]
 800b4cc:	bf5c      	itt	pl
 800b4ce:	6013      	strpl	r3, [r2, #0]
 800b4d0:	2002      	movpl	r0, #2
 800b4d2:	4770      	bx	lr
 800b4d4:	b299      	uxth	r1, r3
 800b4d6:	b909      	cbnz	r1, 800b4dc <__lo0bits+0x2a>
 800b4d8:	0c1b      	lsrs	r3, r3, #16
 800b4da:	2010      	movs	r0, #16
 800b4dc:	b2d9      	uxtb	r1, r3
 800b4de:	b909      	cbnz	r1, 800b4e4 <__lo0bits+0x32>
 800b4e0:	3008      	adds	r0, #8
 800b4e2:	0a1b      	lsrs	r3, r3, #8
 800b4e4:	0719      	lsls	r1, r3, #28
 800b4e6:	bf04      	itt	eq
 800b4e8:	091b      	lsreq	r3, r3, #4
 800b4ea:	3004      	addeq	r0, #4
 800b4ec:	0799      	lsls	r1, r3, #30
 800b4ee:	bf04      	itt	eq
 800b4f0:	089b      	lsreq	r3, r3, #2
 800b4f2:	3002      	addeq	r0, #2
 800b4f4:	07d9      	lsls	r1, r3, #31
 800b4f6:	d403      	bmi.n	800b500 <__lo0bits+0x4e>
 800b4f8:	085b      	lsrs	r3, r3, #1
 800b4fa:	f100 0001 	add.w	r0, r0, #1
 800b4fe:	d003      	beq.n	800b508 <__lo0bits+0x56>
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4770      	bx	lr
 800b504:	2000      	movs	r0, #0
 800b506:	4770      	bx	lr
 800b508:	2020      	movs	r0, #32
 800b50a:	4770      	bx	lr

0800b50c <__i2b>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	2101      	movs	r1, #1
 800b512:	f7ff ff07 	bl	800b324 <_Balloc>
 800b516:	4602      	mov	r2, r0
 800b518:	b928      	cbnz	r0, 800b526 <__i2b+0x1a>
 800b51a:	4b05      	ldr	r3, [pc, #20]	@ (800b530 <__i2b+0x24>)
 800b51c:	4805      	ldr	r0, [pc, #20]	@ (800b534 <__i2b+0x28>)
 800b51e:	f240 1145 	movw	r1, #325	@ 0x145
 800b522:	f000 fd11 	bl	800bf48 <__assert_func>
 800b526:	2301      	movs	r3, #1
 800b528:	6144      	str	r4, [r0, #20]
 800b52a:	6103      	str	r3, [r0, #16]
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	bf00      	nop
 800b530:	0800c280 	.word	0x0800c280
 800b534:	0800c291 	.word	0x0800c291

0800b538 <__multiply>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	4614      	mov	r4, r2
 800b53e:	690a      	ldr	r2, [r1, #16]
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	429a      	cmp	r2, r3
 800b544:	bfa8      	it	ge
 800b546:	4623      	movge	r3, r4
 800b548:	460f      	mov	r7, r1
 800b54a:	bfa4      	itt	ge
 800b54c:	460c      	movge	r4, r1
 800b54e:	461f      	movge	r7, r3
 800b550:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b554:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	6861      	ldr	r1, [r4, #4]
 800b55c:	eb0a 0609 	add.w	r6, sl, r9
 800b560:	42b3      	cmp	r3, r6
 800b562:	b085      	sub	sp, #20
 800b564:	bfb8      	it	lt
 800b566:	3101      	addlt	r1, #1
 800b568:	f7ff fedc 	bl	800b324 <_Balloc>
 800b56c:	b930      	cbnz	r0, 800b57c <__multiply+0x44>
 800b56e:	4602      	mov	r2, r0
 800b570:	4b44      	ldr	r3, [pc, #272]	@ (800b684 <__multiply+0x14c>)
 800b572:	4845      	ldr	r0, [pc, #276]	@ (800b688 <__multiply+0x150>)
 800b574:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b578:	f000 fce6 	bl	800bf48 <__assert_func>
 800b57c:	f100 0514 	add.w	r5, r0, #20
 800b580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b584:	462b      	mov	r3, r5
 800b586:	2200      	movs	r2, #0
 800b588:	4543      	cmp	r3, r8
 800b58a:	d321      	bcc.n	800b5d0 <__multiply+0x98>
 800b58c:	f107 0114 	add.w	r1, r7, #20
 800b590:	f104 0214 	add.w	r2, r4, #20
 800b594:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b598:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	1b13      	subs	r3, r2, r4
 800b5a0:	3b15      	subs	r3, #21
 800b5a2:	f023 0303 	bic.w	r3, r3, #3
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	f104 0715 	add.w	r7, r4, #21
 800b5ac:	42ba      	cmp	r2, r7
 800b5ae:	bf38      	it	cc
 800b5b0:	2304      	movcc	r3, #4
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	9103      	str	r1, [sp, #12]
 800b5b8:	428b      	cmp	r3, r1
 800b5ba:	d80c      	bhi.n	800b5d6 <__multiply+0x9e>
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	dd03      	ble.n	800b5c8 <__multiply+0x90>
 800b5c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d05b      	beq.n	800b680 <__multiply+0x148>
 800b5c8:	6106      	str	r6, [r0, #16]
 800b5ca:	b005      	add	sp, #20
 800b5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d0:	f843 2b04 	str.w	r2, [r3], #4
 800b5d4:	e7d8      	b.n	800b588 <__multiply+0x50>
 800b5d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5da:	f1ba 0f00 	cmp.w	sl, #0
 800b5de:	d024      	beq.n	800b62a <__multiply+0xf2>
 800b5e0:	f104 0e14 	add.w	lr, r4, #20
 800b5e4:	46a9      	mov	r9, r5
 800b5e6:	f04f 0c00 	mov.w	ip, #0
 800b5ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b5f2:	fa1f fb87 	uxth.w	fp, r7
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b600:	f8d9 7000 	ldr.w	r7, [r9]
 800b604:	4463      	add	r3, ip
 800b606:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b60a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b60e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b612:	b29b      	uxth	r3, r3
 800b614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b618:	4572      	cmp	r2, lr
 800b61a:	f849 3b04 	str.w	r3, [r9], #4
 800b61e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b622:	d8e2      	bhi.n	800b5ea <__multiply+0xb2>
 800b624:	9b01      	ldr	r3, [sp, #4]
 800b626:	f845 c003 	str.w	ip, [r5, r3]
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b630:	3104      	adds	r1, #4
 800b632:	f1b9 0f00 	cmp.w	r9, #0
 800b636:	d021      	beq.n	800b67c <__multiply+0x144>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	f104 0c14 	add.w	ip, r4, #20
 800b63e:	46ae      	mov	lr, r5
 800b640:	f04f 0a00 	mov.w	sl, #0
 800b644:	f8bc b000 	ldrh.w	fp, [ip]
 800b648:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b64c:	fb09 770b 	mla	r7, r9, fp, r7
 800b650:	4457      	add	r7, sl
 800b652:	b29b      	uxth	r3, r3
 800b654:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b658:	f84e 3b04 	str.w	r3, [lr], #4
 800b65c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b664:	f8be 3000 	ldrh.w	r3, [lr]
 800b668:	fb09 330a 	mla	r3, r9, sl, r3
 800b66c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b670:	4562      	cmp	r2, ip
 800b672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b676:	d8e5      	bhi.n	800b644 <__multiply+0x10c>
 800b678:	9f01      	ldr	r7, [sp, #4]
 800b67a:	51eb      	str	r3, [r5, r7]
 800b67c:	3504      	adds	r5, #4
 800b67e:	e799      	b.n	800b5b4 <__multiply+0x7c>
 800b680:	3e01      	subs	r6, #1
 800b682:	e79b      	b.n	800b5bc <__multiply+0x84>
 800b684:	0800c280 	.word	0x0800c280
 800b688:	0800c291 	.word	0x0800c291

0800b68c <__pow5mult>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	4615      	mov	r5, r2
 800b692:	f012 0203 	ands.w	r2, r2, #3
 800b696:	4607      	mov	r7, r0
 800b698:	460e      	mov	r6, r1
 800b69a:	d007      	beq.n	800b6ac <__pow5mult+0x20>
 800b69c:	4c25      	ldr	r4, [pc, #148]	@ (800b734 <__pow5mult+0xa8>)
 800b69e:	3a01      	subs	r2, #1
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6a6:	f7ff fe9f 	bl	800b3e8 <__multadd>
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	10ad      	asrs	r5, r5, #2
 800b6ae:	d03d      	beq.n	800b72c <__pow5mult+0xa0>
 800b6b0:	69fc      	ldr	r4, [r7, #28]
 800b6b2:	b97c      	cbnz	r4, 800b6d4 <__pow5mult+0x48>
 800b6b4:	2010      	movs	r0, #16
 800b6b6:	f7ff fd7f 	bl	800b1b8 <malloc>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	61f8      	str	r0, [r7, #28]
 800b6be:	b928      	cbnz	r0, 800b6cc <__pow5mult+0x40>
 800b6c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b738 <__pow5mult+0xac>)
 800b6c2:	481e      	ldr	r0, [pc, #120]	@ (800b73c <__pow5mult+0xb0>)
 800b6c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6c8:	f000 fc3e 	bl	800bf48 <__assert_func>
 800b6cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6d0:	6004      	str	r4, [r0, #0]
 800b6d2:	60c4      	str	r4, [r0, #12]
 800b6d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6dc:	b94c      	cbnz	r4, 800b6f2 <__pow5mult+0x66>
 800b6de:	f240 2171 	movw	r1, #625	@ 0x271
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f7ff ff12 	bl	800b50c <__i2b>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	07eb      	lsls	r3, r5, #31
 800b6f8:	d50a      	bpl.n	800b710 <__pow5mult+0x84>
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4638      	mov	r0, r7
 800b700:	f7ff ff1a 	bl	800b538 <__multiply>
 800b704:	4631      	mov	r1, r6
 800b706:	4680      	mov	r8, r0
 800b708:	4638      	mov	r0, r7
 800b70a:	f7ff fe4b 	bl	800b3a4 <_Bfree>
 800b70e:	4646      	mov	r6, r8
 800b710:	106d      	asrs	r5, r5, #1
 800b712:	d00b      	beq.n	800b72c <__pow5mult+0xa0>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	b938      	cbnz	r0, 800b728 <__pow5mult+0x9c>
 800b718:	4622      	mov	r2, r4
 800b71a:	4621      	mov	r1, r4
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff ff0b 	bl	800b538 <__multiply>
 800b722:	6020      	str	r0, [r4, #0]
 800b724:	f8c0 9000 	str.w	r9, [r0]
 800b728:	4604      	mov	r4, r0
 800b72a:	e7e4      	b.n	800b6f6 <__pow5mult+0x6a>
 800b72c:	4630      	mov	r0, r6
 800b72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b732:	bf00      	nop
 800b734:	0800c2ec 	.word	0x0800c2ec
 800b738:	0800c211 	.word	0x0800c211
 800b73c:	0800c291 	.word	0x0800c291

0800b740 <__lshift>:
 800b740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b744:	460c      	mov	r4, r1
 800b746:	6849      	ldr	r1, [r1, #4]
 800b748:	6923      	ldr	r3, [r4, #16]
 800b74a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	4607      	mov	r7, r0
 800b752:	4691      	mov	r9, r2
 800b754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b758:	f108 0601 	add.w	r6, r8, #1
 800b75c:	42b3      	cmp	r3, r6
 800b75e:	db0b      	blt.n	800b778 <__lshift+0x38>
 800b760:	4638      	mov	r0, r7
 800b762:	f7ff fddf 	bl	800b324 <_Balloc>
 800b766:	4605      	mov	r5, r0
 800b768:	b948      	cbnz	r0, 800b77e <__lshift+0x3e>
 800b76a:	4602      	mov	r2, r0
 800b76c:	4b28      	ldr	r3, [pc, #160]	@ (800b810 <__lshift+0xd0>)
 800b76e:	4829      	ldr	r0, [pc, #164]	@ (800b814 <__lshift+0xd4>)
 800b770:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b774:	f000 fbe8 	bl	800bf48 <__assert_func>
 800b778:	3101      	adds	r1, #1
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	e7ee      	b.n	800b75c <__lshift+0x1c>
 800b77e:	2300      	movs	r3, #0
 800b780:	f100 0114 	add.w	r1, r0, #20
 800b784:	f100 0210 	add.w	r2, r0, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	4553      	cmp	r3, sl
 800b78c:	db33      	blt.n	800b7f6 <__lshift+0xb6>
 800b78e:	6920      	ldr	r0, [r4, #16]
 800b790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b794:	f104 0314 	add.w	r3, r4, #20
 800b798:	f019 091f 	ands.w	r9, r9, #31
 800b79c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7a4:	d02b      	beq.n	800b7fe <__lshift+0xbe>
 800b7a6:	f1c9 0e20 	rsb	lr, r9, #32
 800b7aa:	468a      	mov	sl, r1
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	fa00 f009 	lsl.w	r0, r0, r9
 800b7b4:	4310      	orrs	r0, r2
 800b7b6:	f84a 0b04 	str.w	r0, [sl], #4
 800b7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7be:	459c      	cmp	ip, r3
 800b7c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7c4:	d8f3      	bhi.n	800b7ae <__lshift+0x6e>
 800b7c6:	ebac 0304 	sub.w	r3, ip, r4
 800b7ca:	3b15      	subs	r3, #21
 800b7cc:	f023 0303 	bic.w	r3, r3, #3
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	f104 0015 	add.w	r0, r4, #21
 800b7d6:	4584      	cmp	ip, r0
 800b7d8:	bf38      	it	cc
 800b7da:	2304      	movcc	r3, #4
 800b7dc:	50ca      	str	r2, [r1, r3]
 800b7de:	b10a      	cbz	r2, 800b7e4 <__lshift+0xa4>
 800b7e0:	f108 0602 	add.w	r6, r8, #2
 800b7e4:	3e01      	subs	r6, #1
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	612e      	str	r6, [r5, #16]
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f7ff fdda 	bl	800b3a4 <_Bfree>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	e7c5      	b.n	800b78a <__lshift+0x4a>
 800b7fe:	3904      	subs	r1, #4
 800b800:	f853 2b04 	ldr.w	r2, [r3], #4
 800b804:	f841 2f04 	str.w	r2, [r1, #4]!
 800b808:	459c      	cmp	ip, r3
 800b80a:	d8f9      	bhi.n	800b800 <__lshift+0xc0>
 800b80c:	e7ea      	b.n	800b7e4 <__lshift+0xa4>
 800b80e:	bf00      	nop
 800b810:	0800c280 	.word	0x0800c280
 800b814:	0800c291 	.word	0x0800c291

0800b818 <__mcmp>:
 800b818:	690a      	ldr	r2, [r1, #16]
 800b81a:	4603      	mov	r3, r0
 800b81c:	6900      	ldr	r0, [r0, #16]
 800b81e:	1a80      	subs	r0, r0, r2
 800b820:	b530      	push	{r4, r5, lr}
 800b822:	d10e      	bne.n	800b842 <__mcmp+0x2a>
 800b824:	3314      	adds	r3, #20
 800b826:	3114      	adds	r1, #20
 800b828:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b82c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b830:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b834:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b838:	4295      	cmp	r5, r2
 800b83a:	d003      	beq.n	800b844 <__mcmp+0x2c>
 800b83c:	d205      	bcs.n	800b84a <__mcmp+0x32>
 800b83e:	f04f 30ff 	mov.w	r0, #4294967295
 800b842:	bd30      	pop	{r4, r5, pc}
 800b844:	42a3      	cmp	r3, r4
 800b846:	d3f3      	bcc.n	800b830 <__mcmp+0x18>
 800b848:	e7fb      	b.n	800b842 <__mcmp+0x2a>
 800b84a:	2001      	movs	r0, #1
 800b84c:	e7f9      	b.n	800b842 <__mcmp+0x2a>
	...

0800b850 <__mdiff>:
 800b850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	4689      	mov	r9, r1
 800b856:	4606      	mov	r6, r0
 800b858:	4611      	mov	r1, r2
 800b85a:	4648      	mov	r0, r9
 800b85c:	4614      	mov	r4, r2
 800b85e:	f7ff ffdb 	bl	800b818 <__mcmp>
 800b862:	1e05      	subs	r5, r0, #0
 800b864:	d112      	bne.n	800b88c <__mdiff+0x3c>
 800b866:	4629      	mov	r1, r5
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff fd5b 	bl	800b324 <_Balloc>
 800b86e:	4602      	mov	r2, r0
 800b870:	b928      	cbnz	r0, 800b87e <__mdiff+0x2e>
 800b872:	4b3f      	ldr	r3, [pc, #252]	@ (800b970 <__mdiff+0x120>)
 800b874:	f240 2137 	movw	r1, #567	@ 0x237
 800b878:	483e      	ldr	r0, [pc, #248]	@ (800b974 <__mdiff+0x124>)
 800b87a:	f000 fb65 	bl	800bf48 <__assert_func>
 800b87e:	2301      	movs	r3, #1
 800b880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b884:	4610      	mov	r0, r2
 800b886:	b003      	add	sp, #12
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	bfbc      	itt	lt
 800b88e:	464b      	movlt	r3, r9
 800b890:	46a1      	movlt	r9, r4
 800b892:	4630      	mov	r0, r6
 800b894:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b898:	bfba      	itte	lt
 800b89a:	461c      	movlt	r4, r3
 800b89c:	2501      	movlt	r5, #1
 800b89e:	2500      	movge	r5, #0
 800b8a0:	f7ff fd40 	bl	800b324 <_Balloc>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	b918      	cbnz	r0, 800b8b0 <__mdiff+0x60>
 800b8a8:	4b31      	ldr	r3, [pc, #196]	@ (800b970 <__mdiff+0x120>)
 800b8aa:	f240 2145 	movw	r1, #581	@ 0x245
 800b8ae:	e7e3      	b.n	800b878 <__mdiff+0x28>
 800b8b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8b4:	6926      	ldr	r6, [r4, #16]
 800b8b6:	60c5      	str	r5, [r0, #12]
 800b8b8:	f109 0310 	add.w	r3, r9, #16
 800b8bc:	f109 0514 	add.w	r5, r9, #20
 800b8c0:	f104 0e14 	add.w	lr, r4, #20
 800b8c4:	f100 0b14 	add.w	fp, r0, #20
 800b8c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	46d9      	mov	r9, fp
 800b8d4:	f04f 0c00 	mov.w	ip, #0
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	fa1f f38a 	uxth.w	r3, sl
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	b283      	uxth	r3, r0
 800b8ec:	1acb      	subs	r3, r1, r3
 800b8ee:	0c00      	lsrs	r0, r0, #16
 800b8f0:	4463      	add	r3, ip
 800b8f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b900:	4576      	cmp	r6, lr
 800b902:	f849 3b04 	str.w	r3, [r9], #4
 800b906:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b90a:	d8e5      	bhi.n	800b8d8 <__mdiff+0x88>
 800b90c:	1b33      	subs	r3, r6, r4
 800b90e:	3b15      	subs	r3, #21
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	3415      	adds	r4, #21
 800b916:	3304      	adds	r3, #4
 800b918:	42a6      	cmp	r6, r4
 800b91a:	bf38      	it	cc
 800b91c:	2304      	movcc	r3, #4
 800b91e:	441d      	add	r5, r3
 800b920:	445b      	add	r3, fp
 800b922:	461e      	mov	r6, r3
 800b924:	462c      	mov	r4, r5
 800b926:	4544      	cmp	r4, r8
 800b928:	d30e      	bcc.n	800b948 <__mdiff+0xf8>
 800b92a:	f108 0103 	add.w	r1, r8, #3
 800b92e:	1b49      	subs	r1, r1, r5
 800b930:	f021 0103 	bic.w	r1, r1, #3
 800b934:	3d03      	subs	r5, #3
 800b936:	45a8      	cmp	r8, r5
 800b938:	bf38      	it	cc
 800b93a:	2100      	movcc	r1, #0
 800b93c:	440b      	add	r3, r1
 800b93e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b942:	b191      	cbz	r1, 800b96a <__mdiff+0x11a>
 800b944:	6117      	str	r7, [r2, #16]
 800b946:	e79d      	b.n	800b884 <__mdiff+0x34>
 800b948:	f854 1b04 	ldr.w	r1, [r4], #4
 800b94c:	46e6      	mov	lr, ip
 800b94e:	0c08      	lsrs	r0, r1, #16
 800b950:	fa1c fc81 	uxtah	ip, ip, r1
 800b954:	4471      	add	r1, lr
 800b956:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b95a:	b289      	uxth	r1, r1
 800b95c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b960:	f846 1b04 	str.w	r1, [r6], #4
 800b964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b968:	e7dd      	b.n	800b926 <__mdiff+0xd6>
 800b96a:	3f01      	subs	r7, #1
 800b96c:	e7e7      	b.n	800b93e <__mdiff+0xee>
 800b96e:	bf00      	nop
 800b970:	0800c280 	.word	0x0800c280
 800b974:	0800c291 	.word	0x0800c291

0800b978 <__d2b>:
 800b978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	460f      	mov	r7, r1
 800b97e:	2101      	movs	r1, #1
 800b980:	ec59 8b10 	vmov	r8, r9, d0
 800b984:	4616      	mov	r6, r2
 800b986:	f7ff fccd 	bl	800b324 <_Balloc>
 800b98a:	4604      	mov	r4, r0
 800b98c:	b930      	cbnz	r0, 800b99c <__d2b+0x24>
 800b98e:	4602      	mov	r2, r0
 800b990:	4b23      	ldr	r3, [pc, #140]	@ (800ba20 <__d2b+0xa8>)
 800b992:	4824      	ldr	r0, [pc, #144]	@ (800ba24 <__d2b+0xac>)
 800b994:	f240 310f 	movw	r1, #783	@ 0x30f
 800b998:	f000 fad6 	bl	800bf48 <__assert_func>
 800b99c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9a4:	b10d      	cbz	r5, 800b9aa <__d2b+0x32>
 800b9a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b9b0:	d023      	beq.n	800b9fa <__d2b+0x82>
 800b9b2:	4668      	mov	r0, sp
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	f7ff fd7c 	bl	800b4b2 <__lo0bits>
 800b9ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9be:	b1d0      	cbz	r0, 800b9f6 <__d2b+0x7e>
 800b9c0:	f1c0 0320 	rsb	r3, r0, #32
 800b9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	40c2      	lsrs	r2, r0
 800b9cc:	6163      	str	r3, [r4, #20]
 800b9ce:	9201      	str	r2, [sp, #4]
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	61a3      	str	r3, [r4, #24]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bf0c      	ite	eq
 800b9d8:	2201      	moveq	r2, #1
 800b9da:	2202      	movne	r2, #2
 800b9dc:	6122      	str	r2, [r4, #16]
 800b9de:	b1a5      	cbz	r5, 800ba0a <__d2b+0x92>
 800b9e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9e4:	4405      	add	r5, r0
 800b9e6:	603d      	str	r5, [r7, #0]
 800b9e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9ec:	6030      	str	r0, [r6, #0]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	b003      	add	sp, #12
 800b9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9f6:	6161      	str	r1, [r4, #20]
 800b9f8:	e7ea      	b.n	800b9d0 <__d2b+0x58>
 800b9fa:	a801      	add	r0, sp, #4
 800b9fc:	f7ff fd59 	bl	800b4b2 <__lo0bits>
 800ba00:	9b01      	ldr	r3, [sp, #4]
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	3020      	adds	r0, #32
 800ba06:	2201      	movs	r2, #1
 800ba08:	e7e8      	b.n	800b9dc <__d2b+0x64>
 800ba0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba12:	6038      	str	r0, [r7, #0]
 800ba14:	6918      	ldr	r0, [r3, #16]
 800ba16:	f7ff fd2d 	bl	800b474 <__hi0bits>
 800ba1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba1e:	e7e5      	b.n	800b9ec <__d2b+0x74>
 800ba20:	0800c280 	.word	0x0800c280
 800ba24:	0800c291 	.word	0x0800c291

0800ba28 <__sfputc_r>:
 800ba28:	6893      	ldr	r3, [r2, #8]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	b410      	push	{r4}
 800ba30:	6093      	str	r3, [r2, #8]
 800ba32:	da08      	bge.n	800ba46 <__sfputc_r+0x1e>
 800ba34:	6994      	ldr	r4, [r2, #24]
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	db01      	blt.n	800ba3e <__sfputc_r+0x16>
 800ba3a:	290a      	cmp	r1, #10
 800ba3c:	d103      	bne.n	800ba46 <__sfputc_r+0x1e>
 800ba3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba42:	f7fe bc7a 	b.w	800a33a <__swbuf_r>
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	1c58      	adds	r0, r3, #1
 800ba4a:	6010      	str	r0, [r2, #0]
 800ba4c:	7019      	strb	r1, [r3, #0]
 800ba4e:	4608      	mov	r0, r1
 800ba50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <__sfputs_r>:
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba58:	4606      	mov	r6, r0
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	18d5      	adds	r5, r2, r3
 800ba60:	42ac      	cmp	r4, r5
 800ba62:	d101      	bne.n	800ba68 <__sfputs_r+0x12>
 800ba64:	2000      	movs	r0, #0
 800ba66:	e007      	b.n	800ba78 <__sfputs_r+0x22>
 800ba68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6c:	463a      	mov	r2, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ffda 	bl	800ba28 <__sfputc_r>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d1f3      	bne.n	800ba60 <__sfputs_r+0xa>
 800ba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba7c <_vfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	460d      	mov	r5, r1
 800ba82:	b09d      	sub	sp, #116	@ 0x74
 800ba84:	4614      	mov	r4, r2
 800ba86:	4698      	mov	r8, r3
 800ba88:	4606      	mov	r6, r0
 800ba8a:	b118      	cbz	r0, 800ba94 <_vfiprintf_r+0x18>
 800ba8c:	6a03      	ldr	r3, [r0, #32]
 800ba8e:	b90b      	cbnz	r3, 800ba94 <_vfiprintf_r+0x18>
 800ba90:	f7fe fb6a 	bl	800a168 <__sinit>
 800ba94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	d405      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_vfiprintf_r+0x2a>
 800baa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baa2:	f7fe fd5c 	bl	800a55e <__retarget_lock_acquire_recursive>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	071b      	lsls	r3, r3, #28
 800baaa:	d501      	bpl.n	800bab0 <_vfiprintf_r+0x34>
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	b99b      	cbnz	r3, 800bad8 <_vfiprintf_r+0x5c>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7fe fc80 	bl	800a3b8 <__swsetup_r>
 800bab8:	b170      	cbz	r0, 800bad8 <_vfiprintf_r+0x5c>
 800baba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800babc:	07dc      	lsls	r4, r3, #31
 800babe:	d504      	bpl.n	800baca <_vfiprintf_r+0x4e>
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	b01d      	add	sp, #116	@ 0x74
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	0598      	lsls	r0, r3, #22
 800bace:	d4f7      	bmi.n	800bac0 <_vfiprintf_r+0x44>
 800bad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad2:	f7fe fd45 	bl	800a560 <__retarget_lock_release_recursive>
 800bad6:	e7f3      	b.n	800bac0 <_vfiprintf_r+0x44>
 800bad8:	2300      	movs	r3, #0
 800bada:	9309      	str	r3, [sp, #36]	@ 0x24
 800badc:	2320      	movs	r3, #32
 800bade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bae6:	2330      	movs	r3, #48	@ 0x30
 800bae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc98 <_vfiprintf_r+0x21c>
 800baec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baf0:	f04f 0901 	mov.w	r9, #1
 800baf4:	4623      	mov	r3, r4
 800baf6:	469a      	mov	sl, r3
 800baf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafc:	b10a      	cbz	r2, 800bb02 <_vfiprintf_r+0x86>
 800bafe:	2a25      	cmp	r2, #37	@ 0x25
 800bb00:	d1f9      	bne.n	800baf6 <_vfiprintf_r+0x7a>
 800bb02:	ebba 0b04 	subs.w	fp, sl, r4
 800bb06:	d00b      	beq.n	800bb20 <_vfiprintf_r+0xa4>
 800bb08:	465b      	mov	r3, fp
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ffa1 	bl	800ba56 <__sfputs_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f000 80a7 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1c:	445a      	add	r2, fp
 800bb1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb20:	f89a 3000 	ldrb.w	r3, [sl]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f000 809f 	beq.w	800bc68 <_vfiprintf_r+0x1ec>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb34:	f10a 0a01 	add.w	sl, sl, #1
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	9307      	str	r3, [sp, #28]
 800bb3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb40:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb42:	4654      	mov	r4, sl
 800bb44:	2205      	movs	r2, #5
 800bb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4a:	4853      	ldr	r0, [pc, #332]	@ (800bc98 <_vfiprintf_r+0x21c>)
 800bb4c:	f7f4 fbe0 	bl	8000310 <memchr>
 800bb50:	9a04      	ldr	r2, [sp, #16]
 800bb52:	b9d8      	cbnz	r0, 800bb8c <_vfiprintf_r+0x110>
 800bb54:	06d1      	lsls	r1, r2, #27
 800bb56:	bf44      	itt	mi
 800bb58:	2320      	movmi	r3, #32
 800bb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5e:	0713      	lsls	r3, r2, #28
 800bb60:	bf44      	itt	mi
 800bb62:	232b      	movmi	r3, #43	@ 0x2b
 800bb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb68:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6e:	d015      	beq.n	800bb9c <_vfiprintf_r+0x120>
 800bb70:	9a07      	ldr	r2, [sp, #28]
 800bb72:	4654      	mov	r4, sl
 800bb74:	2000      	movs	r0, #0
 800bb76:	f04f 0c0a 	mov.w	ip, #10
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb80:	3b30      	subs	r3, #48	@ 0x30
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d94b      	bls.n	800bc1e <_vfiprintf_r+0x1a2>
 800bb86:	b1b0      	cbz	r0, 800bbb6 <_vfiprintf_r+0x13a>
 800bb88:	9207      	str	r2, [sp, #28]
 800bb8a:	e014      	b.n	800bbb6 <_vfiprintf_r+0x13a>
 800bb8c:	eba0 0308 	sub.w	r3, r0, r8
 800bb90:	fa09 f303 	lsl.w	r3, r9, r3
 800bb94:	4313      	orrs	r3, r2
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	46a2      	mov	sl, r4
 800bb9a:	e7d2      	b.n	800bb42 <_vfiprintf_r+0xc6>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	1d19      	adds	r1, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9103      	str	r1, [sp, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfbb      	ittet	lt
 800bba8:	425b      	neglt	r3, r3
 800bbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bbae:	9307      	strge	r3, [sp, #28]
 800bbb0:	9307      	strlt	r3, [sp, #28]
 800bbb2:	bfb8      	it	lt
 800bbb4:	9204      	strlt	r2, [sp, #16]
 800bbb6:	7823      	ldrb	r3, [r4, #0]
 800bbb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbba:	d10a      	bne.n	800bbd2 <_vfiprintf_r+0x156>
 800bbbc:	7863      	ldrb	r3, [r4, #1]
 800bbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc0:	d132      	bne.n	800bc28 <_vfiprintf_r+0x1ac>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	1d1a      	adds	r2, r3, #4
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	9203      	str	r2, [sp, #12]
 800bbca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbce:	3402      	adds	r4, #2
 800bbd0:	9305      	str	r3, [sp, #20]
 800bbd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bca8 <_vfiprintf_r+0x22c>
 800bbd6:	7821      	ldrb	r1, [r4, #0]
 800bbd8:	2203      	movs	r2, #3
 800bbda:	4650      	mov	r0, sl
 800bbdc:	f7f4 fb98 	bl	8000310 <memchr>
 800bbe0:	b138      	cbz	r0, 800bbf2 <_vfiprintf_r+0x176>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	eba0 000a 	sub.w	r0, r0, sl
 800bbe8:	2240      	movs	r2, #64	@ 0x40
 800bbea:	4082      	lsls	r2, r0
 800bbec:	4313      	orrs	r3, r2
 800bbee:	3401      	adds	r4, #1
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	4829      	ldr	r0, [pc, #164]	@ (800bc9c <_vfiprintf_r+0x220>)
 800bbf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbfc:	2206      	movs	r2, #6
 800bbfe:	f7f4 fb87 	bl	8000310 <memchr>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d03f      	beq.n	800bc86 <_vfiprintf_r+0x20a>
 800bc06:	4b26      	ldr	r3, [pc, #152]	@ (800bca0 <_vfiprintf_r+0x224>)
 800bc08:	bb1b      	cbnz	r3, 800bc52 <_vfiprintf_r+0x1d6>
 800bc0a:	9b03      	ldr	r3, [sp, #12]
 800bc0c:	3307      	adds	r3, #7
 800bc0e:	f023 0307 	bic.w	r3, r3, #7
 800bc12:	3308      	adds	r3, #8
 800bc14:	9303      	str	r3, [sp, #12]
 800bc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc18:	443b      	add	r3, r7
 800bc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1c:	e76a      	b.n	800baf4 <_vfiprintf_r+0x78>
 800bc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc22:	460c      	mov	r4, r1
 800bc24:	2001      	movs	r0, #1
 800bc26:	e7a8      	b.n	800bb7a <_vfiprintf_r+0xfe>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	3401      	adds	r4, #1
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f04f 0c0a 	mov.w	ip, #10
 800bc34:	4620      	mov	r0, r4
 800bc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc3a:	3a30      	subs	r2, #48	@ 0x30
 800bc3c:	2a09      	cmp	r2, #9
 800bc3e:	d903      	bls.n	800bc48 <_vfiprintf_r+0x1cc>
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0c6      	beq.n	800bbd2 <_vfiprintf_r+0x156>
 800bc44:	9105      	str	r1, [sp, #20]
 800bc46:	e7c4      	b.n	800bbd2 <_vfiprintf_r+0x156>
 800bc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e7f0      	b.n	800bc34 <_vfiprintf_r+0x1b8>
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	462a      	mov	r2, r5
 800bc58:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fd fe4f 	bl	8009900 <_printf_float>
 800bc62:	4607      	mov	r7, r0
 800bc64:	1c78      	adds	r0, r7, #1
 800bc66:	d1d6      	bne.n	800bc16 <_vfiprintf_r+0x19a>
 800bc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x1fe>
 800bc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc76:	f7fe fc73 	bl	800a560 <__retarget_lock_release_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	065b      	lsls	r3, r3, #25
 800bc7e:	f53f af1f 	bmi.w	800bac0 <_vfiprintf_r+0x44>
 800bc82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc84:	e71e      	b.n	800bac4 <_vfiprintf_r+0x48>
 800bc86:	ab03      	add	r3, sp, #12
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <_vfiprintf_r+0x228>)
 800bc8e:	a904      	add	r1, sp, #16
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7fe f8bd 	bl	8009e10 <_printf_i>
 800bc96:	e7e4      	b.n	800bc62 <_vfiprintf_r+0x1e6>
 800bc98:	0800c3e8 	.word	0x0800c3e8
 800bc9c:	0800c3f2 	.word	0x0800c3f2
 800bca0:	08009901 	.word	0x08009901
 800bca4:	0800ba57 	.word	0x0800ba57
 800bca8:	0800c3ee 	.word	0x0800c3ee

0800bcac <__sflush_r>:
 800bcac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	0716      	lsls	r6, r2, #28
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	460c      	mov	r4, r1
 800bcba:	d454      	bmi.n	800bd66 <__sflush_r+0xba>
 800bcbc:	684b      	ldr	r3, [r1, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dc02      	bgt.n	800bcc8 <__sflush_r+0x1c>
 800bcc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd48      	ble.n	800bd5a <__sflush_r+0xae>
 800bcc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	d045      	beq.n	800bd5a <__sflush_r+0xae>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcd4:	682f      	ldr	r7, [r5, #0]
 800bcd6:	6a21      	ldr	r1, [r4, #32]
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	d030      	beq.n	800bd3e <__sflush_r+0x92>
 800bcdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	0759      	lsls	r1, r3, #29
 800bce2:	d505      	bpl.n	800bcf0 <__sflush_r+0x44>
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcea:	b10b      	cbz	r3, 800bcf0 <__sflush_r+0x44>
 800bcec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcee:	1ad2      	subs	r2, r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcf4:	6a21      	ldr	r1, [r4, #32]
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b0      	blx	r6
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	d106      	bne.n	800bd0e <__sflush_r+0x62>
 800bd00:	6829      	ldr	r1, [r5, #0]
 800bd02:	291d      	cmp	r1, #29
 800bd04:	d82b      	bhi.n	800bd5e <__sflush_r+0xb2>
 800bd06:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb0 <__sflush_r+0x104>)
 800bd08:	410a      	asrs	r2, r1
 800bd0a:	07d6      	lsls	r6, r2, #31
 800bd0c:	d427      	bmi.n	800bd5e <__sflush_r+0xb2>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	6062      	str	r2, [r4, #4]
 800bd12:	04d9      	lsls	r1, r3, #19
 800bd14:	6922      	ldr	r2, [r4, #16]
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	d504      	bpl.n	800bd24 <__sflush_r+0x78>
 800bd1a:	1c42      	adds	r2, r0, #1
 800bd1c:	d101      	bne.n	800bd22 <__sflush_r+0x76>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	b903      	cbnz	r3, 800bd24 <__sflush_r+0x78>
 800bd22:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd26:	602f      	str	r7, [r5, #0]
 800bd28:	b1b9      	cbz	r1, 800bd5a <__sflush_r+0xae>
 800bd2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd2e:	4299      	cmp	r1, r3
 800bd30:	d002      	beq.n	800bd38 <__sflush_r+0x8c>
 800bd32:	4628      	mov	r0, r5
 800bd34:	f7ff f9f6 	bl	800b124 <_free_r>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd3c:	e00d      	b.n	800bd5a <__sflush_r+0xae>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b0      	blx	r6
 800bd44:	4602      	mov	r2, r0
 800bd46:	1c50      	adds	r0, r2, #1
 800bd48:	d1c9      	bne.n	800bcde <__sflush_r+0x32>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0c6      	beq.n	800bcde <__sflush_r+0x32>
 800bd50:	2b1d      	cmp	r3, #29
 800bd52:	d001      	beq.n	800bd58 <__sflush_r+0xac>
 800bd54:	2b16      	cmp	r3, #22
 800bd56:	d11e      	bne.n	800bd96 <__sflush_r+0xea>
 800bd58:	602f      	str	r7, [r5, #0]
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	e022      	b.n	800bda4 <__sflush_r+0xf8>
 800bd5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd62:	b21b      	sxth	r3, r3
 800bd64:	e01b      	b.n	800bd9e <__sflush_r+0xf2>
 800bd66:	690f      	ldr	r7, [r1, #16]
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	d0f6      	beq.n	800bd5a <__sflush_r+0xae>
 800bd6c:	0793      	lsls	r3, r2, #30
 800bd6e:	680e      	ldr	r6, [r1, #0]
 800bd70:	bf08      	it	eq
 800bd72:	694b      	ldreq	r3, [r1, #20]
 800bd74:	600f      	str	r7, [r1, #0]
 800bd76:	bf18      	it	ne
 800bd78:	2300      	movne	r3, #0
 800bd7a:	eba6 0807 	sub.w	r8, r6, r7
 800bd7e:	608b      	str	r3, [r1, #8]
 800bd80:	f1b8 0f00 	cmp.w	r8, #0
 800bd84:	dde9      	ble.n	800bd5a <__sflush_r+0xae>
 800bd86:	6a21      	ldr	r1, [r4, #32]
 800bd88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd8a:	4643      	mov	r3, r8
 800bd8c:	463a      	mov	r2, r7
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b0      	blx	r6
 800bd92:	2800      	cmp	r0, #0
 800bd94:	dc08      	bgt.n	800bda8 <__sflush_r+0xfc>
 800bd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	4407      	add	r7, r0
 800bdaa:	eba8 0800 	sub.w	r8, r8, r0
 800bdae:	e7e7      	b.n	800bd80 <__sflush_r+0xd4>
 800bdb0:	dfbffffe 	.word	0xdfbffffe

0800bdb4 <_fflush_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	690b      	ldr	r3, [r1, #16]
 800bdb8:	4605      	mov	r5, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	b913      	cbnz	r3, 800bdc4 <_fflush_r+0x10>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	b118      	cbz	r0, 800bdce <_fflush_r+0x1a>
 800bdc6:	6a03      	ldr	r3, [r0, #32]
 800bdc8:	b90b      	cbnz	r3, 800bdce <_fflush_r+0x1a>
 800bdca:	f7fe f9cd 	bl	800a168 <__sinit>
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0f3      	beq.n	800bdbe <_fflush_r+0xa>
 800bdd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdd8:	07d0      	lsls	r0, r2, #31
 800bdda:	d404      	bmi.n	800bde6 <_fflush_r+0x32>
 800bddc:	0599      	lsls	r1, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_fflush_r+0x32>
 800bde0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bde2:	f7fe fbbc 	bl	800a55e <__retarget_lock_acquire_recursive>
 800bde6:	4628      	mov	r0, r5
 800bde8:	4621      	mov	r1, r4
 800bdea:	f7ff ff5f 	bl	800bcac <__sflush_r>
 800bdee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdf0:	07da      	lsls	r2, r3, #31
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	d4e4      	bmi.n	800bdc0 <_fflush_r+0xc>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	059b      	lsls	r3, r3, #22
 800bdfa:	d4e1      	bmi.n	800bdc0 <_fflush_r+0xc>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfe:	f7fe fbaf 	bl	800a560 <__retarget_lock_release_recursive>
 800be02:	e7dd      	b.n	800bdc0 <_fflush_r+0xc>

0800be04 <__swhatbuf_r>:
 800be04:	b570      	push	{r4, r5, r6, lr}
 800be06:	460c      	mov	r4, r1
 800be08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	b096      	sub	sp, #88	@ 0x58
 800be10:	4615      	mov	r5, r2
 800be12:	461e      	mov	r6, r3
 800be14:	da0d      	bge.n	800be32 <__swhatbuf_r+0x2e>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be1c:	f04f 0100 	mov.w	r1, #0
 800be20:	bf14      	ite	ne
 800be22:	2340      	movne	r3, #64	@ 0x40
 800be24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be28:	2000      	movs	r0, #0
 800be2a:	6031      	str	r1, [r6, #0]
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	b016      	add	sp, #88	@ 0x58
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	466a      	mov	r2, sp
 800be34:	f000 f848 	bl	800bec8 <_fstat_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	dbec      	blt.n	800be16 <__swhatbuf_r+0x12>
 800be3c:	9901      	ldr	r1, [sp, #4]
 800be3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be46:	4259      	negs	r1, r3
 800be48:	4159      	adcs	r1, r3
 800be4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be4e:	e7eb      	b.n	800be28 <__swhatbuf_r+0x24>

0800be50 <__smakebuf_r>:
 800be50:	898b      	ldrh	r3, [r1, #12]
 800be52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be54:	079d      	lsls	r5, r3, #30
 800be56:	4606      	mov	r6, r0
 800be58:	460c      	mov	r4, r1
 800be5a:	d507      	bpl.n	800be6c <__smakebuf_r+0x1c>
 800be5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	6123      	str	r3, [r4, #16]
 800be64:	2301      	movs	r3, #1
 800be66:	6163      	str	r3, [r4, #20]
 800be68:	b003      	add	sp, #12
 800be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6c:	ab01      	add	r3, sp, #4
 800be6e:	466a      	mov	r2, sp
 800be70:	f7ff ffc8 	bl	800be04 <__swhatbuf_r>
 800be74:	9f00      	ldr	r7, [sp, #0]
 800be76:	4605      	mov	r5, r0
 800be78:	4639      	mov	r1, r7
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff f9c6 	bl	800b20c <_malloc_r>
 800be80:	b948      	cbnz	r0, 800be96 <__smakebuf_r+0x46>
 800be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be86:	059a      	lsls	r2, r3, #22
 800be88:	d4ee      	bmi.n	800be68 <__smakebuf_r+0x18>
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	f043 0302 	orr.w	r3, r3, #2
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	e7e2      	b.n	800be5c <__smakebuf_r+0xc>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	6020      	str	r0, [r4, #0]
 800be9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bea6:	b15b      	cbz	r3, 800bec0 <__smakebuf_r+0x70>
 800bea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beac:	4630      	mov	r0, r6
 800beae:	f000 f81d 	bl	800beec <_isatty_r>
 800beb2:	b128      	cbz	r0, 800bec0 <__smakebuf_r+0x70>
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	f023 0303 	bic.w	r3, r3, #3
 800beba:	f043 0301 	orr.w	r3, r3, #1
 800bebe:	81a3      	strh	r3, [r4, #12]
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	431d      	orrs	r5, r3
 800bec4:	81a5      	strh	r5, [r4, #12]
 800bec6:	e7cf      	b.n	800be68 <__smakebuf_r+0x18>

0800bec8 <_fstat_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	@ (800bee8 <_fstat_r+0x20>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	4611      	mov	r1, r2
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	f7f5 fa26 	bl	8001326 <_fstat>
 800beda:	1c43      	adds	r3, r0, #1
 800bedc:	d102      	bne.n	800bee4 <_fstat_r+0x1c>
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	b103      	cbz	r3, 800bee4 <_fstat_r+0x1c>
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	bd38      	pop	{r3, r4, r5, pc}
 800bee6:	bf00      	nop
 800bee8:	240006ec 	.word	0x240006ec

0800beec <_isatty_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d06      	ldr	r5, [pc, #24]	@ (800bf08 <_isatty_r+0x1c>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	f7f5 fa25 	bl	8001346 <_isatty>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d102      	bne.n	800bf06 <_isatty_r+0x1a>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	b103      	cbz	r3, 800bf06 <_isatty_r+0x1a>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	240006ec 	.word	0x240006ec

0800bf0c <_sbrk_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d06      	ldr	r5, [pc, #24]	@ (800bf28 <_sbrk_r+0x1c>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	602b      	str	r3, [r5, #0]
 800bf18:	f7f5 fa2e 	bl	8001378 <_sbrk>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_sbrk_r+0x1a>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_sbrk_r+0x1a>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	240006ec 	.word	0x240006ec

0800bf2c <memcpy>:
 800bf2c:	440a      	add	r2, r1
 800bf2e:	4291      	cmp	r1, r2
 800bf30:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf34:	d100      	bne.n	800bf38 <memcpy+0xc>
 800bf36:	4770      	bx	lr
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf42:	4291      	cmp	r1, r2
 800bf44:	d1f9      	bne.n	800bf3a <memcpy+0xe>
 800bf46:	bd10      	pop	{r4, pc}

0800bf48 <__assert_func>:
 800bf48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	4b09      	ldr	r3, [pc, #36]	@ (800bf74 <__assert_func+0x2c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4605      	mov	r5, r0
 800bf54:	68d8      	ldr	r0, [r3, #12]
 800bf56:	b954      	cbnz	r4, 800bf6e <__assert_func+0x26>
 800bf58:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <__assert_func+0x30>)
 800bf5a:	461c      	mov	r4, r3
 800bf5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf60:	9100      	str	r1, [sp, #0]
 800bf62:	462b      	mov	r3, r5
 800bf64:	4905      	ldr	r1, [pc, #20]	@ (800bf7c <__assert_func+0x34>)
 800bf66:	f000 f841 	bl	800bfec <fiprintf>
 800bf6a:	f000 f851 	bl	800c010 <abort>
 800bf6e:	4b04      	ldr	r3, [pc, #16]	@ (800bf80 <__assert_func+0x38>)
 800bf70:	e7f4      	b.n	800bf5c <__assert_func+0x14>
 800bf72:	bf00      	nop
 800bf74:	2400001c 	.word	0x2400001c
 800bf78:	0800c43e 	.word	0x0800c43e
 800bf7c:	0800c410 	.word	0x0800c410
 800bf80:	0800c403 	.word	0x0800c403

0800bf84 <_calloc_r>:
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	fba1 5402 	umull	r5, r4, r1, r2
 800bf8a:	b93c      	cbnz	r4, 800bf9c <_calloc_r+0x18>
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	f7ff f93d 	bl	800b20c <_malloc_r>
 800bf92:	4606      	mov	r6, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <_calloc_r+0x1e>
 800bf96:	2600      	movs	r6, #0
 800bf98:	4630      	mov	r0, r6
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	220c      	movs	r2, #12
 800bf9e:	6002      	str	r2, [r0, #0]
 800bfa0:	e7f9      	b.n	800bf96 <_calloc_r+0x12>
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7fe fa5d 	bl	800a464 <memset>
 800bfaa:	e7f5      	b.n	800bf98 <_calloc_r+0x14>

0800bfac <__ascii_mbtowc>:
 800bfac:	b082      	sub	sp, #8
 800bfae:	b901      	cbnz	r1, 800bfb2 <__ascii_mbtowc+0x6>
 800bfb0:	a901      	add	r1, sp, #4
 800bfb2:	b142      	cbz	r2, 800bfc6 <__ascii_mbtowc+0x1a>
 800bfb4:	b14b      	cbz	r3, 800bfca <__ascii_mbtowc+0x1e>
 800bfb6:	7813      	ldrb	r3, [r2, #0]
 800bfb8:	600b      	str	r3, [r1, #0]
 800bfba:	7812      	ldrb	r2, [r2, #0]
 800bfbc:	1e10      	subs	r0, r2, #0
 800bfbe:	bf18      	it	ne
 800bfc0:	2001      	movne	r0, #1
 800bfc2:	b002      	add	sp, #8
 800bfc4:	4770      	bx	lr
 800bfc6:	4610      	mov	r0, r2
 800bfc8:	e7fb      	b.n	800bfc2 <__ascii_mbtowc+0x16>
 800bfca:	f06f 0001 	mvn.w	r0, #1
 800bfce:	e7f8      	b.n	800bfc2 <__ascii_mbtowc+0x16>

0800bfd0 <__ascii_wctomb>:
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	b141      	cbz	r1, 800bfe8 <__ascii_wctomb+0x18>
 800bfd6:	2aff      	cmp	r2, #255	@ 0xff
 800bfd8:	d904      	bls.n	800bfe4 <__ascii_wctomb+0x14>
 800bfda:	228a      	movs	r2, #138	@ 0x8a
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe2:	4770      	bx	lr
 800bfe4:	700a      	strb	r2, [r1, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	4770      	bx	lr
	...

0800bfec <fiprintf>:
 800bfec:	b40e      	push	{r1, r2, r3}
 800bfee:	b503      	push	{r0, r1, lr}
 800bff0:	4601      	mov	r1, r0
 800bff2:	ab03      	add	r3, sp, #12
 800bff4:	4805      	ldr	r0, [pc, #20]	@ (800c00c <fiprintf+0x20>)
 800bff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	f7ff fd3d 	bl	800ba7c <_vfiprintf_r>
 800c002:	b002      	add	sp, #8
 800c004:	f85d eb04 	ldr.w	lr, [sp], #4
 800c008:	b003      	add	sp, #12
 800c00a:	4770      	bx	lr
 800c00c:	2400001c 	.word	0x2400001c

0800c010 <abort>:
 800c010:	b508      	push	{r3, lr}
 800c012:	2006      	movs	r0, #6
 800c014:	f000 f82c 	bl	800c070 <raise>
 800c018:	2001      	movs	r0, #1
 800c01a:	f7f5 f950 	bl	80012be <_exit>

0800c01e <_raise_r>:
 800c01e:	291f      	cmp	r1, #31
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4605      	mov	r5, r0
 800c024:	460c      	mov	r4, r1
 800c026:	d904      	bls.n	800c032 <_raise_r+0x14>
 800c028:	2316      	movs	r3, #22
 800c02a:	6003      	str	r3, [r0, #0]
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c034:	b112      	cbz	r2, 800c03c <_raise_r+0x1e>
 800c036:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c03a:	b94b      	cbnz	r3, 800c050 <_raise_r+0x32>
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 f831 	bl	800c0a4 <_getpid_r>
 800c042:	4622      	mov	r2, r4
 800c044:	4601      	mov	r1, r0
 800c046:	4628      	mov	r0, r5
 800c048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c04c:	f000 b818 	b.w	800c080 <_kill_r>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d00a      	beq.n	800c06a <_raise_r+0x4c>
 800c054:	1c59      	adds	r1, r3, #1
 800c056:	d103      	bne.n	800c060 <_raise_r+0x42>
 800c058:	2316      	movs	r3, #22
 800c05a:	6003      	str	r3, [r0, #0]
 800c05c:	2001      	movs	r0, #1
 800c05e:	e7e7      	b.n	800c030 <_raise_r+0x12>
 800c060:	2100      	movs	r1, #0
 800c062:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c066:	4620      	mov	r0, r4
 800c068:	4798      	blx	r3
 800c06a:	2000      	movs	r0, #0
 800c06c:	e7e0      	b.n	800c030 <_raise_r+0x12>
	...

0800c070 <raise>:
 800c070:	4b02      	ldr	r3, [pc, #8]	@ (800c07c <raise+0xc>)
 800c072:	4601      	mov	r1, r0
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	f7ff bfd2 	b.w	800c01e <_raise_r>
 800c07a:	bf00      	nop
 800c07c:	2400001c 	.word	0x2400001c

0800c080 <_kill_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d07      	ldr	r5, [pc, #28]	@ (800c0a0 <_kill_r+0x20>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f7f5 f906 	bl	800129e <_kill>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d102      	bne.n	800c09c <_kill_r+0x1c>
 800c096:	682b      	ldr	r3, [r5, #0]
 800c098:	b103      	cbz	r3, 800c09c <_kill_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	240006ec 	.word	0x240006ec

0800c0a4 <_getpid_r>:
 800c0a4:	f7f5 b8f3 	b.w	800128e <_getpid>

0800c0a8 <_init>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr

0800c0b4 <_fini>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr
